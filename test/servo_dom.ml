(*generated by gen-bs tool*)
(* internal use *)
(* This code is generated by gen-bs tool *)

type _baseClass
(* functions for variadic *)
type ('own, 'return, 'args) variadic_func
type 'args variadic_args

external apply : ('own, 'return, 'args) variadic_func ->
                 'own -> 'args variadic_args -> 'return = "apply" [@@bs.send]

let to_arg ary =
  let to_arg : 'a array -> 'a variadic_args [@bs] = 
    [%bs.raw "function(a){ return a}"]
  in
  Js_unsafe.fn_run1 to_arg ary

let unsafe_add ary mem = 
  let unsafe_add : 'a variadic_args -> 'b -> ('b * 'a) variadic_args [@bs] = 
    [%bs.raw "function(a, b){ return [b].concat(a)}"]
  in
  Js_unsafe.fn_run2 unsafe_add ary mem
(* functions for override *)
let access_array f x = Array.map f x
let access_null f x = Js_null.bind x (Js_unsafe.fn_mk1 f) 
let access_undef f x = Js_undefined.bind x (Js_unsafe.fn_mk1 f) 
(*let access_promise f x = Js_promise.then_ f x*)

let undef_to_opt x = Js_undefined.to_opt
let null_to_opt x = Js_null.to_opt
let identity x = x


(* types of javascript objects*)
type _console
and ('a) console_like
and console = (_baseClass) console_like
and ('a) _eventSource
and ('a) eventSource_like = (('a) _eventSource) eventTarget_like
and eventSource = (_baseClass) eventSource_like
and ('a) _hTMLIFrameElement
and ('a) hTMLIFrameElement_like = (('a) _hTMLIFrameElement) hTMLElement_like
and hTMLIFrameElement = (_baseClass) hTMLIFrameElement_like
and ('a) _cSSStyleRule
and ('a) cSSStyleRule_like = (('a) _cSSStyleRule) cSSRule_like
and cSSStyleRule = (_baseClass) cSSStyleRule_like
and ('a) _xMLHttpRequestUpload
and ('a) xMLHttpRequestUpload_like = (('a) _xMLHttpRequestUpload) xMLHttpRequestEventTarget_like
and xMLHttpRequestUpload = (_baseClass) xMLHttpRequestUpload_like
and _performance
and ('a) performance_like
and performance = (_baseClass) performance_like
and ('a) _cSSFontFaceRule
and ('a) cSSFontFaceRule_like = (('a) _cSSFontFaceRule) cSSRule_like
and cSSFontFaceRule = (_baseClass) cSSFontFaceRule_like
and ('a) _hTMLAudioElement
and ('a) hTMLAudioElement_like = (('a) _hTMLAudioElement) hTMLMediaElement_like
and hTMLAudioElement = (_baseClass) hTMLAudioElement_like
and _customElementRegistry
and ('a) customElementRegistry_like
and customElementRegistry = (_baseClass) customElementRegistry_like
and ('a) _sVGGraphicsElement
and ('a) sVGGraphicsElement_like = (('a) _sVGGraphicsElement) sVGElement_like
and sVGGraphicsElement = (_baseClass) sVGGraphicsElement_like
and _gamepadList
and ('a) gamepadList_like
and gamepadList = (_baseClass) gamepadList_like
and ('a) _uIEvent
and ('a) uIEvent_like = (('a) _uIEvent) event_like
and uIEvent = (_baseClass) uIEvent_like
and ('a) _hTMLScriptElement
and ('a) hTMLScriptElement_like = (('a) _hTMLScriptElement) hTMLElement_like
and hTMLScriptElement = (_baseClass) hTMLScriptElement_like
and ('a) _hTMLObjectElement
and ('a) hTMLObjectElement_like = (('a) _hTMLObjectElement) hTMLElement_like
and hTMLObjectElement = (_baseClass) hTMLObjectElement_like
and ('a) _gamepadEvent
and ('a) gamepadEvent_like = (('a) _gamepadEvent) event_like
and gamepadEvent = (_baseClass) gamepadEvent_like
and _uRLSearchParams
and ('a) uRLSearchParams_like
and uRLSearchParams = (_baseClass) uRLSearchParams_like
and ('a) _hTMLOptionsCollection
and ('a) hTMLOptionsCollection_like = (('a) _hTMLOptionsCollection) hTMLCollection_like
and hTMLOptionsCollection = (_baseClass) hTMLOptionsCollection_like
and _gamepadButton
and ('a) gamepadButton_like
and gamepadButton = (_baseClass) gamepadButton_like
and ('a) _hTMLMediaElement
and ('a) hTMLMediaElement_like = (('a) _hTMLMediaElement) hTMLElement_like
and hTMLMediaElement = (_baseClass) hTMLMediaElement_like
and _elementContentEditable
and ('a) elementContentEditable_like
and elementContentEditable = (_baseClass) elementContentEditable_like
and _mimeTypeArray
and ('a) mimeTypeArray_like
and mimeTypeArray = (_baseClass) mimeTypeArray_like
and _formData
and ('a) formData_like
and formData = (_baseClass) formData_like
and ('a) _dOMMatrix
and ('a) dOMMatrix_like = (('a) _dOMMatrix) dOMMatrixReadOnly_like
and dOMMatrix = (_baseClass) dOMMatrix_like
and ('a) _comment
and ('a) comment_like = (('a) _comment) characterData_like
and comment = (_baseClass) comment_like
and _treeWalker
and ('a) treeWalker_like
and treeWalker = (_baseClass) treeWalker_like
and _dOMMatrixReadOnly
and ('a) dOMMatrixReadOnly_like
and dOMMatrixReadOnly = (_baseClass) dOMMatrixReadOnly_like
and ('a) _hTMLImageElement
and ('a) hTMLImageElement_like = (('a) _hTMLImageElement) hTMLElement_like
and hTMLImageElement = (_baseClass) hTMLImageElement_like
and ('a) _hTMLTableColElement
and ('a) hTMLTableColElement_like = (('a) _hTMLTableColElement) hTMLElement_like
and hTMLTableColElement = (_baseClass) hTMLTableColElement_like
and _parentNode
and ('a) parentNode_like
and parentNode = (_baseClass) parentNode_like
and ('a) _webGLFramebuffer
and ('a) webGLFramebuffer_like = (('a) _webGLFramebuffer) webGLObject_like
and webGLFramebuffer = (_baseClass) webGLFramebuffer_like
and _range
and ('a) range_like
and range = (_baseClass) range_like
and _windowOrWorkerGlobalScope
and ('a) windowOrWorkerGlobalScope_like
and windowOrWorkerGlobalScope = (_baseClass) windowOrWorkerGlobalScope_like
and ('a) _hTMLTitleElement
and ('a) hTMLTitleElement_like = (('a) _hTMLTitleElement) hTMLElement_like
and hTMLTitleElement = (_baseClass) hTMLTitleElement_like
and _vREyeParameters
and ('a) vREyeParameters_like
and vREyeParameters = (_baseClass) vREyeParameters_like
and ('a) _hTMLDataElement
and ('a) hTMLDataElement_like = (('a) _hTMLDataElement) hTMLElement_like
and hTMLDataElement = (_baseClass) hTMLDataElement_like
and _webGLUniformLocation
and ('a) webGLUniformLocation_like
and webGLUniformLocation = (_baseClass) webGLUniformLocation_like
and ('a) _serviceWorkerRegistration
and ('a) serviceWorkerRegistration_like = (('a) _serviceWorkerRegistration) eventTarget_like
and serviceWorkerRegistration = (_baseClass) serviceWorkerRegistration_like
and _oESTextureHalfFloat
and ('a) oESTextureHalfFloat_like
and oESTextureHalfFloat = (_baseClass) oESTextureHalfFloat_like
and ('a) _serviceWorkerContainer
and ('a) serviceWorkerContainer_like = (('a) _serviceWorkerContainer) eventTarget_like
and serviceWorkerContainer = (_baseClass) serviceWorkerContainer_like
and _oESVertexArrayObject
and ('a) oESVertexArrayObject_like
and oESVertexArrayObject = (_baseClass) oESVertexArrayObject_like
and ('a) _xMLHttpRequest
and ('a) xMLHttpRequest_like = (('a) _xMLHttpRequest) xMLHttpRequestEventTarget_like
and xMLHttpRequest = (_baseClass) xMLHttpRequest_like
and ('a) _hTMLMetaElement
and ('a) hTMLMetaElement_like = (('a) _hTMLMetaElement) hTMLElement_like
and hTMLMetaElement = (_baseClass) hTMLMetaElement_like
and _testRunner
and ('a) testRunner_like
and testRunner = (_baseClass) testRunner_like
and ('a) _bluetoothPermissionResult
and ('a) bluetoothPermissionResult_like = (('a) _bluetoothPermissionResult) permissionStatus_like
and bluetoothPermissionResult = (_baseClass) bluetoothPermissionResult_like
and ('a) _forceTouchEvent
and ('a) forceTouchEvent_like = (('a) _forceTouchEvent) uIEvent_like
and forceTouchEvent = (_baseClass) forceTouchEvent_like
and ('a) _errorEvent
and ('a) errorEvent_like = (('a) _errorEvent) event_like
and errorEvent = (_baseClass) errorEvent_like
and _eventTarget
and ('a) eventTarget_like
and eventTarget = (_baseClass) eventTarget_like
and ('a) _hTMLTableHeaderCellElement
and ('a) hTMLTableHeaderCellElement_like = (('a) _hTMLTableHeaderCellElement) hTMLTableCellElement_like
and hTMLTableHeaderCellElement = (_baseClass) hTMLTableHeaderCellElement_like
and _nodeIterator
and ('a) nodeIterator_like
and nodeIterator = (_baseClass) nodeIterator_like
and ('a) _hTMLLIElement
and ('a) hTMLLIElement_like = (('a) _hTMLLIElement) hTMLElement_like
and hTMLLIElement = (_baseClass) hTMLLIElement_like
and ('a) _permissionStatus
and ('a) permissionStatus_like = (('a) _permissionStatus) eventTarget_like
and permissionStatus = (_baseClass) permissionStatus_like
and ('a) _hTMLOptGroupElement
and ('a) hTMLOptGroupElement_like = (('a) _hTMLOptGroupElement) hTMLElement_like
and hTMLOptGroupElement = (_baseClass) hTMLOptGroupElement_like
and _bluetoothRemoteGATTServer
and ('a) bluetoothRemoteGATTServer_like
and bluetoothRemoteGATTServer = (_baseClass) bluetoothRemoteGATTServer_like
and ('a) _messageEvent
and ('a) messageEvent_like = (('a) _messageEvent) event_like
and messageEvent = (_baseClass) messageEvent_like
and ('a) _dissimilarOriginWindow
and ('a) dissimilarOriginWindow_like = (('a) _dissimilarOriginWindow) globalScope_like
and dissimilarOriginWindow = (_baseClass) dissimilarOriginWindow_like
and ('a) _sVGSVGElement
and ('a) sVGSVGElement_like = (('a) _sVGSVGElement) sVGGraphicsElement_like
and sVGSVGElement = (_baseClass) sVGSVGElement_like
and ('a) _beforeUnloadEvent
and ('a) beforeUnloadEvent_like = (('a) _beforeUnloadEvent) event_like
and beforeUnloadEvent = (_baseClass) beforeUnloadEvent_like
and ('a) _keyboardEvent
and ('a) keyboardEvent_like = (('a) _keyboardEvent) uIEvent_like
and keyboardEvent = (_baseClass) keyboardEvent_like
and ('a) _vR
and ('a) vR_like = (('a) _vR) eventTarget_like
and vR = (_baseClass) vR_like
and ('a) _touchEvent
and ('a) touchEvent_like = (('a) _touchEvent) uIEvent_like
and touchEvent = (_baseClass) touchEvent_like
and ('a) _hTMLElement
and ('a) hTMLElement_like = (('a) _hTMLElement) element_like
and hTMLElement = (_baseClass) hTMLElement_like
and ('a) _hTMLFieldSetElement
and ('a) hTMLFieldSetElement_like = (('a) _hTMLFieldSetElement) hTMLElement_like
and hTMLFieldSetElement = (_baseClass) hTMLFieldSetElement_like
and ('a) _hTMLDListElement
and ('a) hTMLDListElement_like = (('a) _hTMLDListElement) hTMLElement_like
and hTMLDListElement = (_baseClass) hTMLDListElement_like
and _webGLRenderingContextBase
and ('a) webGLRenderingContextBase_like
and webGLRenderingContextBase = (_baseClass) webGLRenderingContextBase_like
and _webGLRenderingContext
and ('a) webGLRenderingContext_like
and webGLRenderingContext = (_baseClass) webGLRenderingContext_like
and ('a) _documentFragment
and ('a) documentFragment_like = (('a) _documentFragment) node_like
and documentFragment = (_baseClass) documentFragment_like
and _location
and ('a) location_like
and location = (_baseClass) location_like
and _body
and ('a) body_like
and body = (_baseClass) body_like
and ('a) _dOMRect
and ('a) dOMRect_like = (('a) _dOMRect) dOMRectReadOnly_like
and dOMRect = (_baseClass) dOMRect_like
and _history
and ('a) history_like
and history = (_baseClass) history_like
and _nodeList
and ('a) nodeList_like
and nodeList = (_baseClass) nodeList_like
and ('a) _hTMLBodyElement
and ('a) hTMLBodyElement_like = (('a) _hTMLBodyElement) hTMLElement_like
and hTMLBodyElement = (_baseClass) hTMLBodyElement_like
and ('a) _bluetoothDevice
and ('a) bluetoothDevice_like = (('a) _bluetoothDevice) eventTarget_like
and bluetoothDevice = (_baseClass) bluetoothDevice_like
and _bluetoothDeviceEventHandlers
and ('a) bluetoothDeviceEventHandlers_like
and bluetoothDeviceEventHandlers = (_baseClass) bluetoothDeviceEventHandlers_like
and ('a) _hTMLLegendElement
and ('a) hTMLLegendElement_like = (('a) _hTMLLegendElement) hTMLElement_like
and hTMLLegendElement = (_baseClass) hTMLLegendElement_like
and _screen
and ('a) screen_like
and screen = (_baseClass) screen_like
and _pluginArray
and ('a) pluginArray_like
and pluginArray = (_baseClass) pluginArray_like
and _bluetoothCharacteristicProperties
and ('a) bluetoothCharacteristicProperties_like
and bluetoothCharacteristicProperties = (_baseClass) bluetoothCharacteristicProperties_like
and _dOMRectReadOnly
and ('a) dOMRectReadOnly_like
and dOMRectReadOnly = (_baseClass) dOMRectReadOnly_like
and ('a) _cSSSupportsRule
and ('a) cSSSupportsRule_like = (('a) _cSSSupportsRule) cSSConditionRule_like
and cSSSupportsRule = (_baseClass) cSSSupportsRule_like
and ('a) _cSSImportRule
and ('a) cSSImportRule_like = (('a) _cSSImportRule) cSSRule_like
and cSSImportRule = (_baseClass) cSSImportRule_like
and _bluetoothRemoteGATTDescriptor
and ('a) bluetoothRemoteGATTDescriptor_like
and bluetoothRemoteGATTDescriptor = (_baseClass) bluetoothRemoteGATTDescriptor_like
and _childNode
and ('a) childNode_like
and childNode = (_baseClass) childNode_like
and _nonDocumentTypeChildNode
and ('a) nonDocumentTypeChildNode_like
and nonDocumentTypeChildNode = (_baseClass) nonDocumentTypeChildNode_like
and _dOMParser
and ('a) dOMParser_like
and dOMParser = (_baseClass) dOMParser_like
and _uRL
and ('a) uRL_like
and uRL = (_baseClass) uRL_like
and _elementCSSInlineStyle
and ('a) elementCSSInlineStyle_like
and elementCSSInlineStyle = (_baseClass) elementCSSInlineStyle_like
and _fileList
and ('a) fileList_like
and fileList = (_baseClass) fileList_like
and _webGLObject
and ('a) webGLObject_like
and webGLObject = (_baseClass) webGLObject_like
and ('a) _radioNodeList
and ('a) radioNodeList_like = (('a) _radioNodeList) nodeList_like
and radioNodeList = (_baseClass) radioNodeList_like
and _browserElement
and ('a) browserElement_like
and browserElement = (_baseClass) browserElement_like
and _browserElementCommon
and ('a) browserElementCommon_like
and browserElementCommon = (_baseClass) browserElementCommon_like
and _browserElementPrivileged
and ('a) browserElementPrivileged_like
and browserElementPrivileged = (_baseClass) browserElementPrivileged_like
and ('a) _file
and ('a) file_like = (('a) _file) blob_like
and file = (_baseClass) file_like
and _workerNavigator
and ('a) workerNavigator_like
and workerNavigator = (_baseClass) workerNavigator_like
and _styleSheet
and ('a) styleSheet_like
and styleSheet = (_baseClass) styleSheet_like
and _linkStyle
and ('a) linkStyle_like
and linkStyle = (_baseClass) linkStyle_like
and ('a) _hTMLBaseElement
and ('a) hTMLBaseElement_like = (('a) _hTMLBaseElement) hTMLElement_like
and hTMLBaseElement = (_baseClass) hTMLBaseElement_like
and _hTMLCollection
and ('a) hTMLCollection_like
and hTMLCollection = (_baseClass) hTMLCollection_like
and ('a) _hTMLUListElement
and ('a) hTMLUListElement_like = (('a) _hTMLUListElement) hTMLElement_like
and hTMLUListElement = (_baseClass) hTMLUListElement_like
and _performanceTiming
and ('a) performanceTiming_like
and performanceTiming = (_baseClass) performanceTiming_like
and ('a) _extendableMessageEvent
and ('a) extendableMessageEvent_like = (('a) _extendableMessageEvent) extendableEvent_like
and extendableMessageEvent = (_baseClass) extendableMessageEvent_like
and ('a) _hTMLHtmlElement
and ('a) hTMLHtmlElement_like = (('a) _hTMLHtmlElement) hTMLElement_like
and hTMLHtmlElement = (_baseClass) hTMLHtmlElement_like
and ('a) _hTMLTimeElement
and ('a) hTMLTimeElement_like = (('a) _hTMLTimeElement) hTMLElement_like
and hTMLTimeElement = (_baseClass) hTMLTimeElement_like
and _touch
and ('a) touch_like
and touch = (_baseClass) touch_like
and ('a) _storageEvent
and ('a) storageEvent_like = (('a) _storageEvent) event_like
and storageEvent = (_baseClass) storageEvent_like
and _nonElementParentNode
and ('a) nonElementParentNode_like
and nonElementParentNode = (_baseClass) nonElementParentNode_like
and _cSSRuleList
and ('a) cSSRuleList_like
and cSSRuleList = (_baseClass) cSSRuleList_like
and ('a) _hTMLTableSectionElement
and ('a) hTMLTableSectionElement_like = (('a) _hTMLTableSectionElement) hTMLElement_like
and hTMLTableSectionElement = (_baseClass) hTMLTableSectionElement_like
and ('a) _node
and ('a) node_like = (('a) _node) eventTarget_like
and node = (_baseClass) node_like
and ('a) _vRDisplayEvent
and ('a) vRDisplayEvent_like = (('a) _vRDisplayEvent) event_like
and vRDisplayEvent = (_baseClass) vRDisplayEvent_like
and _dissimilarOriginLocation
and ('a) dissimilarOriginLocation_like
and dissimilarOriginLocation = (_baseClass) dissimilarOriginLocation_like
and _dOMImplementation
and ('a) dOMImplementation_like
and dOMImplementation = (_baseClass) dOMImplementation_like
and ('a) _popStateEvent
and ('a) popStateEvent_like = (('a) _popStateEvent) event_like
and popStateEvent = (_baseClass) popStateEvent_like
and ('a) _hTMLFrameElement
and ('a) hTMLFrameElement_like = (('a) _hTMLFrameElement) hTMLElement_like
and hTMLFrameElement = (_baseClass) hTMLFrameElement_like
and ('a) _vRDisplay
and ('a) vRDisplay_like = (('a) _vRDisplay) eventTarget_like
and vRDisplay = (_baseClass) vRDisplay_like
and _testBinding
and ('a) testBinding_like
and testBinding = (_baseClass) testBinding_like
and _workerLocation
and ('a) workerLocation_like
and workerLocation = (_baseClass) workerLocation_like
and _cSS
and ('a) cSS_like
and cSS = (_baseClass) cSS_like
and ('a) _hTMLVideoElement
and ('a) hTMLVideoElement_like = (('a) _hTMLVideoElement) hTMLMediaElement_like
and hTMLVideoElement = (_baseClass) hTMLVideoElement_like
and _canvasGradient
and ('a) canvasGradient_like
and canvasGradient = (_baseClass) canvasGradient_like
and _vRFieldOfView
and ('a) vRFieldOfView_like
and vRFieldOfView = (_baseClass) vRFieldOfView_like
and ('a) _hTMLLinkElement
and ('a) hTMLLinkElement_like = (('a) _hTMLLinkElement) hTMLElement_like
and hTMLLinkElement = (_baseClass) hTMLLinkElement_like
and ('a) _webGLContextEvent
and ('a) webGLContextEvent_like = (('a) _webGLContextEvent) event_like
and webGLContextEvent = (_baseClass) webGLContextEvent_like
and ('a) _webGLProgram
and ('a) webGLProgram_like = (('a) _webGLProgram) webGLObject_like
and webGLProgram = (_baseClass) webGLProgram_like
and ('a) _bluetoothRemoteGATTCharacteristic
and ('a) bluetoothRemoteGATTCharacteristic_like = (('a) _bluetoothRemoteGATTCharacteristic) eventTarget_like
and bluetoothRemoteGATTCharacteristic = (_baseClass) bluetoothRemoteGATTCharacteristic_like
and _characteristicEventHandlers
and ('a) characteristicEventHandlers_like
and characteristicEventHandlers = (_baseClass) characteristicEventHandlers_like
and ('a) _hTMLEmbedElement
and ('a) hTMLEmbedElement_like = (('a) _hTMLEmbedElement) hTMLElement_like
and hTMLEmbedElement = (_baseClass) hTMLEmbedElement_like
and _gamepad
and ('a) gamepad_like
and gamepad = (_baseClass) gamepad_like
and ('a) _cSSConditionRule
and ('a) cSSConditionRule_like = (('a) _cSSConditionRule) cSSGroupingRule_like
and cSSConditionRule = (_baseClass) cSSConditionRule_like
and _textDecoder
and ('a) textDecoder_like
and textDecoder = (_baseClass) textDecoder_like
and _testBindingPairIterable
and ('a) testBindingPairIterable_like
and testBindingPairIterable = (_baseClass) testBindingPairIterable_like
and ('a) _hTMLMeterElement
and ('a) hTMLMeterElement_like = (('a) _hTMLMeterElement) hTMLElement_like
and hTMLMeterElement = (_baseClass) hTMLMeterElement_like
and _hTMLHyperlinkElementUtils
and ('a) hTMLHyperlinkElementUtils_like
and hTMLHyperlinkElementUtils = (_baseClass) hTMLHyperlinkElementUtils_like
and _namedNodeMap
and ('a) namedNodeMap_like
and namedNodeMap = (_baseClass) namedNodeMap_like
and ('a) _hTMLTableCaptionElement
and ('a) hTMLTableCaptionElement_like = (('a) _hTMLTableCaptionElement) hTMLElement_like
and hTMLTableCaptionElement = (_baseClass) hTMLTableCaptionElement_like
and ('a) _cSSKeyframeRule
and ('a) cSSKeyframeRule_like = (('a) _cSSKeyframeRule) cSSRule_like
and cSSKeyframeRule = (_baseClass) cSSKeyframeRule_like
and ('a) _webGLVertexArrayObjectOES
and ('a) webGLVertexArrayObjectOES_like = (('a) _webGLVertexArrayObjectOES) webGLObject_like
and webGLVertexArrayObjectOES = (_baseClass) webGLVertexArrayObjectOES_like
and ('a) _hTMLLabelElement
and ('a) hTMLLabelElement_like = (('a) _hTMLLabelElement) hTMLElement_like
and hTMLLabelElement = (_baseClass) hTMLLabelElement_like
and ('a) _paintWorkletGlobalScope
and ('a) paintWorkletGlobalScope_like = (('a) _paintWorkletGlobalScope) workletGlobalScope_like
and paintWorkletGlobalScope = (_baseClass) paintWorkletGlobalScope_like
and ('a) _hTMLAnchorElement
and ('a) hTMLAnchorElement_like = (('a) _hTMLAnchorElement) hTMLElement_like
and hTMLAnchorElement = (_baseClass) hTMLAnchorElement_like
and ('a) _hTMLHeadElement
and ('a) hTMLHeadElement_like = (('a) _hTMLHeadElement) hTMLElement_like
and hTMLHeadElement = (_baseClass) hTMLHeadElement_like
and ('a) _hTMLOutputElement
and ('a) hTMLOutputElement_like = (('a) _hTMLOutputElement) hTMLElement_like
and hTMLOutputElement = (_baseClass) hTMLOutputElement_like
and ('a) _serviceWorkerGlobalScope
and ('a) serviceWorkerGlobalScope_like = (('a) _serviceWorkerGlobalScope) workerGlobalScope_like
and serviceWorkerGlobalScope = (_baseClass) serviceWorkerGlobalScope_like
and ('a) _webGLShader
and ('a) webGLShader_like = (('a) _webGLShader) webGLObject_like
and webGLShader = (_baseClass) webGLShader_like
and _touchList
and ('a) touchList_like
and touchList = (_baseClass) touchList_like
and _webGLActiveInfo
and ('a) webGLActiveInfo_like
and webGLActiveInfo = (_baseClass) webGLActiveInfo_like
and _plugin
and ('a) plugin_like
and plugin = (_baseClass) plugin_like
and ('a) _dedicatedWorkerGlobalScope
and ('a) dedicatedWorkerGlobalScope_like = (('a) _dedicatedWorkerGlobalScope) workerGlobalScope_like
and dedicatedWorkerGlobalScope = (_baseClass) dedicatedWorkerGlobalScope_like
and ('a) _globalScope
and ('a) globalScope_like = (('a) _globalScope) eventTarget_like
and globalScope = (_baseClass) globalScope_like
and _vRDisplayCapabilities
and ('a) vRDisplayCapabilities_like
and vRDisplayCapabilities = (_baseClass) vRDisplayCapabilities_like
and ('a) _hTMLUnknownElement
and ('a) hTMLUnknownElement_like = (('a) _hTMLUnknownElement) hTMLElement_like
and hTMLUnknownElement = (_baseClass) hTMLUnknownElement_like
and _headers
and ('a) headers_like
and headers = (_baseClass) headers_like
and ('a) _cSSMediaRule
and ('a) cSSMediaRule_like = (('a) _cSSMediaRule) cSSConditionRule_like
and cSSMediaRule = (_baseClass) cSSMediaRule_like
and _oESTextureHalfFloatLinear
and ('a) oESTextureHalfFloatLinear_like
and oESTextureHalfFloatLinear = (_baseClass) oESTextureHalfFloatLinear_like
and ('a) _hTMLParamElement
and ('a) hTMLParamElement_like = (('a) _hTMLParamElement) hTMLElement_like
and hTMLParamElement = (_baseClass) hTMLParamElement_like
and ('a) _documentType
and ('a) documentType_like = (('a) _documentType) node_like
and documentType = (_baseClass) documentType_like
and ('a) _testBindingProxy
and ('a) testBindingProxy_like = (('a) _testBindingProxy) testBinding_like
and testBindingProxy = (_baseClass) testBindingProxy_like
and ('a) _hTMLOptionElement
and ('a) hTMLOptionElement_like = (('a) _hTMLOptionElement) hTMLElement_like
and hTMLOptionElement = (_baseClass) hTMLOptionElement_like
and ('a) _hTMLFormControlsCollection
and ('a) hTMLFormControlsCollection_like = (('a) _hTMLFormControlsCollection) hTMLCollection_like
and hTMLFormControlsCollection = (_baseClass) hTMLFormControlsCollection_like
and _worklet
and ('a) worklet_like
and worklet = (_baseClass) worklet_like
and _navigator
and ('a) navigator_like
and navigator = (_baseClass) navigator_like
and _navigatorID
and ('a) navigatorID_like
and navigatorID = (_baseClass) navigatorID_like
and _navigatorLanguage
and ('a) navigatorLanguage_like
and navigatorLanguage = (_baseClass) navigatorLanguage_like
and _navigatorPlugins
and ('a) navigatorPlugins_like
and navigatorPlugins = (_baseClass) navigatorPlugins_like
and _navigatorCookies
and ('a) navigatorCookies_like
and navigatorCookies = (_baseClass) navigatorCookies_like
and _promiseNativeHandler
and ('a) promiseNativeHandler_like
and promiseNativeHandler = (_baseClass) promiseNativeHandler_like
and ('a) _hTMLOListElement
and ('a) hTMLOListElement_like = (('a) _hTMLOListElement) hTMLElement_like
and hTMLOListElement = (_baseClass) hTMLOListElement_like
and ('a) _customEvent
and ('a) customEvent_like = (('a) _customEvent) event_like
and customEvent = (_baseClass) customEvent_like
and ('a) _hTMLSelectElement
and ('a) hTMLSelectElement_like = (('a) _hTMLSelectElement) hTMLElement_like
and hTMLSelectElement = (_baseClass) hTMLSelectElement_like
and ('a) _hTMLStyleElement
and ('a) hTMLStyleElement_like = (('a) _hTMLStyleElement) hTMLElement_like
and hTMLStyleElement = (_baseClass) hTMLStyleElement_like
and ('a) _hTMLQuoteElement
and ('a) hTMLQuoteElement_like = (('a) _hTMLQuoteElement) hTMLElement_like
and hTMLQuoteElement = (_baseClass) hTMLQuoteElement_like
and ('a) _dOMPoint
and ('a) dOMPoint_like = (('a) _dOMPoint) dOMPointReadOnly_like
and dOMPoint = (_baseClass) dOMPoint_like
and _fileReaderSync
and ('a) fileReaderSync_like
and fileReaderSync = (_baseClass) fileReaderSync_like
and _imageData
and ('a) imageData_like
and imageData = (_baseClass) imageData_like
and ('a) _hTMLBRElement
and ('a) hTMLBRElement_like = (('a) _hTMLBRElement) hTMLElement_like
and hTMLBRElement = (_baseClass) hTMLBRElement_like
and _mimeType
and ('a) mimeType_like
and mimeType = (_baseClass) mimeType_like
and ('a) _pageTransitionEvent
and ('a) pageTransitionEvent_like = (('a) _pageTransitionEvent) event_like
and pageTransitionEvent = (_baseClass) pageTransitionEvent_like
and _globalCrypto
and ('a) globalCrypto_like
and globalCrypto = (_baseClass) globalCrypto_like
and _crypto
and ('a) crypto_like
and crypto = (_baseClass) crypto_like
and ('a) _hTMLButtonElement
and ('a) hTMLButtonElement_like = (('a) _hTMLButtonElement) hTMLElement_like
and hTMLButtonElement = (_baseClass) hTMLButtonElement_like
and ('a) _hTMLHRElement
and ('a) hTMLHRElement_like = (('a) _hTMLHRElement) hTMLElement_like
and hTMLHRElement = (_baseClass) hTMLHRElement_like
and _cSSStyleDeclaration
and ('a) cSSStyleDeclaration_like
and cSSStyleDeclaration = (_baseClass) cSSStyleDeclaration_like
and ('a) _hTMLTextAreaElement
and ('a) hTMLTextAreaElement_like = (('a) _hTMLTextAreaElement) hTMLElement_like
and hTMLTextAreaElement = (_baseClass) hTMLTextAreaElement_like
and _dOMQuad
and ('a) dOMQuad_like
and dOMQuad = (_baseClass) dOMQuad_like
and _request
and ('a) request_like
and request = (_baseClass) request_like
and ('a) _hTMLSourceElement
and ('a) hTMLSourceElement_like = (('a) _hTMLSourceElement) hTMLElement_like
and hTMLSourceElement = (_baseClass) hTMLSourceElement_like
and ('a) _hTMLPreElement
and ('a) hTMLPreElement_like = (('a) _hTMLPreElement) hTMLElement_like
and hTMLPreElement = (_baseClass) hTMLPreElement_like
and ('a) _hTMLModElement
and ('a) hTMLModElement_like = (('a) _hTMLModElement) hTMLElement_like
and hTMLModElement = (_baseClass) hTMLModElement_like
and ('a) _hTMLMapElement
and ('a) hTMLMapElement_like = (('a) _hTMLMapElement) hTMLElement_like
and hTMLMapElement = (_baseClass) hTMLMapElement_like
and ('a) _serviceWorker
and ('a) serviceWorker_like = (('a) _serviceWorker) eventTarget_like
and serviceWorker = (_baseClass) serviceWorker_like
and ('a) _hTMLTemplateElement
and ('a) hTMLTemplateElement_like = (('a) _hTMLTemplateElement) hTMLElement_like
and hTMLTemplateElement = (_baseClass) hTMLTemplateElement_like
and _dOMTokenList
and ('a) dOMTokenList_like
and dOMTokenList = (_baseClass) dOMTokenList_like
and ('a) _hTMLDirectoryElement
and ('a) hTMLDirectoryElement_like = (('a) _hTMLDirectoryElement) hTMLElement_like
and hTMLDirectoryElement = (_baseClass) hTMLDirectoryElement_like
and ('a) _document
and ('a) document_like = (('a) _document) node_like
and document = (_baseClass) document_like
and ('a) _hTMLInputElement
and ('a) hTMLInputElement_like = (('a) _hTMLInputElement) hTMLElement_like
and hTMLInputElement = (_baseClass) hTMLInputElement_like
and ('a) _hTMLParagraphElement
and ('a) hTMLParagraphElement_like = (('a) _hTMLParagraphElement) hTMLElement_like
and hTMLParagraphElement = (_baseClass) hTMLParagraphElement_like
and __Promise
and ('a) _Promise_like
and _Promise = (_baseClass) _Promise_like
and ('a) _characterData
and ('a) characterData_like = (('a) _characterData) node_like
and characterData = (_baseClass) characterData_like
and ('a) _hTMLAreaElement
and ('a) hTMLAreaElement_like = (('a) _hTMLAreaElement) hTMLElement_like
and hTMLAreaElement = (_baseClass) hTMLAreaElement_like
and _vRPose
and ('a) vRPose_like
and vRPose = (_baseClass) vRPose_like
and ('a) _closeEvent
and ('a) closeEvent_like = (('a) _closeEvent) event_like
and closeEvent = (_baseClass) closeEvent_like
and ('a) _processingInstruction
and ('a) processingInstruction_like = (('a) _processingInstruction) characterData_like
and processingInstruction = (_baseClass) processingInstruction_like
and ('a) _webSocket
and ('a) webSocket_like = (('a) _webSocket) eventTarget_like
and webSocket = (_baseClass) webSocket_like
and _gamepadButtonList
and ('a) gamepadButtonList_like
and gamepadButtonList = (_baseClass) gamepadButtonList_like
and _dOMPointReadOnly
and ('a) dOMPointReadOnly_like
and dOMPointReadOnly = (_baseClass) dOMPointReadOnly_like
and ('a) _hTMLSpanElement
and ('a) hTMLSpanElement_like = (('a) _hTMLSpanElement) hTMLElement_like
and hTMLSpanElement = (_baseClass) hTMLSpanElement_like
and ('a) _hTMLFormElement
and ('a) hTMLFormElement_like = (('a) _hTMLFormElement) hTMLElement_like
and hTMLFormElement = (_baseClass) hTMLFormElement_like
and ('a) _mediaQueryListEvent
and ('a) mediaQueryListEvent_like = (('a) _mediaQueryListEvent) event_like
and mediaQueryListEvent = (_baseClass) mediaQueryListEvent_like
and ('a) _webGLBuffer
and ('a) webGLBuffer_like = (('a) _webGLBuffer) webGLObject_like
and webGLBuffer = (_baseClass) webGLBuffer_like
and ('a) _xMLDocument
and ('a) xMLDocument_like = (('a) _xMLDocument) document_like
and xMLDocument = (_baseClass) xMLDocument_like
and _client
and ('a) client_like
and client = (_baseClass) client_like
and _oESTextureFloatLinear
and ('a) oESTextureFloatLinear_like
and oESTextureFloatLinear = (_baseClass) oESTextureFloatLinear_like
and ('a) _cSSViewportRule
and ('a) cSSViewportRule_like = (('a) _cSSViewportRule) cSSRule_like
and cSSViewportRule = (_baseClass) cSSViewportRule_like
and _webGLShaderPrecisionFormat
and ('a) webGLShaderPrecisionFormat_like
and webGLShaderPrecisionFormat = (_baseClass) webGLShaderPrecisionFormat_like
and _response
and ('a) response_like
and response = (_baseClass) response_like
and _mediaError
and ('a) mediaError_like
and mediaError = (_baseClass) mediaError_like
and ('a) _extendableEvent
and ('a) extendableEvent_like = (('a) _extendableEvent) event_like
and extendableEvent = (_baseClass) extendableEvent_like
and ('a) _progressEvent
and ('a) progressEvent_like = (('a) _progressEvent) event_like
and progressEvent = (_baseClass) progressEvent_like
and ('a) _hTMLDataListElement
and ('a) hTMLDataListElement_like = (('a) _hTMLDataListElement) hTMLElement_like
and hTMLDataListElement = (_baseClass) hTMLDataListElement_like
and ('a) _webGLRenderbuffer
and ('a) webGLRenderbuffer_like = (('a) _webGLRenderbuffer) webGLObject_like
and webGLRenderbuffer = (_baseClass) webGLRenderbuffer_like
and ('a) _hTMLCanvasElement
and ('a) hTMLCanvasElement_like = (('a) _hTMLCanvasElement) hTMLElement_like
and hTMLCanvasElement = (_baseClass) hTMLCanvasElement_like
and _vRStageParameters
and ('a) vRStageParameters_like
and vRStageParameters = (_baseClass) vRStageParameters_like
and ('a) _hTMLTrackElement
and ('a) hTMLTrackElement_like = (('a) _hTMLTrackElement) hTMLElement_like
and hTMLTrackElement = (_baseClass) hTMLTrackElement_like
and ('a) _mouseEvent
and ('a) mouseEvent_like = (('a) _mouseEvent) uIEvent_like
and mouseEvent = (_baseClass) mouseEvent_like
and ('a) _hTMLTableRowElement
and ('a) hTMLTableRowElement_like = (('a) _hTMLTableRowElement) hTMLElement_like
and hTMLTableRowElement = (_baseClass) hTMLTableRowElement_like
and ('a) _bluetooth
and ('a) bluetooth_like = (('a) _bluetooth) eventTarget_like
and bluetooth = (_baseClass) bluetooth_like
and ('a) _hTMLDivElement
and ('a) hTMLDivElement_like = (('a) _hTMLDivElement) hTMLElement_like
and hTMLDivElement = (_baseClass) hTMLDivElement_like
and _abstractWorker
and ('a) abstractWorker_like
and abstractWorker = (_baseClass) abstractWorker_like
and ('a) _worker
and ('a) worker_like = (('a) _worker) eventTarget_like
and worker = (_baseClass) worker_like
and ('a) _transitionEvent
and ('a) transitionEvent_like = (('a) _transitionEvent) event_like
and transitionEvent = (_baseClass) transitionEvent_like
and _testWorklet
and ('a) testWorklet_like
and testWorklet = (_baseClass) testWorklet_like
and ('a) _mediaQueryList
and ('a) mediaQueryList_like = (('a) _mediaQueryList) eventTarget_like
and mediaQueryList = (_baseClass) mediaQueryList_like
and _cSSRule
and ('a) cSSRule_like
and cSSRule = (_baseClass) cSSRule_like
and ('a) _xMLHttpRequestEventTarget
and ('a) xMLHttpRequestEventTarget_like = (('a) _xMLHttpRequestEventTarget) eventTarget_like
and xMLHttpRequestEventTarget = (_baseClass) xMLHttpRequestEventTarget_like
and ('a) _cSSKeyframesRule
and ('a) cSSKeyframesRule_like = (('a) _cSSKeyframesRule) cSSRule_like
and cSSKeyframesRule = (_baseClass) cSSKeyframesRule_like
and ('a) _hTMLAppletElement
and ('a) hTMLAppletElement_like = (('a) _hTMLAppletElement) hTMLElement_like
and hTMLAppletElement = (_baseClass) hTMLAppletElement_like
and ('a) _hTMLTableDataCellElement
and ('a) hTMLTableDataCellElement_like = (('a) _hTMLTableDataCellElement) hTMLTableCellElement_like
and hTMLTableDataCellElement = (_baseClass) hTMLTableDataCellElement_like
and _bluetoothUUID
and ('a) bluetoothUUID_like
and bluetoothUUID = (_baseClass) bluetoothUUID_like
and ('a) _hTMLDialogElement
and ('a) hTMLDialogElement_like = (('a) _hTMLDialogElement) hTMLElement_like
and hTMLDialogElement = (_baseClass) hTMLDialogElement_like
and _canvasRenderingContext2D
and ('a) canvasRenderingContext2D_like
and canvasRenderingContext2D = (_baseClass) canvasRenderingContext2D_like
and _canvasState
and ('a) canvasState_like
and canvasState = (_baseClass) canvasState_like
and _canvasTransform
and ('a) canvasTransform_like
and canvasTransform = (_baseClass) canvasTransform_like
and _canvasCompositing
and ('a) canvasCompositing_like
and canvasCompositing = (_baseClass) canvasCompositing_like
and _canvasImageSmoothing
and ('a) canvasImageSmoothing_like
and canvasImageSmoothing = (_baseClass) canvasImageSmoothing_like
and _canvasFillStrokeStyles
and ('a) canvasFillStrokeStyles_like
and canvasFillStrokeStyles = (_baseClass) canvasFillStrokeStyles_like
and _canvasShadowStyles
and ('a) canvasShadowStyles_like
and canvasShadowStyles = (_baseClass) canvasShadowStyles_like
and _canvasRect
and ('a) canvasRect_like
and canvasRect = (_baseClass) canvasRect_like
and _canvasDrawPath
and ('a) canvasDrawPath_like
and canvasDrawPath = (_baseClass) canvasDrawPath_like
and _canvasUserInterface
and ('a) canvasUserInterface_like
and canvasUserInterface = (_baseClass) canvasUserInterface_like
and _canvasText
and ('a) canvasText_like
and canvasText = (_baseClass) canvasText_like
and _canvasDrawImage
and ('a) canvasDrawImage_like
and canvasDrawImage = (_baseClass) canvasDrawImage_like
and _canvasHitRegion
and ('a) canvasHitRegion_like
and canvasHitRegion = (_baseClass) canvasHitRegion_like
and _canvasImageData
and ('a) canvasImageData_like
and canvasImageData = (_baseClass) canvasImageData_like
and _canvasPathDrawingStyles
and ('a) canvasPathDrawingStyles_like
and canvasPathDrawingStyles = (_baseClass) canvasPathDrawingStyles_like
and _canvasTextDrawingStyles
and ('a) canvasTextDrawingStyles_like
and canvasTextDrawingStyles = (_baseClass) canvasTextDrawingStyles_like
and _canvasPath
and ('a) canvasPath_like
and canvasPath = (_baseClass) canvasPath_like
and _mediaList
and ('a) mediaList_like
and mediaList = (_baseClass) mediaList_like
and _oESTextureFloat
and ('a) oESTextureFloat_like
and oESTextureFloat = (_baseClass) oESTextureFloat_like
and ('a) _bluetoothAdvertisingEvent
and ('a) bluetoothAdvertisingEvent_like = (('a) _bluetoothAdvertisingEvent) event_like
and bluetoothAdvertisingEvent = (_baseClass) bluetoothAdvertisingEvent_like
and _permissions
and ('a) permissions_like
and permissions = (_baseClass) permissions_like
and ('a) _hTMLFrameSetElement
and ('a) hTMLFrameSetElement_like = (('a) _hTMLFrameSetElement) hTMLElement_like
and hTMLFrameSetElement = (_baseClass) hTMLFrameSetElement_like
and ('a) _cSSNamespaceRule
and ('a) cSSNamespaceRule_like = (('a) _cSSNamespaceRule) cSSRule_like
and cSSNamespaceRule = (_baseClass) cSSNamespaceRule_like
and _canvasPattern
and ('a) canvasPattern_like
and canvasPattern = (_baseClass) canvasPattern_like
and ('a) _hTMLDetailsElement
and ('a) hTMLDetailsElement_like = (('a) _hTMLDetailsElement) hTMLElement_like
and hTMLDetailsElement = (_baseClass) hTMLDetailsElement_like
and _mutationRecord
and ('a) mutationRecord_like
and mutationRecord = (_baseClass) mutationRecord_like
and _storage
and ('a) storage_like
and storage = (_baseClass) storage_like
and ('a) _hashChangeEvent
and ('a) hashChangeEvent_like = (('a) _hashChangeEvent) event_like
and hashChangeEvent = (_baseClass) hashChangeEvent_like
and ('a) _element
and ('a) element_like = (('a) _element) node_like
and element = (_baseClass) element_like
and ('a) _testWorkletGlobalScope
and ('a) testWorkletGlobalScope_like = (('a) _testWorkletGlobalScope) workletGlobalScope_like
and testWorkletGlobalScope = (_baseClass) testWorkletGlobalScope_like
and ('a) _hTMLProgressElement
and ('a) hTMLProgressElement_like = (('a) _hTMLProgressElement) hTMLElement_like
and hTMLProgressElement = (_baseClass) hTMLProgressElement_like
and ('a) _cSSGroupingRule
and ('a) cSSGroupingRule_like = (('a) _cSSGroupingRule) cSSRule_like
and cSSGroupingRule = (_baseClass) cSSGroupingRule_like
and _mutationObserver
and ('a) mutationObserver_like
and mutationObserver = (_baseClass) mutationObserver_like
and _testBindingIterable
and ('a) testBindingIterable_like
and testBindingIterable = (_baseClass) testBindingIterable_like
and ('a) _sVGElement
and ('a) sVGElement_like = (('a) _sVGElement) element_like
and sVGElement = (_baseClass) sVGElement_like
and ('a) _bluetoothRemoteGATTService
and ('a) bluetoothRemoteGATTService_like = (('a) _bluetoothRemoteGATTService) eventTarget_like
and bluetoothRemoteGATTService = (_baseClass) bluetoothRemoteGATTService_like
and _serviceEventHandlers
and ('a) serviceEventHandlers_like
and serviceEventHandlers = (_baseClass) serviceEventHandlers_like
and ('a) _focusEvent
and ('a) focusEvent_like = (('a) _focusEvent) uIEvent_like
and focusEvent = (_baseClass) focusEvent_like
and _textEncoder
and ('a) textEncoder_like
and textEncoder = (_baseClass) textEncoder_like
and ('a) _webGLTexture
and ('a) webGLTexture_like = (('a) _webGLTexture) webGLObject_like
and webGLTexture = (_baseClass) webGLTexture_like
and _event
and ('a) event_like
and event = (_baseClass) event_like
and _validityState
and ('a) validityState_like
and validityState = (_baseClass) validityState_like
and ('a) _hTMLFontElement
and ('a) hTMLFontElement_like = (('a) _hTMLFontElement) hTMLElement_like
and hTMLFontElement = (_baseClass) hTMLFontElement_like
and ('a) _window
and ('a) window_like = (('a) _window) globalScope_like
and window = (_baseClass) window_like
and _windowProxy
and ('a) windowProxy_like
and windowProxy = (_baseClass) windowProxy_like
and _windowTimers
and ('a) windowTimers_like
and windowTimers = (_baseClass) windowTimers_like
and _windowBase64
and ('a) windowBase64_like
and windowBase64 = (_baseClass) windowBase64_like
and _windowSessionStorage
and ('a) windowSessionStorage_like
and windowSessionStorage = (_baseClass) windowSessionStorage_like
and _windowLocalStorage
and ('a) windowLocalStorage_like
and windowLocalStorage = (_baseClass) windowLocalStorage_like
and _dOMStringMap
and ('a) dOMStringMap_like
and dOMStringMap = (_baseClass) dOMStringMap_like
and ('a) _workerGlobalScope
and ('a) workerGlobalScope_like = (('a) _workerGlobalScope) globalScope_like
and workerGlobalScope = (_baseClass) workerGlobalScope_like
and _globalEventHandlers
and ('a) globalEventHandlers_like
and globalEventHandlers = (_baseClass) globalEventHandlers_like
and _windowEventHandlers
and ('a) windowEventHandlers_like
and windowEventHandlers = (_baseClass) windowEventHandlers_like
and _documentAndElementEventHandlers
and ('a) documentAndElementEventHandlers_like
and documentAndElementEventHandlers = (_baseClass) documentAndElementEventHandlers_like
and _blob
and ('a) blob_like
and blob = (_baseClass) blob_like
and ('a) _fileReader
and ('a) fileReader_like = (('a) _fileReader) eventTarget_like
and fileReader = (_baseClass) fileReader_like
and ('a) _cSSStyleSheet
and ('a) cSSStyleSheet_like = (('a) _cSSStyleSheet) styleSheet_like
and cSSStyleSheet = (_baseClass) cSSStyleSheet_like
and ('a) _hTMLTableCellElement
and ('a) hTMLTableCellElement_like = (('a) _hTMLTableCellElement) hTMLElement_like
and hTMLTableCellElement = (_baseClass) hTMLTableCellElement_like
and _vRFrameData
and ('a) vRFrameData_like
and vRFrameData = (_baseClass) vRFrameData_like
and ('a) _hTMLTableElement
and ('a) hTMLTableElement_like = (('a) _hTMLTableElement) hTMLElement_like
and hTMLTableElement = (_baseClass) hTMLTableElement_like
and ('a) _hTMLHeadingElement
and ('a) hTMLHeadingElement_like = (('a) _hTMLHeadingElement) hTMLElement_like
and hTMLHeadingElement = (_baseClass) hTMLHeadingElement_like
and ('a) _workletGlobalScope
and ('a) workletGlobalScope_like = (('a) _workletGlobalScope) globalScope_like
and workletGlobalScope = (_baseClass) workletGlobalScope_like
and _servoParser
and ('a) servoParser_like
and servoParser = (_baseClass) servoParser_like
and _attr
and ('a) attr_like
and attr = (_baseClass) attr_like
and ('a) _text
and ('a) text_like = (('a) _text) characterData_like
and text = (_baseClass) text_like
and _activatableElement
and ('a) activatableElement_like
and activatableElement = (_baseClass) activatableElement_like
and _styleSheetList
and ('a) styleSheetList_like
and styleSheetList = (_baseClass) styleSheetList_like
and _eventSourceInit
and ('a) eventSourceInit_like
and eventSourceInit = (_baseClass) eventSourceInit_like
and _elementDefinitionOptions
and ('a) elementDefinitionOptions_like
and elementDefinitionOptions = (_baseClass) elementDefinitionOptions_like
and ('a) _uIEventInit
and ('a) uIEventInit_like = (('a) _uIEventInit) eventInit_like
and uIEventInit = (_baseClass) uIEventInit_like
and ('a) _gamepadEventInit
and ('a) gamepadEventInit_like = (('a) _gamepadEventInit) eventInit_like
and gamepadEventInit = (_baseClass) gamepadEventInit_like
and _dOMMatrixInit
and ('a) dOMMatrixInit_like
and dOMMatrixInit = (_baseClass) dOMMatrixInit_like
and _vRLayer
and ('a) vRLayer_like
and vRLayer = (_baseClass) vRLayer_like
and _iterableKeyOrValueResult
and ('a) iterableKeyOrValueResult_like
and iterableKeyOrValueResult = (_baseClass) iterableKeyOrValueResult_like
and _iterableKeyAndValueResult
and ('a) iterableKeyAndValueResult_like
and iterableKeyAndValueResult = (_baseClass) iterableKeyAndValueResult_like
and _registrationOptions
and ('a) registrationOptions_like
and registrationOptions = (_baseClass) registrationOptions_like
and ('a) _bluetoothPermissionDescriptor
and ('a) bluetoothPermissionDescriptor_like = (('a) _bluetoothPermissionDescriptor) permissionDescriptor_like
and bluetoothPermissionDescriptor = (_baseClass) bluetoothPermissionDescriptor_like
and ('a) _errorEventInit
and ('a) errorEventInit_like = (('a) _errorEventInit) eventInit_like
and errorEventInit = (_baseClass) errorEventInit_like
and _permissionDescriptor
and ('a) permissionDescriptor_like
and permissionDescriptor = (_baseClass) permissionDescriptor_like
and ('a) _pushPermissionDescriptor
and ('a) pushPermissionDescriptor_like = (('a) _pushPermissionDescriptor) permissionDescriptor_like
and pushPermissionDescriptor = (_baseClass) pushPermissionDescriptor_like
and ('a) _midiPermissionDescriptor
and ('a) midiPermissionDescriptor_like = (('a) _midiPermissionDescriptor) permissionDescriptor_like
and midiPermissionDescriptor = (_baseClass) midiPermissionDescriptor_like
and ('a) _devicePermissionDescriptor
and ('a) devicePermissionDescriptor_like = (('a) _devicePermissionDescriptor) permissionDescriptor_like
and devicePermissionDescriptor = (_baseClass) devicePermissionDescriptor_like
and ('a) _messageEventInit
and ('a) messageEventInit_like = (('a) _messageEventInit) eventInit_like
and messageEventInit = (_baseClass) messageEventInit_like
and ('a) _keyboardEventInit
and ('a) keyboardEventInit_like = (('a) _keyboardEventInit) eventModifierInit_like
and keyboardEventInit = (_baseClass) keyboardEventInit_like
and _webGLContextAttributes
and ('a) webGLContextAttributes_like
and webGLContextAttributes = (_baseClass) webGLContextAttributes_like
and _dOMRectInit
and ('a) dOMRectInit_like
and dOMRectInit = (_baseClass) dOMRectInit_like
and _browserElementSecurityChangeDetail
and ('a) browserElementSecurityChangeDetail_like
and browserElementSecurityChangeDetail = (_baseClass) browserElementSecurityChangeDetail_like
and _browserElementErrorEventDetail
and ('a) browserElementErrorEventDetail_like
and browserElementErrorEventDetail = (_baseClass) browserElementErrorEventDetail_like
and _browserElementLocationChangeEventDetail
and ('a) browserElementLocationChangeEventDetail_like
and browserElementLocationChangeEventDetail = (_baseClass) browserElementLocationChangeEventDetail_like
and _browserElementIconChangeEventDetail
and ('a) browserElementIconChangeEventDetail_like
and browserElementIconChangeEventDetail = (_baseClass) browserElementIconChangeEventDetail_like
and _browserShowModalPromptEventDetail
and ('a) browserShowModalPromptEventDetail_like
and browserShowModalPromptEventDetail = (_baseClass) browserShowModalPromptEventDetail_like
and _browserElementOpenTabEventDetail
and ('a) browserElementOpenTabEventDetail_like
and browserElementOpenTabEventDetail = (_baseClass) browserElementOpenTabEventDetail_like
and _browserElementOpenWindowEventDetail
and ('a) browserElementOpenWindowEventDetail_like
and browserElementOpenWindowEventDetail = (_baseClass) browserElementOpenWindowEventDetail_like
and _browserElementVisibilityChangeEventDetail
and ('a) browserElementVisibilityChangeEventDetail_like
and browserElementVisibilityChangeEventDetail = (_baseClass) browserElementVisibilityChangeEventDetail_like
and ('a) _filePropertyBag
and ('a) filePropertyBag_like = (('a) _filePropertyBag) blobPropertyBag_like
and filePropertyBag = (_baseClass) filePropertyBag_like
and ('a) _extendableMessageEventInit
and ('a) extendableMessageEventInit_like = (('a) _extendableMessageEventInit) extendableEventInit_like
and extendableMessageEventInit = (_baseClass) extendableMessageEventInit_like
and ('a) _storageEventInit
and ('a) storageEventInit_like = (('a) _storageEventInit) eventInit_like
and storageEventInit = (_baseClass) storageEventInit_like
and ('a) _vRDisplayEventInit
and ('a) vRDisplayEventInit_like = (('a) _vRDisplayEventInit) eventInit_like
and vRDisplayEventInit = (_baseClass) vRDisplayEventInit_like
and ('a) _popStateEventInit
and ('a) popStateEventInit_like = (('a) _popStateEventInit) eventInit_like
and popStateEventInit = (_baseClass) popStateEventInit_like
and _testDictionary
and ('a) testDictionary_like
and testDictionary = (_baseClass) testDictionary_like
and _testDictionaryDefaults
and ('a) testDictionaryDefaults_like
and testDictionaryDefaults = (_baseClass) testDictionaryDefaults_like
and ('a) _webGLContextEventInit
and ('a) webGLContextEventInit_like = (('a) _webGLContextEventInit) eventInit_like
and webGLContextEventInit = (_baseClass) webGLContextEventInit_like
and _textDecoderOptions
and ('a) textDecoderOptions_like
and textDecoderOptions = (_baseClass) textDecoderOptions_like
and _workletOptions
and ('a) workletOptions_like
and workletOptions = (_baseClass) workletOptions_like
and ('a) _customEventInit
and ('a) customEventInit_like = (('a) _customEventInit) eventInit_like
and customEventInit = (_baseClass) customEventInit_like
and _dOMPointInit
and ('a) dOMPointInit_like
and dOMPointInit = (_baseClass) dOMPointInit_like
and ('a) _pageTransitionEventInit
and ('a) pageTransitionEventInit_like = (('a) _pageTransitionEventInit) eventInit_like
and pageTransitionEventInit = (_baseClass) pageTransitionEventInit_like
and _dOMQuadInit
and ('a) dOMQuadInit_like
and dOMQuadInit = (_baseClass) dOMQuadInit_like
and _requestInit
and ('a) requestInit_like
and requestInit = (_baseClass) requestInit_like
and _elementCreationOptions
and ('a) elementCreationOptions_like
and elementCreationOptions = (_baseClass) elementCreationOptions_like
and ('a) _closeEventInit
and ('a) closeEventInit_like = (('a) _closeEventInit) eventInit_like
and closeEventInit = (_baseClass) closeEventInit_like
and ('a) _mediaQueryListEventInit
and ('a) mediaQueryListEventInit_like = (('a) _mediaQueryListEventInit) eventInit_like
and mediaQueryListEventInit = (_baseClass) mediaQueryListEventInit_like
and _responseInit
and ('a) responseInit_like
and responseInit = (_baseClass) responseInit_like
and ('a) _extendableEventInit
and ('a) extendableEventInit_like = (('a) _extendableEventInit) eventInit_like
and extendableEventInit = (_baseClass) extendableEventInit_like
and ('a) _progressEventInit
and ('a) progressEventInit_like = (('a) _progressEventInit) eventInit_like
and progressEventInit = (_baseClass) progressEventInit_like
and ('a) _mouseEventInit
and ('a) mouseEventInit_like = (('a) _mouseEventInit) eventModifierInit_like
and mouseEventInit = (_baseClass) mouseEventInit_like
and _bluetoothDataFilterInit
and ('a) bluetoothDataFilterInit_like
and bluetoothDataFilterInit = (_baseClass) bluetoothDataFilterInit_like
and _bluetoothLEScanFilterInit
and ('a) bluetoothLEScanFilterInit_like
and bluetoothLEScanFilterInit = (_baseClass) bluetoothLEScanFilterInit_like
and _requestDeviceOptions
and ('a) requestDeviceOptions_like
and requestDeviceOptions = (_baseClass) requestDeviceOptions_like
and ('a) _transitionEventInit
and ('a) transitionEventInit_like = (('a) _transitionEventInit) eventInit_like
and transitionEventInit = (_baseClass) transitionEventInit_like
and ('a) _eventModifierInit
and ('a) eventModifierInit_like = (('a) _eventModifierInit) uIEventInit_like
and eventModifierInit = (_baseClass) eventModifierInit_like
and ('a) _bluetoothAdvertisingEventInit
and ('a) bluetoothAdvertisingEventInit_like = (('a) _bluetoothAdvertisingEventInit) eventInit_like
and bluetoothAdvertisingEventInit = (_baseClass) bluetoothAdvertisingEventInit_like
and ('a) _hashChangeEventInit
and ('a) hashChangeEventInit_like = (('a) _hashChangeEventInit) eventInit_like
and hashChangeEventInit = (_baseClass) hashChangeEventInit_like
and _mutationObserverInit
and ('a) mutationObserverInit_like
and mutationObserverInit = (_baseClass) mutationObserverInit_like
and ('a) _focusEventInit
and ('a) focusEventInit_like = (('a) _focusEventInit) uIEventInit_like
and focusEventInit = (_baseClass) focusEventInit_like
and _eventInit
and ('a) eventInit_like
and eventInit = (_baseClass) eventInit_like
and _scrollOptions
and ('a) scrollOptions_like
and scrollOptions = (_baseClass) scrollOptions_like
and ('a) _scrollToOptions
and ('a) scrollToOptions_like = (('a) _scrollToOptions) scrollOptions_like
and scrollToOptions = (_baseClass) scrollToOptions_like
and _blobPropertyBag
and ('a) blobPropertyBag_like
and blobPropertyBag = (_baseClass) blobPropertyBag_like
and _nodeFilter
and ('a) nodeFilter_like
and nodeFilter = (_baseClass) nodeFilter_like
and _eventListener
and ('a) eventListener_like
and eventListener = (_baseClass) eventListener_like

(* modules *)
 module Console = struct
    
    
    external assert_ : console:(_) console_like -> condition:Js.boolean -> ?message:string Js.undefined -> unit = "assert" [@@bs.send] 
    external debug : console:(_) console_like -> ((_) console_like, unit, (string)) variadic_func = "debug" [@@bs.get]
    external error : console:(_) console_like -> ((_) console_like, unit, (string)) variadic_func = "error" [@@bs.get]
    external info : console:(_) console_like -> ((_) console_like, unit, (string)) variadic_func = "info" [@@bs.get]
    external log : console:(_) console_like -> ((_) console_like, unit, (string)) variadic_func = "log" [@@bs.get]
    external time : console:(_) console_like -> message:string -> unit = "time" [@@bs.send] 
    external timeEnd : console:(_) console_like -> message:string -> unit = "timeEnd" [@@bs.send] 
    external warn : console:(_) console_like -> ((_) console_like, unit, (string)) variadic_func = "warn" [@@bs.get]
    
    let assert_ ~console ~condition ?message () =
      let conv_message = Js_undefined.from_opt in
      let message = conv_message message in
      assert_ ~console ~condition ~message
    
    let debug ~console ~messages =
      let func = debug console in
      let args = to_arg messages in
      apply func console args
    
    let error ~console ~messages =
      let func = error console in
      let args = to_arg messages in
      apply func console args
    
    let info ~console ~messages =
      let func = info console in
      let args = to_arg messages in
      apply func console args
    
    let log ~console ~messages =
      let func = log console in
      let args = to_arg messages in
      apply func console args
    
    let warn ~console ~messages =
      let func = warn console in
      let args = to_arg messages in
      apply func console args
    
end
 module Performance = struct
    
    
    external timing : performance:(_) performance_like -> performanceTiming = "timing" [@@bs.get] 
    external now : performance:(_) performance_like -> float = "now" [@@bs.send] 
    
    
end
 module CustomElementRegistry = struct
    
    
    external define : customElementRegistry:(_) customElementRegistry_like -> name:string -> constructor_:('a1 -> 'a2 [@bs]) -> ?options:(_) elementDefinitionOptions_like Js.undefined -> unit = "define" [@@bs.send] 
    external get : customElementRegistry:(_) customElementRegistry_like -> name:string -> 'a3 = "get" [@@bs.send] 
    external whenDefined : customElementRegistry:(_) customElementRegistry_like -> name:string -> unit Js.Promise.t = "whenDefined" [@@bs.send] 
    
    let define ~customElementRegistry ~name ~constructor_ ?options () =
      let conv_options = Js_undefined.from_opt in
      let options = conv_options options in
      define ~customElementRegistry ~name ~constructor_ ~options
    
end
 module GamepadList = struct
    
    
    external length : gamepadList:(_) gamepadList_like -> int = "length" [@@bs.get] 
    external item : gamepadList:(_) gamepadList_like -> index:int -> gamepad option = "item" [@@bs.send] [@@bs.return null_to_opt]
    
    
end
 module URLSearchParams = struct
    
    
    external append : uRLSearchParams:(_) uRLSearchParams_like -> name:string -> value:string -> unit = "append" [@@bs.send] 
    external delete : uRLSearchParams:(_) uRLSearchParams_like -> name:string -> unit = "delete" [@@bs.send] 
    external get : uRLSearchParams:(_) uRLSearchParams_like -> name:string -> string option = "get" [@@bs.send] [@@bs.return null_to_opt]
    external getAll : uRLSearchParams:(_) uRLSearchParams_like -> name:string -> string array = "getAll" [@@bs.send] 
    external has : uRLSearchParams:(_) uRLSearchParams_like -> name:string -> bool = "has" [@@bs.send] 
    external set : uRLSearchParams:(_) uRLSearchParams_like -> name:string -> value:string -> unit = "set" [@@bs.send] 
    external toString : uRLSearchParams:(_) uRLSearchParams_like -> string = "toString" [@@bs.send] 
    
    
end
 module GamepadButton = struct
    
    
    external pressed : gamepadButton:(_) gamepadButton_like -> bool = "pressed" [@@bs.get] 
    external touched : gamepadButton:(_) gamepadButton_like -> bool = "touched" [@@bs.get] 
    external value : gamepadButton:(_) gamepadButton_like -> float = "value" [@@bs.get] 
    
    
end
 module ElementContentEditable = struct
    
    
    
    
    
end
 module MimeTypeArray = struct
    
    
    external length : mimeTypeArray:(_) mimeTypeArray_like -> int = "length" [@@bs.get] 
    external item : mimeTypeArray:(_) mimeTypeArray_like -> index:int -> mimeType option = "item" [@@bs.send] [@@bs.return null_to_opt]
    external namedItem : mimeTypeArray:(_) mimeTypeArray_like -> name:string -> mimeType option = "namedItem" [@@bs.send] [@@bs.return null_to_opt]
    
    
end
 module FormData = struct
    
    
    external append : formData:(_) formData_like -> name:string -> value:(_) blob_like -> ?filename:string Js.undefined -> unit = "append" [@@bs.send] 
    external delete : formData:(_) formData_like -> name:string -> unit = "delete" [@@bs.send] 
    external get : formData:(_) formData_like -> name:string -> 'a4 option = "get" [@@bs.send] [@@bs.return null_to_opt]
    external getAll : formData:(_) formData_like -> name:string -> 'a5 array = "getAll" [@@bs.send] 
    external has : formData:(_) formData_like -> name:string -> bool = "has" [@@bs.send] 
    external set : formData:(_) formData_like -> name:string -> value:(_) blob_like -> ?filename:string Js.undefined -> unit = "set" [@@bs.send] 
    
    let append ~formData ~name ~value ?filename () =
      let conv_filename = Js_undefined.from_opt in
      let filename = conv_filename filename in
      append ~formData ~name ~value ~filename
    
    let set ~formData ~name ~value ?filename () =
      let conv_filename = Js_undefined.from_opt in
      let filename = conv_filename filename in
      set ~formData ~name ~value ~filename
    
end
 module TreeWalker = struct
    
    
    external root : treeWalker:(_) treeWalker_like -> node = "root" [@@bs.get] 
    external whatToShow : treeWalker:(_) treeWalker_like -> int = "whatToShow" [@@bs.get] 
    external filter : treeWalker:(_) treeWalker_like -> nodeFilter option = "filter" [@@bs.get] [@@bs.return null_to_opt]
    external currentNode : treeWalker:(_) treeWalker_like -> node = "currentNode" [@@bs.get] 
    external setCurrentNode : treeWalker:(_) treeWalker_like -> currentNode:node -> unit = "currentNode" [@@bs.set]
    external firstChild : treeWalker:(_) treeWalker_like -> node option = "firstChild" [@@bs.send] [@@bs.return null_to_opt]
    external lastChild : treeWalker:(_) treeWalker_like -> node option = "lastChild" [@@bs.send] [@@bs.return null_to_opt]
    external nextNode : treeWalker:(_) treeWalker_like -> node option = "nextNode" [@@bs.send] [@@bs.return null_to_opt]
    external nextSibling : treeWalker:(_) treeWalker_like -> node option = "nextSibling" [@@bs.send] [@@bs.return null_to_opt]
    external parentNode : treeWalker:(_) treeWalker_like -> node option = "parentNode" [@@bs.send] [@@bs.return null_to_opt]
    external previousNode : treeWalker:(_) treeWalker_like -> node option = "previousNode" [@@bs.send] [@@bs.return null_to_opt]
    external previousSibling : treeWalker:(_) treeWalker_like -> node option = "previousSibling" [@@bs.send] [@@bs.return null_to_opt]
    
    
end
 module DOMMatrixReadOnly = struct
    
    
    external a : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "a" [@@bs.get] 
    external b : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "b" [@@bs.get] 
    external c : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "c" [@@bs.get] 
    external d : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "d" [@@bs.get] 
    external e : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "e" [@@bs.get] 
    external f : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "f" [@@bs.get] 
    external m11 : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "m11" [@@bs.get] 
    external m12 : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "m12" [@@bs.get] 
    external m13 : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "m13" [@@bs.get] 
    external m14 : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "m14" [@@bs.get] 
    external m21 : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "m21" [@@bs.get] 
    external m22 : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "m22" [@@bs.get] 
    external m23 : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "m23" [@@bs.get] 
    external m24 : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "m24" [@@bs.get] 
    external m31 : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "m31" [@@bs.get] 
    external m32 : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "m32" [@@bs.get] 
    external m33 : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "m33" [@@bs.get] 
    external m34 : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "m34" [@@bs.get] 
    external m41 : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "m41" [@@bs.get] 
    external m42 : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "m42" [@@bs.get] 
    external m43 : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "m43" [@@bs.get] 
    external m44 : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> float = "m44" [@@bs.get] 
    external is2D : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> bool = "is2D" [@@bs.get] 
    external isIdentity : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> bool = "isIdentity" [@@bs.get] 
    external flipX : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> dOMMatrix = "flipX" [@@bs.send] 
    external flipY : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> dOMMatrix = "flipY" [@@bs.send] 
    external fromMatrix : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> ?other:(_) dOMMatrixInit_like Js.undefined -> dOMMatrixReadOnly = "fromMatrix" [@@bs.send] 
    external inverse : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> dOMMatrix = "inverse" [@@bs.send] 
    external multiply : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> ?other:(_) dOMMatrixInit_like Js.undefined -> dOMMatrix = "multiply" [@@bs.send] 
    external rotate : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> ?rotX:float Js.undefined -> ?rotY:float Js.undefined -> ?rotZ:float Js.undefined -> dOMMatrix = "rotate" [@@bs.send] 
    external rotateAxisAngle : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> ?x:float Js.undefined -> ?y:float Js.undefined -> ?z:float Js.undefined -> ?angle:float Js.undefined -> dOMMatrix = "rotateAxisAngle" [@@bs.send] 
    external rotateFromVector : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> ?x:float Js.undefined -> ?y:float Js.undefined -> dOMMatrix = "rotateFromVector" [@@bs.send] 
    external scale : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> ?scaleX:float Js.undefined -> ?scaleY:float Js.undefined -> ?scaleZ:float Js.undefined -> ?originX:float Js.undefined -> ?originY:float Js.undefined -> ?originZ:float Js.undefined -> dOMMatrix = "scale" [@@bs.send] 
    external scale3d : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> ?scale:float Js.undefined -> ?originX:float Js.undefined -> ?originY:float Js.undefined -> ?originZ:float Js.undefined -> dOMMatrix = "scale3d" [@@bs.send] 
    external skewX : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> ?sx:float Js.undefined -> dOMMatrix = "skewX" [@@bs.send] 
    external skewY : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> ?sy:float Js.undefined -> dOMMatrix = "skewY" [@@bs.send] 
    external transformPoint : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> ?point:(_) dOMPointInit_like Js.undefined -> dOMPoint = "transformPoint" [@@bs.send] 
    external translate : dOMMatrixReadOnly:(_) dOMMatrixReadOnly_like -> ?tx:float Js.undefined -> ?ty:float Js.undefined -> ?tz:float Js.undefined -> dOMMatrix = "translate" [@@bs.send] 
    
    let fromMatrix ~dOMMatrixReadOnly ?other () =
      let conv_other = Js_undefined.from_opt in
      let other = conv_other other in
      fromMatrix ~dOMMatrixReadOnly ~other
    
    let multiply ~dOMMatrixReadOnly ?other () =
      let conv_other = Js_undefined.from_opt in
      let other = conv_other other in
      multiply ~dOMMatrixReadOnly ~other
    
    let rotate ~dOMMatrixReadOnly ?rotX ?rotY ?rotZ () =
      let conv_rotX = Js_undefined.from_opt in
      let rotX = conv_rotX rotX in
      let conv_rotY = Js_undefined.from_opt in
      let rotY = conv_rotY rotY in
      let conv_rotZ = Js_undefined.from_opt in
      let rotZ = conv_rotZ rotZ in
      rotate ~dOMMatrixReadOnly ~rotX ~rotY ~rotZ
    
    let rotateAxisAngle ~dOMMatrixReadOnly ?x ?y ?z ?angle () =
      let conv_x = Js_undefined.from_opt in
      let x = conv_x x in
      let conv_y = Js_undefined.from_opt in
      let y = conv_y y in
      let conv_z = Js_undefined.from_opt in
      let z = conv_z z in
      let conv_angle = Js_undefined.from_opt in
      let angle = conv_angle angle in
      rotateAxisAngle ~dOMMatrixReadOnly ~x ~y ~z ~angle
    
    let rotateFromVector ~dOMMatrixReadOnly ?x ?y () =
      let conv_x = Js_undefined.from_opt in
      let x = conv_x x in
      let conv_y = Js_undefined.from_opt in
      let y = conv_y y in
      rotateFromVector ~dOMMatrixReadOnly ~x ~y
    
    let scale ~dOMMatrixReadOnly ?scaleX ?scaleY ?scaleZ ?originX ?originY ?originZ () =
      let conv_scaleX = Js_undefined.from_opt in
      let scaleX = conv_scaleX scaleX in
      let conv_scaleY = Js_undefined.from_opt in
      let scaleY = conv_scaleY scaleY in
      let conv_scaleZ = Js_undefined.from_opt in
      let scaleZ = conv_scaleZ scaleZ in
      let conv_originX = Js_undefined.from_opt in
      let originX = conv_originX originX in
      let conv_originY = Js_undefined.from_opt in
      let originY = conv_originY originY in
      let conv_originZ = Js_undefined.from_opt in
      let originZ = conv_originZ originZ in
      scale ~dOMMatrixReadOnly ~scaleX ~scaleY ~scaleZ ~originX ~originY ~originZ
    
    let scale3d ~dOMMatrixReadOnly ?scale ?originX ?originY ?originZ () =
      let conv_scale = Js_undefined.from_opt in
      let scale = conv_scale scale in
      let conv_originX = Js_undefined.from_opt in
      let originX = conv_originX originX in
      let conv_originY = Js_undefined.from_opt in
      let originY = conv_originY originY in
      let conv_originZ = Js_undefined.from_opt in
      let originZ = conv_originZ originZ in
      scale3d ~dOMMatrixReadOnly ~scale ~originX ~originY ~originZ
    
    let skewX ~dOMMatrixReadOnly ?sx () =
      let conv_sx = Js_undefined.from_opt in
      let sx = conv_sx sx in
      skewX ~dOMMatrixReadOnly ~sx
    
    let skewY ~dOMMatrixReadOnly ?sy () =
      let conv_sy = Js_undefined.from_opt in
      let sy = conv_sy sy in
      skewY ~dOMMatrixReadOnly ~sy
    
    let transformPoint ~dOMMatrixReadOnly ?point () =
      let conv_point = Js_undefined.from_opt in
      let point = conv_point point in
      transformPoint ~dOMMatrixReadOnly ~point
    
    let translate ~dOMMatrixReadOnly ?tx ?ty ?tz () =
      let conv_tx = Js_undefined.from_opt in
      let tx = conv_tx tx in
      let conv_ty = Js_undefined.from_opt in
      let ty = conv_ty ty in
      let conv_tz = Js_undefined.from_opt in
      let tz = conv_tz tz in
      translate ~dOMMatrixReadOnly ~tx ~ty ~tz
    
end
 module ParentNode = struct
    
    
    external children : parentNode:(_) parentNode_like -> hTMLCollection = "children" [@@bs.get] 
    external firstElementChild : parentNode:(_) parentNode_like -> element option = "firstElementChild" [@@bs.get] [@@bs.return null_to_opt]
    external lastElementChild : parentNode:(_) parentNode_like -> element option = "lastElementChild" [@@bs.get] [@@bs.return null_to_opt]
    external childElementCount : parentNode:(_) parentNode_like -> int = "childElementCount" [@@bs.get] 
    external append : parentNode:(_) parentNode_like -> ((_) parentNode_like, unit, ('a6)) variadic_func = "append" [@@bs.get]
    external prepend : parentNode:(_) parentNode_like -> ((_) parentNode_like, unit, ('a7)) variadic_func = "prepend" [@@bs.get]
    external querySelector : parentNode:(_) parentNode_like -> selectors:string -> element option = "querySelector" [@@bs.send] [@@bs.return null_to_opt]
    external querySelectorAll : parentNode:(_) parentNode_like -> selectors:string -> nodeList = "querySelectorAll" [@@bs.send] 
    
    let append ~parentNode ~nodes =
      let func = append parentNode in
      let args = to_arg nodes in
      apply func parentNode args
    
    let append ~parentNode ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = append ~parentNode ~nodes in
      return
    
    let prepend ~parentNode ~nodes =
      let func = prepend parentNode in
      let args = to_arg nodes in
      apply func parentNode args
    
    let prepend ~parentNode ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = prepend ~parentNode ~nodes in
      return
    
end
 module Range = struct
    
    
    external startContainer : range:(_) range_like -> node = "startContainer" [@@bs.get] 
    external startOffset : range:(_) range_like -> int = "startOffset" [@@bs.get] 
    external endContainer : range:(_) range_like -> node = "endContainer" [@@bs.get] 
    external endOffset : range:(_) range_like -> int = "endOffset" [@@bs.get] 
    external collapsed : range:(_) range_like -> bool = "collapsed" [@@bs.get] 
    external commonAncestorContainer : range:(_) range_like -> node = "commonAncestorContainer" [@@bs.get] 
    external cloneContents : range:(_) range_like -> documentFragment = "cloneContents" [@@bs.send] 
    external cloneRange : range:(_) range_like -> range = "cloneRange" [@@bs.send] 
    external collapse : range:(_) range_like -> ?toStart:Js.boolean Js.undefined -> unit = "collapse" [@@bs.send] 
    external compareBoundaryPoints : range:(_) range_like -> how:int -> sourceRange:(_) range_like -> int = "compareBoundaryPoints" [@@bs.send] 
    external comparePoint : range:(_) range_like -> node:(_) node_like -> offset:int -> int = "comparePoint" [@@bs.send] 
    external createContextualFragment : range:(_) range_like -> fragment:string -> documentFragment = "createContextualFragment" [@@bs.send] 
    external deleteContents : range:(_) range_like -> unit = "deleteContents" [@@bs.send] 
    external detach : range:(_) range_like -> unit = "detach" [@@bs.send] 
    external extractContents : range:(_) range_like -> documentFragment = "extractContents" [@@bs.send] 
    external insertNode : range:(_) range_like -> node:(_) node_like -> unit = "insertNode" [@@bs.send] 
    external intersectsNode : range:(_) range_like -> node:(_) node_like -> bool = "intersectsNode" [@@bs.send] 
    external isPointInRange : range:(_) range_like -> node:(_) node_like -> offset:int -> bool = "isPointInRange" [@@bs.send] 
    external selectNode : range:(_) range_like -> refNode:(_) node_like -> unit = "selectNode" [@@bs.send] 
    external selectNodeContents : range:(_) range_like -> refNode:(_) node_like -> unit = "selectNodeContents" [@@bs.send] 
    external setEnd : range:(_) range_like -> refNode:(_) node_like -> offset:int -> unit = "setEnd" [@@bs.send] 
    external setEndAfter : range:(_) range_like -> refNode:(_) node_like -> unit = "setEndAfter" [@@bs.send] 
    external setEndBefore : range:(_) range_like -> refNode:(_) node_like -> unit = "setEndBefore" [@@bs.send] 
    external setStart : range:(_) range_like -> refNode:(_) node_like -> offset:int -> unit = "setStart" [@@bs.send] 
    external setStartAfter : range:(_) range_like -> refNode:(_) node_like -> unit = "setStartAfter" [@@bs.send] 
    external setStartBefore : range:(_) range_like -> refNode:(_) node_like -> unit = "setStartBefore" [@@bs.send] 
    external surroundContents : range:(_) range_like -> newParent:(_) node_like -> unit = "surroundContents" [@@bs.send] 
    external toString : range:(_) range_like -> string = "toString" [@@bs.send] 
    
    let start_to_start  =
      
      0
    
    let start_to_end  =
      
      1
    
    let end_to_end  =
      
      2
    
    let end_to_start  =
      
      3
    
    let collapse ~range ?toStart () =
      let conv_toStart = Js_undefined.from_opt in
      let toStart = conv_toStart toStart in
      collapse ~range ~toStart
    
end
 module WindowOrWorkerGlobalScope = struct
    
    
    external fetch : windowOrWorkerGlobalScope:(_) windowOrWorkerGlobalScope_like -> input:'a8 -> ?init:(_) requestInit_like Js.undefined -> response Js.Promise.t = "fetch" [@@bs.send] 
    
    let fetch ~windowOrWorkerGlobalScope ~input ~init =
      let conv_input = function
        | `Request (x: (_) request_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let input = conv_input input in
      let return = fetch ~windowOrWorkerGlobalScope ~input ~init in
      return
    
    let fetch ~windowOrWorkerGlobalScope ~input ?init () =
      let conv_init = Js_undefined.from_opt in
      let init = conv_init init in
      fetch ~windowOrWorkerGlobalScope ~input ~init
    
end
 module VREyeParameters = struct
    
    
    external offset : vREyeParameters:(_) vREyeParameters_like -> Js_typed_array.Float32Array.t = "offset" [@@bs.get] 
    external fieldOfView : vREyeParameters:(_) vREyeParameters_like -> vRFieldOfView = "fieldOfView" [@@bs.get] 
    external renderWidth : vREyeParameters:(_) vREyeParameters_like -> int = "renderWidth" [@@bs.get] 
    external renderHeight : vREyeParameters:(_) vREyeParameters_like -> int = "renderHeight" [@@bs.get] 
    
    
end
 module WebGLUniformLocation = struct
    
    
    
    
    
end
 module OESTextureHalfFloat = struct
    
    
    
    
    let half_float_oes  =
      
      36193
    
end
 module OESVertexArrayObject = struct
    
    
    external bindVertexArrayOES : oESVertexArrayObject:(_) oESVertexArrayObject_like -> arrayObject:(_) webGLVertexArrayObjectOES_like Js.null -> unit = "bindVertexArrayOES" [@@bs.send] 
    external createVertexArrayOES : oESVertexArrayObject:(_) oESVertexArrayObject_like -> webGLVertexArrayObjectOES option = "createVertexArrayOES" [@@bs.send] [@@bs.return null_to_opt]
    external deleteVertexArrayOES : oESVertexArrayObject:(_) oESVertexArrayObject_like -> arrayObject:(_) webGLVertexArrayObjectOES_like Js.null -> unit = "deleteVertexArrayOES" [@@bs.send] 
    external isVertexArrayOES : oESVertexArrayObject:(_) oESVertexArrayObject_like -> arrayObject:(_) webGLVertexArrayObjectOES_like Js.null -> bool = "isVertexArrayOES" [@@bs.send] 
    
    let vertex_array_binding_oes  =
      
      34229
    
end
 module TestRunner = struct
    
    
    external setBluetoothMockDataSet : testRunner:(_) testRunner_like -> dataSetName:string -> unit = "setBluetoothMockDataSet" [@@bs.send] 
    
    
end
 module EventTarget = struct
    
    
    external addEventListener : eventTarget:(_) eventTarget_like -> type_:string -> listener:(_) eventListener_like Js.null -> ?capture:Js.boolean Js.undefined -> unit = "addEventListener" [@@bs.send] 
    external dispatchEvent : eventTarget:(_) eventTarget_like -> event:(_) event_like -> bool = "dispatchEvent" [@@bs.send] 
    external removeEventListener : eventTarget:(_) eventTarget_like -> type_:string -> listener:(_) eventListener_like Js.null -> ?capture:Js.boolean Js.undefined -> unit = "removeEventListener" [@@bs.send] 
    
    let addEventListener ~eventTarget ~type_ ~listener ?capture () =
      let conv_capture = Js_undefined.from_opt in
      let capture = conv_capture capture in
      addEventListener ~eventTarget ~type_ ~listener ~capture
    
    let removeEventListener ~eventTarget ~type_ ~listener ?capture () =
      let conv_capture = Js_undefined.from_opt in
      let capture = conv_capture capture in
      removeEventListener ~eventTarget ~type_ ~listener ~capture
    
end
 module NodeIterator = struct
    
    
    external root : nodeIterator:(_) nodeIterator_like -> node = "root" [@@bs.get] 
    external referenceNode : nodeIterator:(_) nodeIterator_like -> node = "referenceNode" [@@bs.get] 
    external pointerBeforeReferenceNode : nodeIterator:(_) nodeIterator_like -> bool = "pointerBeforeReferenceNode" [@@bs.get] 
    external whatToShow : nodeIterator:(_) nodeIterator_like -> int = "whatToShow" [@@bs.get] 
    external filter : nodeIterator:(_) nodeIterator_like -> nodeFilter option = "filter" [@@bs.get] [@@bs.return null_to_opt]
    external detach : nodeIterator:(_) nodeIterator_like -> unit = "detach" [@@bs.send] 
    external nextNode : nodeIterator:(_) nodeIterator_like -> node option = "nextNode" [@@bs.send] [@@bs.return null_to_opt]
    external previousNode : nodeIterator:(_) nodeIterator_like -> node option = "previousNode" [@@bs.send] [@@bs.return null_to_opt]
    
    
end
 module BluetoothRemoteGATTServer = struct
    
    
    external device : bluetoothRemoteGATTServer:(_) bluetoothRemoteGATTServer_like -> bluetoothDevice = "device" [@@bs.get] 
    external connected : bluetoothRemoteGATTServer:(_) bluetoothRemoteGATTServer_like -> bool = "connected" [@@bs.get] 
    external connect : bluetoothRemoteGATTServer:(_) bluetoothRemoteGATTServer_like -> bluetoothRemoteGATTServer Js.Promise.t = "connect" [@@bs.send] 
    external disconnect : bluetoothRemoteGATTServer:(_) bluetoothRemoteGATTServer_like -> unit = "disconnect" [@@bs.send] 
    external getPrimaryService : bluetoothRemoteGATTServer:(_) bluetoothRemoteGATTServer_like -> service:'a9 -> bluetoothRemoteGATTService Js.Promise.t = "getPrimaryService" [@@bs.send] 
    external getPrimaryServices : bluetoothRemoteGATTServer:(_) bluetoothRemoteGATTServer_like -> ?service:'a10 Js.undefined -> bluetoothRemoteGATTService array Js.Promise.t = "getPrimaryServices" [@@bs.send] 
    
    let getPrimaryService ~bluetoothRemoteGATTServer ~service =
      let conv_service = function
        | `String (x: string) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let service = conv_service service in
      let return = getPrimaryService ~bluetoothRemoteGATTServer ~service in
      return
    
    let getPrimaryServices ~bluetoothRemoteGATTServer ~service =
      let conv_service = function
        | `String (x: string) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let conv_service = access_undef conv_service in
      let service = conv_service service in
      let return = getPrimaryServices ~bluetoothRemoteGATTServer ~service in
      return
    
    let getPrimaryServices ~bluetoothRemoteGATTServer ?service () =
      let conv_service = Js_undefined.from_opt in
      let service = conv_service service in
      getPrimaryServices ~bluetoothRemoteGATTServer ~service
    
end
 module WebGLRenderingContextBase = struct
    
    
    external canvas : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> hTMLCanvasElement = "canvas" [@@bs.get] 
    external drawingBufferWidth : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> int = "drawingBufferWidth" [@@bs.get] 
    external drawingBufferHeight : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> int = "drawingBufferHeight" [@@bs.get] 
    external activeTexture : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> texture:int -> unit = "activeTexture" [@@bs.send] 
    external attachShader : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> program:(_) webGLProgram_like Js.null -> shader:(_) webGLShader_like Js.null -> unit = "attachShader" [@@bs.send] 
    external bindAttribLocation : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> program:(_) webGLProgram_like Js.null -> index:int -> name:string -> unit = "bindAttribLocation" [@@bs.send] 
    external bindBuffer : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> buffer:(_) webGLBuffer_like Js.null -> unit = "bindBuffer" [@@bs.send] 
    external bindFramebuffer : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> framebuffer:(_) webGLFramebuffer_like Js.null -> unit = "bindFramebuffer" [@@bs.send] 
    external bindRenderbuffer : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> renderbuffer:(_) webGLRenderbuffer_like Js.null -> unit = "bindRenderbuffer" [@@bs.send] 
    external bindTexture : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> texture:(_) webGLTexture_like Js.null -> unit = "bindTexture" [@@bs.send] 
    external blendColor : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> red:float -> green:float -> blue:float -> alpha:float -> unit = "blendColor" [@@bs.send] 
    external blendEquation : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> mode:int -> unit = "blendEquation" [@@bs.send] 
    external blendEquationSeparate : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> modeRGB:int -> modeAlpha:int -> unit = "blendEquationSeparate" [@@bs.send] 
    external blendFunc : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> sfactor:int -> dfactor:int -> unit = "blendFunc" [@@bs.send] 
    external blendFuncSeparate : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> srcRGB:int -> dstRGB:int -> srcAlpha:int -> dstAlpha:int -> unit = "blendFuncSeparate" [@@bs.send] 
    external bufferData : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> data:'a11 -> usage:int -> unit = "bufferData" [@@bs.send] 
    external bufferSubData : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> offset:int -> data:'a12 Js.null -> unit = "bufferSubData" [@@bs.send] 
    external checkFramebufferStatus : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> int = "checkFramebufferStatus" [@@bs.send] 
    external clear : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> mask:int -> unit = "clear" [@@bs.send] 
    external clearColor : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> red:float -> green:float -> blue:float -> alpha:float -> unit = "clearColor" [@@bs.send] 
    external clearDepth : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> depth:float -> unit = "clearDepth" [@@bs.send] 
    external clearStencil : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> s:int -> unit = "clearStencil" [@@bs.send] 
    external colorMask : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> red:Js.boolean -> green:Js.boolean -> blue:Js.boolean -> alpha:Js.boolean -> unit = "colorMask" [@@bs.send] 
    external compileShader : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> shader:(_) webGLShader_like Js.null -> unit = "compileShader" [@@bs.send] 
    external compressedTexImage2D : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> level:int -> internalformat:int -> width:int -> height:int -> border:int -> data:'a13 -> unit = "compressedTexImage2D" [@@bs.send] 
    external compressedTexSubImage2D : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> level:int -> xoffset:int -> yoffset:int -> width:int -> height:int -> format:int -> data:'a14 -> unit = "compressedTexSubImage2D" [@@bs.send] 
    external copyTexImage2D : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> level:int -> internalformat:int -> x:int -> y:int -> width:int -> height:int -> border:int -> unit = "copyTexImage2D" [@@bs.send] 
    external copyTexSubImage2D : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> level:int -> xoffset:int -> yoffset:int -> x:int -> y:int -> width:int -> height:int -> unit = "copyTexSubImage2D" [@@bs.send] 
    external createBuffer : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> webGLBuffer option = "createBuffer" [@@bs.send] [@@bs.return null_to_opt]
    external createFramebuffer : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> webGLFramebuffer option = "createFramebuffer" [@@bs.send] [@@bs.return null_to_opt]
    external createProgram : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> webGLProgram option = "createProgram" [@@bs.send] [@@bs.return null_to_opt]
    external createRenderbuffer : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> webGLRenderbuffer option = "createRenderbuffer" [@@bs.send] [@@bs.return null_to_opt]
    external createShader : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> type_:int -> webGLShader option = "createShader" [@@bs.send] [@@bs.return null_to_opt]
    external createTexture : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> webGLTexture option = "createTexture" [@@bs.send] [@@bs.return null_to_opt]
    external cullFace : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> mode:int -> unit = "cullFace" [@@bs.send] 
    external deleteBuffer : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> buffer:(_) webGLBuffer_like Js.null -> unit = "deleteBuffer" [@@bs.send] 
    external deleteFramebuffer : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> framebuffer:(_) webGLFramebuffer_like Js.null -> unit = "deleteFramebuffer" [@@bs.send] 
    external deleteProgram : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> program:(_) webGLProgram_like Js.null -> unit = "deleteProgram" [@@bs.send] 
    external deleteRenderbuffer : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> renderbuffer:(_) webGLRenderbuffer_like Js.null -> unit = "deleteRenderbuffer" [@@bs.send] 
    external deleteShader : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> shader:(_) webGLShader_like Js.null -> unit = "deleteShader" [@@bs.send] 
    external deleteTexture : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> texture:(_) webGLTexture_like Js.null -> unit = "deleteTexture" [@@bs.send] 
    external depthFunc : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> func:int -> unit = "depthFunc" [@@bs.send] 
    external depthMask : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> flag:Js.boolean -> unit = "depthMask" [@@bs.send] 
    external depthRange : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> zNear:float -> zFar:float -> unit = "depthRange" [@@bs.send] 
    external detachShader : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> program:(_) webGLProgram_like Js.null -> shader:(_) webGLShader_like Js.null -> unit = "detachShader" [@@bs.send] 
    external disable : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> cap:int -> unit = "disable" [@@bs.send] 
    external disableVertexAttribArray : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> index:int -> unit = "disableVertexAttribArray" [@@bs.send] 
    external drawArrays : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> mode:int -> first:int -> count:int -> unit = "drawArrays" [@@bs.send] 
    external drawElements : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> mode:int -> count:int -> type_:int -> offset:int -> unit = "drawElements" [@@bs.send] 
    external enable : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> cap:int -> unit = "enable" [@@bs.send] 
    external enableVertexAttribArray : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> index:int -> unit = "enableVertexAttribArray" [@@bs.send] 
    external finish : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> unit = "finish" [@@bs.send] 
    external flush : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> unit = "flush" [@@bs.send] 
    external framebufferRenderbuffer : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> attachment:int -> renderbuffertarget:int -> renderbuffer:(_) webGLRenderbuffer_like Js.null -> unit = "framebufferRenderbuffer" [@@bs.send] 
    external framebufferTexture2D : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> attachment:int -> textarget:int -> texture:(_) webGLTexture_like Js.null -> level:int -> unit = "framebufferTexture2D" [@@bs.send] 
    external frontFace : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> mode:int -> unit = "frontFace" [@@bs.send] 
    external generateMipmap : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> unit = "generateMipmap" [@@bs.send] 
    external getActiveAttrib : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> program:(_) webGLProgram_like Js.null -> index:int -> webGLActiveInfo option = "getActiveAttrib" [@@bs.send] [@@bs.return null_to_opt]
    external getActiveUniform : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> program:(_) webGLProgram_like Js.null -> index:int -> webGLActiveInfo option = "getActiveUniform" [@@bs.send] [@@bs.return null_to_opt]
    external getAttribLocation : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> program:(_) webGLProgram_like Js.null -> name:string -> int = "getAttribLocation" [@@bs.send] 
    external getBufferParameter : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> pname:int -> 'a15 = "getBufferParameter" [@@bs.send] 
    external getContextAttributes : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> webGLContextAttributes option = "getContextAttributes" [@@bs.send] [@@bs.return null_to_opt]
    external getError : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> int = "getError" [@@bs.send] 
    external getExtension : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> name:string -> 'a16 option = "getExtension" [@@bs.send] [@@bs.return null_to_opt]
    external getParameter : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> pname:int -> 'a17 = "getParameter" [@@bs.send] 
    external getProgramInfoLog : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> program:(_) webGLProgram_like Js.null -> string option = "getProgramInfoLog" [@@bs.send] [@@bs.return null_to_opt]
    external getProgramParameter : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> program:(_) webGLProgram_like Js.null -> pname:int -> 'a18 = "getProgramParameter" [@@bs.send] 
    external getShaderInfoLog : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> shader:(_) webGLShader_like Js.null -> string option = "getShaderInfoLog" [@@bs.send] [@@bs.return null_to_opt]
    external getShaderParameter : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> shader:(_) webGLShader_like Js.null -> pname:int -> 'a19 = "getShaderParameter" [@@bs.send] 
    external getShaderPrecisionFormat : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> shadertype:int -> precisiontype:int -> webGLShaderPrecisionFormat option = "getShaderPrecisionFormat" [@@bs.send] [@@bs.return null_to_opt]
    external getShaderSource : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> shader:(_) webGLShader_like Js.null -> string option = "getShaderSource" [@@bs.send] [@@bs.return null_to_opt]
    external getSupportedExtensions : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> string array option = "getSupportedExtensions" [@@bs.send] [@@bs.return null_to_opt]
    external getUniformLocation : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> program:(_) webGLProgram_like Js.null -> name:string -> webGLUniformLocation option = "getUniformLocation" [@@bs.send] [@@bs.return null_to_opt]
    external getVertexAttrib : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> index:int -> pname:int -> 'a20 = "getVertexAttrib" [@@bs.send] 
    external getVertexAttribOffset : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> index:int -> pname:int -> int = "getVertexAttribOffset" [@@bs.send] 
    external hint : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> mode:int -> unit = "hint" [@@bs.send] 
    external isBuffer : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> buffer:(_) webGLBuffer_like Js.null -> bool = "isBuffer" [@@bs.send] 
    external isEnabled : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> cap:int -> bool = "isEnabled" [@@bs.send] 
    external isFramebuffer : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> framebuffer:(_) webGLFramebuffer_like Js.null -> bool = "isFramebuffer" [@@bs.send] 
    external isProgram : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> program:(_) webGLProgram_like Js.null -> bool = "isProgram" [@@bs.send] 
    external isRenderbuffer : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> renderbuffer:(_) webGLRenderbuffer_like Js.null -> bool = "isRenderbuffer" [@@bs.send] 
    external isShader : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> shader:(_) webGLShader_like Js.null -> bool = "isShader" [@@bs.send] 
    external isTexture : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> texture:(_) webGLTexture_like Js.null -> bool = "isTexture" [@@bs.send] 
    external lineWidth : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> width:float -> unit = "lineWidth" [@@bs.send] 
    external linkProgram : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> program:(_) webGLProgram_like Js.null -> unit = "linkProgram" [@@bs.send] 
    external pixelStorei : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> pname:int -> param:int -> unit = "pixelStorei" [@@bs.send] 
    external polygonOffset : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> factor:float -> units:float -> unit = "polygonOffset" [@@bs.send] 
    external readPixels : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> x:int -> y:int -> width:int -> height:int -> format:int -> type_:int -> pixels:'a21 Js.null -> unit = "readPixels" [@@bs.send] 
    external renderbufferStorage : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> internalformat:int -> width:int -> height:int -> unit = "renderbufferStorage" [@@bs.send] 
    external sampleCoverage : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> value:float -> invert:Js.boolean -> unit = "sampleCoverage" [@@bs.send] 
    external scissor : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> x:int -> y:int -> width:int -> height:int -> unit = "scissor" [@@bs.send] 
    external shaderSource : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> shader:(_) webGLShader_like Js.null -> source:string -> unit = "shaderSource" [@@bs.send] 
    external stencilFunc : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> func:int -> ref:int -> mask:int -> unit = "stencilFunc" [@@bs.send] 
    external stencilFuncSeparate : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> face:int -> func:int -> ref:int -> mask:int -> unit = "stencilFuncSeparate" [@@bs.send] 
    external stencilMask : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> mask:int -> unit = "stencilMask" [@@bs.send] 
    external stencilMaskSeparate : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> face:int -> mask:int -> unit = "stencilMaskSeparate" [@@bs.send] 
    external stencilOp : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> fail:int -> zfail:int -> zpass:int -> unit = "stencilOp" [@@bs.send] 
    external stencilOpSeparate : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> face:int -> fail:int -> zfail:int -> zpass:int -> unit = "stencilOpSeparate" [@@bs.send] 
    external texImage2D : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> level:int -> internalformat:int -> format:int -> type_:int -> source:'a22 Js.null -> unit = "texImage2D" [@@bs.send] 
    external texParameterf : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> pname:int -> param:float -> unit = "texParameterf" [@@bs.send] 
    external texParameteri : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> pname:int -> param:int -> unit = "texParameteri" [@@bs.send] 
    external texSubImage2D : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> target:int -> level:int -> xoffset:int -> yoffset:int -> format:int -> type_:int -> source:'a23 Js.null -> unit = "texSubImage2D" [@@bs.send] 
    external uniform1f : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> x:float -> unit = "uniform1f" [@@bs.send] 
    external uniform1fv : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> v:'a24 -> unit = "uniform1fv" [@@bs.send] 
    external uniform1i : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> x:int -> unit = "uniform1i" [@@bs.send] 
    external uniform1iv : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> v:'a25 -> unit = "uniform1iv" [@@bs.send] 
    external uniform2f : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> x:float -> y:float -> unit = "uniform2f" [@@bs.send] 
    external uniform2fv : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> v:'a26 -> unit = "uniform2fv" [@@bs.send] 
    external uniform2i : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> x:int -> y:int -> unit = "uniform2i" [@@bs.send] 
    external uniform2iv : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> v:'a27 -> unit = "uniform2iv" [@@bs.send] 
    external uniform3f : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> x:float -> y:float -> z:float -> unit = "uniform3f" [@@bs.send] 
    external uniform3fv : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> v:'a28 -> unit = "uniform3fv" [@@bs.send] 
    external uniform3i : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> x:int -> y:int -> z:int -> unit = "uniform3i" [@@bs.send] 
    external uniform3iv : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> v:'a29 -> unit = "uniform3iv" [@@bs.send] 
    external uniform4f : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> x:float -> y:float -> z:float -> w:float -> unit = "uniform4f" [@@bs.send] 
    external uniform4fv : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> v:'a30 -> unit = "uniform4fv" [@@bs.send] 
    external uniform4i : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> x:int -> y:int -> z:int -> w:int -> unit = "uniform4i" [@@bs.send] 
    external uniform4iv : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> v:'a31 -> unit = "uniform4iv" [@@bs.send] 
    external uniformMatrix2fv : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> transpose:Js.boolean -> v:'a32 -> unit = "uniformMatrix2fv" [@@bs.send] 
    external uniformMatrix3fv : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> transpose:Js.boolean -> v:'a33 -> unit = "uniformMatrix3fv" [@@bs.send] 
    external uniformMatrix4fv : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> location:(_) webGLUniformLocation_like Js.null -> transpose:Js.boolean -> v:'a34 -> unit = "uniformMatrix4fv" [@@bs.send] 
    external useProgram : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> program:(_) webGLProgram_like Js.null -> unit = "useProgram" [@@bs.send] 
    external validateProgram : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> program:(_) webGLProgram_like Js.null -> unit = "validateProgram" [@@bs.send] 
    external vertexAttrib1f : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> indx:int -> x:float -> unit = "vertexAttrib1f" [@@bs.send] 
    external vertexAttrib1fv : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> indx:int -> values:'a35 -> unit = "vertexAttrib1fv" [@@bs.send] 
    external vertexAttrib2f : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> indx:int -> x:float -> y:float -> unit = "vertexAttrib2f" [@@bs.send] 
    external vertexAttrib2fv : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> indx:int -> values:'a36 -> unit = "vertexAttrib2fv" [@@bs.send] 
    external vertexAttrib3f : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> indx:int -> x:float -> y:float -> z:float -> unit = "vertexAttrib3f" [@@bs.send] 
    external vertexAttrib3fv : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> indx:int -> values:'a37 -> unit = "vertexAttrib3fv" [@@bs.send] 
    external vertexAttrib4f : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> indx:int -> x:float -> y:float -> z:float -> w:float -> unit = "vertexAttrib4f" [@@bs.send] 
    external vertexAttrib4fv : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> indx:int -> values:'a38 -> unit = "vertexAttrib4fv" [@@bs.send] 
    external vertexAttribPointer : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> indx:int -> size:int -> type_:int -> normalized:Js.boolean -> stride:int -> offset:int -> unit = "vertexAttribPointer" [@@bs.send] 
    external viewport : webGLRenderingContextBase:(_) webGLRenderingContextBase_like -> x:int -> y:int -> width:int -> height:int -> unit = "viewport" [@@bs.send] 
    
    let depth_buffer_bit  =
      
      256
    
    let stencil_buffer_bit  =
      
      1024
    
    let color_buffer_bit  =
      
      16384
    
    let points  =
      
      0
    
    let lines  =
      
      1
    
    let line_loop  =
      
      2
    
    let line_strip  =
      
      3
    
    let triangles  =
      
      4
    
    let triangle_strip  =
      
      5
    
    let triangle_fan  =
      
      6
    
    let zero  =
      
      0
    
    let one  =
      
      1
    
    let src_color  =
      
      768
    
    let one_minus_src_color  =
      
      769
    
    let src_alpha  =
      
      770
    
    let one_minus_src_alpha  =
      
      771
    
    let dst_alpha  =
      
      772
    
    let one_minus_dst_alpha  =
      
      773
    
    let dst_color  =
      
      774
    
    let one_minus_dst_color  =
      
      775
    
    let src_alpha_saturate  =
      
      776
    
    let func_add  =
      
      32774
    
    let blend_equation  =
      
      32777
    
    let blend_equation_rgb  =
      
      32777
    
    let blend_equation_alpha  =
      
      34877
    
    let func_subtract  =
      
      32778
    
    let func_reverse_subtract  =
      
      32779
    
    let blend_dst_rgb  =
      
      32968
    
    let blend_src_rgb  =
      
      32969
    
    let blend_dst_alpha  =
      
      32970
    
    let blend_src_alpha  =
      
      32971
    
    let constant_color  =
      
      32769
    
    let one_minus_constant_color  =
      
      32770
    
    let constant_alpha  =
      
      32771
    
    let one_minus_constant_alpha  =
      
      32772
    
    let blend_color  =
      
      32773
    
    let array_buffer  =
      
      34962
    
    let element_array_buffer  =
      
      34963
    
    let array_buffer_binding  =
      
      34964
    
    let element_array_buffer_binding  =
      
      34965
    
    let stream_draw  =
      
      35040
    
    let static_draw  =
      
      35044
    
    let dynamic_draw  =
      
      35048
    
    let buffer_size  =
      
      34660
    
    let buffer_usage  =
      
      34661
    
    let current_vertex_attrib  =
      
      34342
    
    let front  =
      
      1028
    
    let back  =
      
      1029
    
    let front_and_back  =
      
      1032
    
    let cull_face  =
      
      2884
    
    let blend  =
      
      3042
    
    let dither  =
      
      3024
    
    let stencil_test  =
      
      2960
    
    let depth_test  =
      
      2929
    
    let scissor_test  =
      
      3089
    
    let polygon_offset_fill  =
      
      32823
    
    let sample_alpha_to_coverage  =
      
      32926
    
    let sample_coverage  =
      
      32928
    
    let no_error  =
      
      0
    
    let invalid_enum  =
      
      1280
    
    let invalid_value  =
      
      1281
    
    let invalid_operation  =
      
      1282
    
    let out_of_memory  =
      
      1285
    
    let cw  =
      
      2304
    
    let ccw  =
      
      2305
    
    let line_width  =
      
      2849
    
    let aliased_point_size_range  =
      
      33901
    
    let aliased_line_width_range  =
      
      33902
    
    let cull_face_mode  =
      
      2885
    
    let front_face  =
      
      2886
    
    let depth_range  =
      
      2928
    
    let depth_writemask  =
      
      2930
    
    let depth_clear_value  =
      
      2931
    
    let depth_func  =
      
      2932
    
    let stencil_clear_value  =
      
      2961
    
    let stencil_func  =
      
      2962
    
    let stencil_fail  =
      
      2964
    
    let stencil_pass_depth_fail  =
      
      2965
    
    let stencil_pass_depth_pass  =
      
      2966
    
    let stencil_ref  =
      
      2967
    
    let stencil_value_mask  =
      
      2963
    
    let stencil_writemask  =
      
      2968
    
    let stencil_back_func  =
      
      34816
    
    let stencil_back_fail  =
      
      34817
    
    let stencil_back_pass_depth_fail  =
      
      34818
    
    let stencil_back_pass_depth_pass  =
      
      34819
    
    let stencil_back_ref  =
      
      36003
    
    let stencil_back_value_mask  =
      
      36004
    
    let stencil_back_writemask  =
      
      36005
    
    let viewport  =
      
      2978
    
    let scissor_box  =
      
      3088
    
    let color_clear_value  =
      
      3106
    
    let color_writemask  =
      
      3107
    
    let unpack_alignment  =
      
      3317
    
    let pack_alignment  =
      
      3333
    
    let max_texture_size  =
      
      3379
    
    let max_viewport_dims  =
      
      3386
    
    let subpixel_bits  =
      
      3408
    
    let red_bits  =
      
      3410
    
    let green_bits  =
      
      3411
    
    let blue_bits  =
      
      3412
    
    let alpha_bits  =
      
      3413
    
    let depth_bits  =
      
      3414
    
    let stencil_bits  =
      
      3415
    
    let polygon_offset_units  =
      
      10752
    
    let polygon_offset_factor  =
      
      32824
    
    let texture_binding_2d  =
      
      32873
    
    let sample_buffers  =
      
      32936
    
    let samples  =
      
      32937
    
    let sample_coverage_value  =
      
      32938
    
    let sample_coverage_invert  =
      
      32939
    
    let compressed_texture_formats  =
      
      34467
    
    let dont_care  =
      
      4352
    
    let fastest  =
      
      4353
    
    let nicest  =
      
      4354
    
    let generate_mipmap_hint  =
      
      33170
    
    let byte  =
      
      5120
    
    let unsigned_byte  =
      
      5121
    
    let short  =
      
      5122
    
    let unsigned_short  =
      
      5123
    
    let int  =
      
      5124
    
    let unsigned_int  =
      
      5125
    
    let float  =
      
      5126
    
    let depth_component  =
      
      6402
    
    let alpha  =
      
      6406
    
    let rgb  =
      
      6407
    
    let rgba  =
      
      6408
    
    let luminance  =
      
      6409
    
    let luminance_alpha  =
      
      6410
    
    let unsigned_short_4_4_4_4  =
      
      32819
    
    let unsigned_short_5_5_5_1  =
      
      32820
    
    let unsigned_short_5_6_5  =
      
      33635
    
    let fragment_shader  =
      
      35632
    
    let vertex_shader  =
      
      35633
    
    let max_vertex_attribs  =
      
      34921
    
    let max_vertex_uniform_vectors  =
      
      36347
    
    let max_varying_vectors  =
      
      36348
    
    let max_combined_texture_image_units  =
      
      35661
    
    let max_vertex_texture_image_units  =
      
      35660
    
    let max_texture_image_units  =
      
      34930
    
    let max_fragment_uniform_vectors  =
      
      36349
    
    let shader_type  =
      
      35663
    
    let delete_status  =
      
      35712
    
    let link_status  =
      
      35714
    
    let validate_status  =
      
      35715
    
    let attached_shaders  =
      
      35717
    
    let active_uniforms  =
      
      35718
    
    let active_attributes  =
      
      35721
    
    let shading_language_version  =
      
      35724
    
    let current_program  =
      
      35725
    
    let never  =
      
      512
    
    let less  =
      
      513
    
    let equal  =
      
      514
    
    let lequal  =
      
      515
    
    let greater  =
      
      516
    
    let notequal  =
      
      517
    
    let gequal  =
      
      518
    
    let always  =
      
      519
    
    let keep  =
      
      7680
    
    let replace  =
      
      7681
    
    let incr  =
      
      7682
    
    let decr  =
      
      7683
    
    let invert  =
      
      5386
    
    let incr_wrap  =
      
      34055
    
    let decr_wrap  =
      
      34056
    
    let vendor  =
      
      7936
    
    let renderer  =
      
      7937
    
    let version  =
      
      7938
    
    let nearest  =
      
      9728
    
    let linear  =
      
      9729
    
    let nearest_mipmap_nearest  =
      
      9984
    
    let linear_mipmap_nearest  =
      
      9985
    
    let nearest_mipmap_linear  =
      
      9986
    
    let linear_mipmap_linear  =
      
      9987
    
    let texture_mag_filter  =
      
      10240
    
    let texture_min_filter  =
      
      10241
    
    let texture_wrap_s  =
      
      10242
    
    let texture_wrap_t  =
      
      10243
    
    let texture_2d  =
      
      3553
    
    let texture  =
      
      5890
    
    let texture_cube_map  =
      
      34067
    
    let texture_binding_cube_map  =
      
      34068
    
    let texture_cube_map_positive_x  =
      
      34069
    
    let texture_cube_map_negative_x  =
      
      34070
    
    let texture_cube_map_positive_y  =
      
      34071
    
    let texture_cube_map_negative_y  =
      
      34072
    
    let texture_cube_map_positive_z  =
      
      34073
    
    let texture_cube_map_negative_z  =
      
      34074
    
    let max_cube_map_texture_size  =
      
      34076
    
    let texture0  =
      
      33984
    
    let texture1  =
      
      33985
    
    let texture2  =
      
      33986
    
    let texture3  =
      
      33987
    
    let texture4  =
      
      33988
    
    let texture5  =
      
      33989
    
    let texture6  =
      
      33990
    
    let texture7  =
      
      33991
    
    let texture8  =
      
      33992
    
    let texture9  =
      
      33993
    
    let texture10  =
      
      33994
    
    let texture11  =
      
      33995
    
    let texture12  =
      
      33996
    
    let texture13  =
      
      33997
    
    let texture14  =
      
      33998
    
    let texture15  =
      
      33999
    
    let texture16  =
      
      34000
    
    let texture17  =
      
      34001
    
    let texture18  =
      
      34002
    
    let texture19  =
      
      34003
    
    let texture20  =
      
      34004
    
    let texture21  =
      
      34005
    
    let texture22  =
      
      34006
    
    let texture23  =
      
      34007
    
    let texture24  =
      
      34008
    
    let texture25  =
      
      34009
    
    let texture26  =
      
      34010
    
    let texture27  =
      
      34011
    
    let texture28  =
      
      34012
    
    let texture29  =
      
      34013
    
    let texture30  =
      
      34014
    
    let texture31  =
      
      34015
    
    let active_texture  =
      
      34016
    
    let repeat  =
      
      10497
    
    let clamp_to_edge  =
      
      33071
    
    let mirrored_repeat  =
      
      33648
    
    let float_vec2  =
      
      35664
    
    let float_vec3  =
      
      35665
    
    let float_vec4  =
      
      35666
    
    let int_vec2  =
      
      35667
    
    let int_vec3  =
      
      35668
    
    let int_vec4  =
      
      35669
    
    let bool  =
      
      35670
    
    let bool_vec2  =
      
      35671
    
    let bool_vec3  =
      
      35672
    
    let bool_vec4  =
      
      35673
    
    let float_mat2  =
      
      35674
    
    let float_mat3  =
      
      35675
    
    let float_mat4  =
      
      35676
    
    let sampler_2d  =
      
      35678
    
    let sampler_cube  =
      
      35680
    
    let vertex_attrib_array_enabled  =
      
      34338
    
    let vertex_attrib_array_size  =
      
      34339
    
    let vertex_attrib_array_stride  =
      
      34340
    
    let vertex_attrib_array_type  =
      
      34341
    
    let vertex_attrib_array_normalized  =
      
      34922
    
    let vertex_attrib_array_pointer  =
      
      34373
    
    let vertex_attrib_array_buffer_binding  =
      
      34975
    
    let implementation_color_read_type  =
      
      35738
    
    let implementation_color_read_format  =
      
      35739
    
    let compile_status  =
      
      35713
    
    let low_float  =
      
      36336
    
    let medium_float  =
      
      36337
    
    let high_float  =
      
      36338
    
    let low_int  =
      
      36339
    
    let medium_int  =
      
      36340
    
    let high_int  =
      
      36341
    
    let framebuffer  =
      
      36160
    
    let renderbuffer  =
      
      36161
    
    let rgba4  =
      
      32854
    
    let rgb5_a1  =
      
      32855
    
    let rgb565  =
      
      36194
    
    let depth_component16  =
      
      33189
    
    let stencil_index  =
      
      6401
    
    let stencil_index8  =
      
      36168
    
    let depth_stencil  =
      
      34041
    
    let renderbuffer_width  =
      
      36162
    
    let renderbuffer_height  =
      
      36163
    
    let renderbuffer_internal_format  =
      
      36164
    
    let renderbuffer_red_size  =
      
      36176
    
    let renderbuffer_green_size  =
      
      36177
    
    let renderbuffer_blue_size  =
      
      36178
    
    let renderbuffer_alpha_size  =
      
      36179
    
    let renderbuffer_depth_size  =
      
      36180
    
    let renderbuffer_stencil_size  =
      
      36181
    
    let framebuffer_attachment_object_type  =
      
      36048
    
    let framebuffer_attachment_object_name  =
      
      36049
    
    let framebuffer_attachment_texture_level  =
      
      36050
    
    let framebuffer_attachment_texture_cube_map_face  =
      
      36051
    
    let color_attachment0  =
      
      36064
    
    let depth_attachment  =
      
      36096
    
    let stencil_attachment  =
      
      36128
    
    let depth_stencil_attachment  =
      
      33306
    
    let none  =
      
      0
    
    let framebuffer_complete  =
      
      36053
    
    let framebuffer_incomplete_attachment  =
      
      36054
    
    let framebuffer_incomplete_missing_attachment  =
      
      36055
    
    let framebuffer_incomplete_dimensions  =
      
      36057
    
    let framebuffer_unsupported  =
      
      36061
    
    let framebuffer_binding  =
      
      36006
    
    let renderbuffer_binding  =
      
      36007
    
    let max_renderbuffer_size  =
      
      34024
    
    let invalid_framebuffer_operation  =
      
      1286
    
    let unpack_flip_y_webgl  =
      
      37440
    
    let unpack_premultiply_alpha_webgl  =
      
      37441
    
    let context_lost_webgl  =
      
      37442
    
    let unpack_colorspace_conversion_webgl  =
      
      37443
    
    let browser_default_webgl  =
      
      37444
    
    let bufferData ~webGLRenderingContextBase ~target ~data ~usage =
      let conv_data = function
        | `Any_Null (x: 'a39 Js.null) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let data = conv_data data in
      let return = bufferData ~webGLRenderingContextBase ~target ~data ~usage in
      return
    
    let texImage2D ~webGLRenderingContextBase ~target ~level ~internalformat ~format ~type_ ~source =
      let conv_source = function
        | `ImageData (x: (_) imageData_like) -> Obj.magic x
        | `HTMLImageElement (x: (_) hTMLImageElement_like) -> Obj.magic x
        | `HTMLCanvasElement (x: (_) hTMLCanvasElement_like) -> Obj.magic x
        | `HTMLVideoElement (x: (_) hTMLVideoElement_like) -> Obj.magic x
         in
      let conv_source = access_null conv_source in
      let source = conv_source source in
      let return = texImage2D ~webGLRenderingContextBase ~target ~level ~internalformat ~format ~type_ ~source in
      return
    
    let texSubImage2D ~webGLRenderingContextBase ~target ~level ~xoffset ~yoffset ~format ~type_ ~source =
      let conv_source = function
        | `ImageData (x: (_) imageData_like) -> Obj.magic x
        | `HTMLImageElement (x: (_) hTMLImageElement_like) -> Obj.magic x
        | `HTMLCanvasElement (x: (_) hTMLCanvasElement_like) -> Obj.magic x
        | `HTMLVideoElement (x: (_) hTMLVideoElement_like) -> Obj.magic x
         in
      let conv_source = access_null conv_source in
      let source = conv_source source in
      let return = texSubImage2D ~webGLRenderingContextBase ~target ~level ~xoffset ~yoffset ~format ~type_ ~source in
      return
    
end
 module WebGLRenderingContext = struct
    
    
    external canvas : webGLRenderingContext:(_) webGLRenderingContext_like -> hTMLCanvasElement = "canvas" [@@bs.get] 
    external drawingBufferWidth : webGLRenderingContext:(_) webGLRenderingContext_like -> int = "drawingBufferWidth" [@@bs.get] 
    external drawingBufferHeight : webGLRenderingContext:(_) webGLRenderingContext_like -> int = "drawingBufferHeight" [@@bs.get] 
    external activeTexture : webGLRenderingContext:(_) webGLRenderingContext_like -> texture:int -> unit = "activeTexture" [@@bs.send] 
    external attachShader : webGLRenderingContext:(_) webGLRenderingContext_like -> program:(_) webGLProgram_like Js.null -> shader:(_) webGLShader_like Js.null -> unit = "attachShader" [@@bs.send] 
    external bindAttribLocation : webGLRenderingContext:(_) webGLRenderingContext_like -> program:(_) webGLProgram_like Js.null -> index:int -> name:string -> unit = "bindAttribLocation" [@@bs.send] 
    external bindBuffer : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> buffer:(_) webGLBuffer_like Js.null -> unit = "bindBuffer" [@@bs.send] 
    external bindFramebuffer : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> framebuffer:(_) webGLFramebuffer_like Js.null -> unit = "bindFramebuffer" [@@bs.send] 
    external bindRenderbuffer : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> renderbuffer:(_) webGLRenderbuffer_like Js.null -> unit = "bindRenderbuffer" [@@bs.send] 
    external bindTexture : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> texture:(_) webGLTexture_like Js.null -> unit = "bindTexture" [@@bs.send] 
    external blendColor : webGLRenderingContext:(_) webGLRenderingContext_like -> red:float -> green:float -> blue:float -> alpha:float -> unit = "blendColor" [@@bs.send] 
    external blendEquation : webGLRenderingContext:(_) webGLRenderingContext_like -> mode:int -> unit = "blendEquation" [@@bs.send] 
    external blendEquationSeparate : webGLRenderingContext:(_) webGLRenderingContext_like -> modeRGB:int -> modeAlpha:int -> unit = "blendEquationSeparate" [@@bs.send] 
    external blendFunc : webGLRenderingContext:(_) webGLRenderingContext_like -> sfactor:int -> dfactor:int -> unit = "blendFunc" [@@bs.send] 
    external blendFuncSeparate : webGLRenderingContext:(_) webGLRenderingContext_like -> srcRGB:int -> dstRGB:int -> srcAlpha:int -> dstAlpha:int -> unit = "blendFuncSeparate" [@@bs.send] 
    external bufferData : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> data:'a40 -> usage:int -> unit = "bufferData" [@@bs.send] 
    external bufferSubData : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> offset:int -> data:'a41 Js.null -> unit = "bufferSubData" [@@bs.send] 
    external checkFramebufferStatus : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> int = "checkFramebufferStatus" [@@bs.send] 
    external clear : webGLRenderingContext:(_) webGLRenderingContext_like -> mask:int -> unit = "clear" [@@bs.send] 
    external clearColor : webGLRenderingContext:(_) webGLRenderingContext_like -> red:float -> green:float -> blue:float -> alpha:float -> unit = "clearColor" [@@bs.send] 
    external clearDepth : webGLRenderingContext:(_) webGLRenderingContext_like -> depth:float -> unit = "clearDepth" [@@bs.send] 
    external clearStencil : webGLRenderingContext:(_) webGLRenderingContext_like -> s:int -> unit = "clearStencil" [@@bs.send] 
    external colorMask : webGLRenderingContext:(_) webGLRenderingContext_like -> red:Js.boolean -> green:Js.boolean -> blue:Js.boolean -> alpha:Js.boolean -> unit = "colorMask" [@@bs.send] 
    external compileShader : webGLRenderingContext:(_) webGLRenderingContext_like -> shader:(_) webGLShader_like Js.null -> unit = "compileShader" [@@bs.send] 
    external compressedTexImage2D : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> level:int -> internalformat:int -> width:int -> height:int -> border:int -> data:'a42 -> unit = "compressedTexImage2D" [@@bs.send] 
    external compressedTexSubImage2D : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> level:int -> xoffset:int -> yoffset:int -> width:int -> height:int -> format:int -> data:'a43 -> unit = "compressedTexSubImage2D" [@@bs.send] 
    external copyTexImage2D : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> level:int -> internalformat:int -> x:int -> y:int -> width:int -> height:int -> border:int -> unit = "copyTexImage2D" [@@bs.send] 
    external copyTexSubImage2D : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> level:int -> xoffset:int -> yoffset:int -> x:int -> y:int -> width:int -> height:int -> unit = "copyTexSubImage2D" [@@bs.send] 
    external createBuffer : webGLRenderingContext:(_) webGLRenderingContext_like -> webGLBuffer option = "createBuffer" [@@bs.send] [@@bs.return null_to_opt]
    external createFramebuffer : webGLRenderingContext:(_) webGLRenderingContext_like -> webGLFramebuffer option = "createFramebuffer" [@@bs.send] [@@bs.return null_to_opt]
    external createProgram : webGLRenderingContext:(_) webGLRenderingContext_like -> webGLProgram option = "createProgram" [@@bs.send] [@@bs.return null_to_opt]
    external createRenderbuffer : webGLRenderingContext:(_) webGLRenderingContext_like -> webGLRenderbuffer option = "createRenderbuffer" [@@bs.send] [@@bs.return null_to_opt]
    external createShader : webGLRenderingContext:(_) webGLRenderingContext_like -> type_:int -> webGLShader option = "createShader" [@@bs.send] [@@bs.return null_to_opt]
    external createTexture : webGLRenderingContext:(_) webGLRenderingContext_like -> webGLTexture option = "createTexture" [@@bs.send] [@@bs.return null_to_opt]
    external cullFace : webGLRenderingContext:(_) webGLRenderingContext_like -> mode:int -> unit = "cullFace" [@@bs.send] 
    external deleteBuffer : webGLRenderingContext:(_) webGLRenderingContext_like -> buffer:(_) webGLBuffer_like Js.null -> unit = "deleteBuffer" [@@bs.send] 
    external deleteFramebuffer : webGLRenderingContext:(_) webGLRenderingContext_like -> framebuffer:(_) webGLFramebuffer_like Js.null -> unit = "deleteFramebuffer" [@@bs.send] 
    external deleteProgram : webGLRenderingContext:(_) webGLRenderingContext_like -> program:(_) webGLProgram_like Js.null -> unit = "deleteProgram" [@@bs.send] 
    external deleteRenderbuffer : webGLRenderingContext:(_) webGLRenderingContext_like -> renderbuffer:(_) webGLRenderbuffer_like Js.null -> unit = "deleteRenderbuffer" [@@bs.send] 
    external deleteShader : webGLRenderingContext:(_) webGLRenderingContext_like -> shader:(_) webGLShader_like Js.null -> unit = "deleteShader" [@@bs.send] 
    external deleteTexture : webGLRenderingContext:(_) webGLRenderingContext_like -> texture:(_) webGLTexture_like Js.null -> unit = "deleteTexture" [@@bs.send] 
    external depthFunc : webGLRenderingContext:(_) webGLRenderingContext_like -> func:int -> unit = "depthFunc" [@@bs.send] 
    external depthMask : webGLRenderingContext:(_) webGLRenderingContext_like -> flag:Js.boolean -> unit = "depthMask" [@@bs.send] 
    external depthRange : webGLRenderingContext:(_) webGLRenderingContext_like -> zNear:float -> zFar:float -> unit = "depthRange" [@@bs.send] 
    external detachShader : webGLRenderingContext:(_) webGLRenderingContext_like -> program:(_) webGLProgram_like Js.null -> shader:(_) webGLShader_like Js.null -> unit = "detachShader" [@@bs.send] 
    external disable : webGLRenderingContext:(_) webGLRenderingContext_like -> cap:int -> unit = "disable" [@@bs.send] 
    external disableVertexAttribArray : webGLRenderingContext:(_) webGLRenderingContext_like -> index:int -> unit = "disableVertexAttribArray" [@@bs.send] 
    external drawArrays : webGLRenderingContext:(_) webGLRenderingContext_like -> mode:int -> first:int -> count:int -> unit = "drawArrays" [@@bs.send] 
    external drawElements : webGLRenderingContext:(_) webGLRenderingContext_like -> mode:int -> count:int -> type_:int -> offset:int -> unit = "drawElements" [@@bs.send] 
    external enable : webGLRenderingContext:(_) webGLRenderingContext_like -> cap:int -> unit = "enable" [@@bs.send] 
    external enableVertexAttribArray : webGLRenderingContext:(_) webGLRenderingContext_like -> index:int -> unit = "enableVertexAttribArray" [@@bs.send] 
    external finish : webGLRenderingContext:(_) webGLRenderingContext_like -> unit = "finish" [@@bs.send] 
    external flush : webGLRenderingContext:(_) webGLRenderingContext_like -> unit = "flush" [@@bs.send] 
    external framebufferRenderbuffer : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> attachment:int -> renderbuffertarget:int -> renderbuffer:(_) webGLRenderbuffer_like Js.null -> unit = "framebufferRenderbuffer" [@@bs.send] 
    external framebufferTexture2D : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> attachment:int -> textarget:int -> texture:(_) webGLTexture_like Js.null -> level:int -> unit = "framebufferTexture2D" [@@bs.send] 
    external frontFace : webGLRenderingContext:(_) webGLRenderingContext_like -> mode:int -> unit = "frontFace" [@@bs.send] 
    external generateMipmap : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> unit = "generateMipmap" [@@bs.send] 
    external getActiveAttrib : webGLRenderingContext:(_) webGLRenderingContext_like -> program:(_) webGLProgram_like Js.null -> index:int -> webGLActiveInfo option = "getActiveAttrib" [@@bs.send] [@@bs.return null_to_opt]
    external getActiveUniform : webGLRenderingContext:(_) webGLRenderingContext_like -> program:(_) webGLProgram_like Js.null -> index:int -> webGLActiveInfo option = "getActiveUniform" [@@bs.send] [@@bs.return null_to_opt]
    external getAttribLocation : webGLRenderingContext:(_) webGLRenderingContext_like -> program:(_) webGLProgram_like Js.null -> name:string -> int = "getAttribLocation" [@@bs.send] 
    external getBufferParameter : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> pname:int -> 'a44 = "getBufferParameter" [@@bs.send] 
    external getContextAttributes : webGLRenderingContext:(_) webGLRenderingContext_like -> webGLContextAttributes option = "getContextAttributes" [@@bs.send] [@@bs.return null_to_opt]
    external getError : webGLRenderingContext:(_) webGLRenderingContext_like -> int = "getError" [@@bs.send] 
    external getExtension : webGLRenderingContext:(_) webGLRenderingContext_like -> name:string -> 'a45 option = "getExtension" [@@bs.send] [@@bs.return null_to_opt]
    external getParameter : webGLRenderingContext:(_) webGLRenderingContext_like -> pname:int -> 'a46 = "getParameter" [@@bs.send] 
    external getProgramInfoLog : webGLRenderingContext:(_) webGLRenderingContext_like -> program:(_) webGLProgram_like Js.null -> string option = "getProgramInfoLog" [@@bs.send] [@@bs.return null_to_opt]
    external getProgramParameter : webGLRenderingContext:(_) webGLRenderingContext_like -> program:(_) webGLProgram_like Js.null -> pname:int -> 'a47 = "getProgramParameter" [@@bs.send] 
    external getShaderInfoLog : webGLRenderingContext:(_) webGLRenderingContext_like -> shader:(_) webGLShader_like Js.null -> string option = "getShaderInfoLog" [@@bs.send] [@@bs.return null_to_opt]
    external getShaderParameter : webGLRenderingContext:(_) webGLRenderingContext_like -> shader:(_) webGLShader_like Js.null -> pname:int -> 'a48 = "getShaderParameter" [@@bs.send] 
    external getShaderPrecisionFormat : webGLRenderingContext:(_) webGLRenderingContext_like -> shadertype:int -> precisiontype:int -> webGLShaderPrecisionFormat option = "getShaderPrecisionFormat" [@@bs.send] [@@bs.return null_to_opt]
    external getShaderSource : webGLRenderingContext:(_) webGLRenderingContext_like -> shader:(_) webGLShader_like Js.null -> string option = "getShaderSource" [@@bs.send] [@@bs.return null_to_opt]
    external getSupportedExtensions : webGLRenderingContext:(_) webGLRenderingContext_like -> string array option = "getSupportedExtensions" [@@bs.send] [@@bs.return null_to_opt]
    external getUniformLocation : webGLRenderingContext:(_) webGLRenderingContext_like -> program:(_) webGLProgram_like Js.null -> name:string -> webGLUniformLocation option = "getUniformLocation" [@@bs.send] [@@bs.return null_to_opt]
    external getVertexAttrib : webGLRenderingContext:(_) webGLRenderingContext_like -> index:int -> pname:int -> 'a49 = "getVertexAttrib" [@@bs.send] 
    external getVertexAttribOffset : webGLRenderingContext:(_) webGLRenderingContext_like -> index:int -> pname:int -> int = "getVertexAttribOffset" [@@bs.send] 
    external hint : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> mode:int -> unit = "hint" [@@bs.send] 
    external isBuffer : webGLRenderingContext:(_) webGLRenderingContext_like -> buffer:(_) webGLBuffer_like Js.null -> bool = "isBuffer" [@@bs.send] 
    external isEnabled : webGLRenderingContext:(_) webGLRenderingContext_like -> cap:int -> bool = "isEnabled" [@@bs.send] 
    external isFramebuffer : webGLRenderingContext:(_) webGLRenderingContext_like -> framebuffer:(_) webGLFramebuffer_like Js.null -> bool = "isFramebuffer" [@@bs.send] 
    external isProgram : webGLRenderingContext:(_) webGLRenderingContext_like -> program:(_) webGLProgram_like Js.null -> bool = "isProgram" [@@bs.send] 
    external isRenderbuffer : webGLRenderingContext:(_) webGLRenderingContext_like -> renderbuffer:(_) webGLRenderbuffer_like Js.null -> bool = "isRenderbuffer" [@@bs.send] 
    external isShader : webGLRenderingContext:(_) webGLRenderingContext_like -> shader:(_) webGLShader_like Js.null -> bool = "isShader" [@@bs.send] 
    external isTexture : webGLRenderingContext:(_) webGLRenderingContext_like -> texture:(_) webGLTexture_like Js.null -> bool = "isTexture" [@@bs.send] 
    external lineWidth : webGLRenderingContext:(_) webGLRenderingContext_like -> width:float -> unit = "lineWidth" [@@bs.send] 
    external linkProgram : webGLRenderingContext:(_) webGLRenderingContext_like -> program:(_) webGLProgram_like Js.null -> unit = "linkProgram" [@@bs.send] 
    external pixelStorei : webGLRenderingContext:(_) webGLRenderingContext_like -> pname:int -> param:int -> unit = "pixelStorei" [@@bs.send] 
    external polygonOffset : webGLRenderingContext:(_) webGLRenderingContext_like -> factor:float -> units:float -> unit = "polygonOffset" [@@bs.send] 
    external readPixels : webGLRenderingContext:(_) webGLRenderingContext_like -> x:int -> y:int -> width:int -> height:int -> format:int -> type_:int -> pixels:'a50 Js.null -> unit = "readPixels" [@@bs.send] 
    external renderbufferStorage : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> internalformat:int -> width:int -> height:int -> unit = "renderbufferStorage" [@@bs.send] 
    external sampleCoverage : webGLRenderingContext:(_) webGLRenderingContext_like -> value:float -> invert:Js.boolean -> unit = "sampleCoverage" [@@bs.send] 
    external scissor : webGLRenderingContext:(_) webGLRenderingContext_like -> x:int -> y:int -> width:int -> height:int -> unit = "scissor" [@@bs.send] 
    external shaderSource : webGLRenderingContext:(_) webGLRenderingContext_like -> shader:(_) webGLShader_like Js.null -> source:string -> unit = "shaderSource" [@@bs.send] 
    external stencilFunc : webGLRenderingContext:(_) webGLRenderingContext_like -> func:int -> ref:int -> mask:int -> unit = "stencilFunc" [@@bs.send] 
    external stencilFuncSeparate : webGLRenderingContext:(_) webGLRenderingContext_like -> face:int -> func:int -> ref:int -> mask:int -> unit = "stencilFuncSeparate" [@@bs.send] 
    external stencilMask : webGLRenderingContext:(_) webGLRenderingContext_like -> mask:int -> unit = "stencilMask" [@@bs.send] 
    external stencilMaskSeparate : webGLRenderingContext:(_) webGLRenderingContext_like -> face:int -> mask:int -> unit = "stencilMaskSeparate" [@@bs.send] 
    external stencilOp : webGLRenderingContext:(_) webGLRenderingContext_like -> fail:int -> zfail:int -> zpass:int -> unit = "stencilOp" [@@bs.send] 
    external stencilOpSeparate : webGLRenderingContext:(_) webGLRenderingContext_like -> face:int -> fail:int -> zfail:int -> zpass:int -> unit = "stencilOpSeparate" [@@bs.send] 
    external texImage2D : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> level:int -> internalformat:int -> format:int -> type_:int -> source:'a51 Js.null -> unit = "texImage2D" [@@bs.send] 
    external texParameterf : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> pname:int -> param:float -> unit = "texParameterf" [@@bs.send] 
    external texParameteri : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> pname:int -> param:int -> unit = "texParameteri" [@@bs.send] 
    external texSubImage2D : webGLRenderingContext:(_) webGLRenderingContext_like -> target:int -> level:int -> xoffset:int -> yoffset:int -> format:int -> type_:int -> source:'a52 Js.null -> unit = "texSubImage2D" [@@bs.send] 
    external uniform1f : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> x:float -> unit = "uniform1f" [@@bs.send] 
    external uniform1fv : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> v:'a53 -> unit = "uniform1fv" [@@bs.send] 
    external uniform1i : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> x:int -> unit = "uniform1i" [@@bs.send] 
    external uniform1iv : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> v:'a54 -> unit = "uniform1iv" [@@bs.send] 
    external uniform2f : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> x:float -> y:float -> unit = "uniform2f" [@@bs.send] 
    external uniform2fv : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> v:'a55 -> unit = "uniform2fv" [@@bs.send] 
    external uniform2i : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> x:int -> y:int -> unit = "uniform2i" [@@bs.send] 
    external uniform2iv : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> v:'a56 -> unit = "uniform2iv" [@@bs.send] 
    external uniform3f : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> x:float -> y:float -> z:float -> unit = "uniform3f" [@@bs.send] 
    external uniform3fv : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> v:'a57 -> unit = "uniform3fv" [@@bs.send] 
    external uniform3i : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> x:int -> y:int -> z:int -> unit = "uniform3i" [@@bs.send] 
    external uniform3iv : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> v:'a58 -> unit = "uniform3iv" [@@bs.send] 
    external uniform4f : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> x:float -> y:float -> z:float -> w:float -> unit = "uniform4f" [@@bs.send] 
    external uniform4fv : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> v:'a59 -> unit = "uniform4fv" [@@bs.send] 
    external uniform4i : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> x:int -> y:int -> z:int -> w:int -> unit = "uniform4i" [@@bs.send] 
    external uniform4iv : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> v:'a60 -> unit = "uniform4iv" [@@bs.send] 
    external uniformMatrix2fv : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> transpose:Js.boolean -> v:'a61 -> unit = "uniformMatrix2fv" [@@bs.send] 
    external uniformMatrix3fv : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> transpose:Js.boolean -> v:'a62 -> unit = "uniformMatrix3fv" [@@bs.send] 
    external uniformMatrix4fv : webGLRenderingContext:(_) webGLRenderingContext_like -> location:(_) webGLUniformLocation_like Js.null -> transpose:Js.boolean -> v:'a63 -> unit = "uniformMatrix4fv" [@@bs.send] 
    external useProgram : webGLRenderingContext:(_) webGLRenderingContext_like -> program:(_) webGLProgram_like Js.null -> unit = "useProgram" [@@bs.send] 
    external validateProgram : webGLRenderingContext:(_) webGLRenderingContext_like -> program:(_) webGLProgram_like Js.null -> unit = "validateProgram" [@@bs.send] 
    external vertexAttrib1f : webGLRenderingContext:(_) webGLRenderingContext_like -> indx:int -> x:float -> unit = "vertexAttrib1f" [@@bs.send] 
    external vertexAttrib1fv : webGLRenderingContext:(_) webGLRenderingContext_like -> indx:int -> values:'a64 -> unit = "vertexAttrib1fv" [@@bs.send] 
    external vertexAttrib2f : webGLRenderingContext:(_) webGLRenderingContext_like -> indx:int -> x:float -> y:float -> unit = "vertexAttrib2f" [@@bs.send] 
    external vertexAttrib2fv : webGLRenderingContext:(_) webGLRenderingContext_like -> indx:int -> values:'a65 -> unit = "vertexAttrib2fv" [@@bs.send] 
    external vertexAttrib3f : webGLRenderingContext:(_) webGLRenderingContext_like -> indx:int -> x:float -> y:float -> z:float -> unit = "vertexAttrib3f" [@@bs.send] 
    external vertexAttrib3fv : webGLRenderingContext:(_) webGLRenderingContext_like -> indx:int -> values:'a66 -> unit = "vertexAttrib3fv" [@@bs.send] 
    external vertexAttrib4f : webGLRenderingContext:(_) webGLRenderingContext_like -> indx:int -> x:float -> y:float -> z:float -> w:float -> unit = "vertexAttrib4f" [@@bs.send] 
    external vertexAttrib4fv : webGLRenderingContext:(_) webGLRenderingContext_like -> indx:int -> values:'a67 -> unit = "vertexAttrib4fv" [@@bs.send] 
    external vertexAttribPointer : webGLRenderingContext:(_) webGLRenderingContext_like -> indx:int -> size:int -> type_:int -> normalized:Js.boolean -> stride:int -> offset:int -> unit = "vertexAttribPointer" [@@bs.send] 
    external viewport : webGLRenderingContext:(_) webGLRenderingContext_like -> x:int -> y:int -> width:int -> height:int -> unit = "viewport" [@@bs.send] 
    
    let depth_buffer_bit  =
      
      256
    
    let stencil_buffer_bit  =
      
      1024
    
    let color_buffer_bit  =
      
      16384
    
    let points  =
      
      0
    
    let lines  =
      
      1
    
    let line_loop  =
      
      2
    
    let line_strip  =
      
      3
    
    let triangles  =
      
      4
    
    let triangle_strip  =
      
      5
    
    let triangle_fan  =
      
      6
    
    let zero  =
      
      0
    
    let one  =
      
      1
    
    let src_color  =
      
      768
    
    let one_minus_src_color  =
      
      769
    
    let src_alpha  =
      
      770
    
    let one_minus_src_alpha  =
      
      771
    
    let dst_alpha  =
      
      772
    
    let one_minus_dst_alpha  =
      
      773
    
    let dst_color  =
      
      774
    
    let one_minus_dst_color  =
      
      775
    
    let src_alpha_saturate  =
      
      776
    
    let func_add  =
      
      32774
    
    let blend_equation  =
      
      32777
    
    let blend_equation_rgb  =
      
      32777
    
    let blend_equation_alpha  =
      
      34877
    
    let func_subtract  =
      
      32778
    
    let func_reverse_subtract  =
      
      32779
    
    let blend_dst_rgb  =
      
      32968
    
    let blend_src_rgb  =
      
      32969
    
    let blend_dst_alpha  =
      
      32970
    
    let blend_src_alpha  =
      
      32971
    
    let constant_color  =
      
      32769
    
    let one_minus_constant_color  =
      
      32770
    
    let constant_alpha  =
      
      32771
    
    let one_minus_constant_alpha  =
      
      32772
    
    let blend_color  =
      
      32773
    
    let array_buffer  =
      
      34962
    
    let element_array_buffer  =
      
      34963
    
    let array_buffer_binding  =
      
      34964
    
    let element_array_buffer_binding  =
      
      34965
    
    let stream_draw  =
      
      35040
    
    let static_draw  =
      
      35044
    
    let dynamic_draw  =
      
      35048
    
    let buffer_size  =
      
      34660
    
    let buffer_usage  =
      
      34661
    
    let current_vertex_attrib  =
      
      34342
    
    let front  =
      
      1028
    
    let back  =
      
      1029
    
    let front_and_back  =
      
      1032
    
    let cull_face  =
      
      2884
    
    let blend  =
      
      3042
    
    let dither  =
      
      3024
    
    let stencil_test  =
      
      2960
    
    let depth_test  =
      
      2929
    
    let scissor_test  =
      
      3089
    
    let polygon_offset_fill  =
      
      32823
    
    let sample_alpha_to_coverage  =
      
      32926
    
    let sample_coverage  =
      
      32928
    
    let no_error  =
      
      0
    
    let invalid_enum  =
      
      1280
    
    let invalid_value  =
      
      1281
    
    let invalid_operation  =
      
      1282
    
    let out_of_memory  =
      
      1285
    
    let cw  =
      
      2304
    
    let ccw  =
      
      2305
    
    let line_width  =
      
      2849
    
    let aliased_point_size_range  =
      
      33901
    
    let aliased_line_width_range  =
      
      33902
    
    let cull_face_mode  =
      
      2885
    
    let front_face  =
      
      2886
    
    let depth_range  =
      
      2928
    
    let depth_writemask  =
      
      2930
    
    let depth_clear_value  =
      
      2931
    
    let depth_func  =
      
      2932
    
    let stencil_clear_value  =
      
      2961
    
    let stencil_func  =
      
      2962
    
    let stencil_fail  =
      
      2964
    
    let stencil_pass_depth_fail  =
      
      2965
    
    let stencil_pass_depth_pass  =
      
      2966
    
    let stencil_ref  =
      
      2967
    
    let stencil_value_mask  =
      
      2963
    
    let stencil_writemask  =
      
      2968
    
    let stencil_back_func  =
      
      34816
    
    let stencil_back_fail  =
      
      34817
    
    let stencil_back_pass_depth_fail  =
      
      34818
    
    let stencil_back_pass_depth_pass  =
      
      34819
    
    let stencil_back_ref  =
      
      36003
    
    let stencil_back_value_mask  =
      
      36004
    
    let stencil_back_writemask  =
      
      36005
    
    let viewport  =
      
      2978
    
    let scissor_box  =
      
      3088
    
    let color_clear_value  =
      
      3106
    
    let color_writemask  =
      
      3107
    
    let unpack_alignment  =
      
      3317
    
    let pack_alignment  =
      
      3333
    
    let max_texture_size  =
      
      3379
    
    let max_viewport_dims  =
      
      3386
    
    let subpixel_bits  =
      
      3408
    
    let red_bits  =
      
      3410
    
    let green_bits  =
      
      3411
    
    let blue_bits  =
      
      3412
    
    let alpha_bits  =
      
      3413
    
    let depth_bits  =
      
      3414
    
    let stencil_bits  =
      
      3415
    
    let polygon_offset_units  =
      
      10752
    
    let polygon_offset_factor  =
      
      32824
    
    let texture_binding_2d  =
      
      32873
    
    let sample_buffers  =
      
      32936
    
    let samples  =
      
      32937
    
    let sample_coverage_value  =
      
      32938
    
    let sample_coverage_invert  =
      
      32939
    
    let compressed_texture_formats  =
      
      34467
    
    let dont_care  =
      
      4352
    
    let fastest  =
      
      4353
    
    let nicest  =
      
      4354
    
    let generate_mipmap_hint  =
      
      33170
    
    let byte  =
      
      5120
    
    let unsigned_byte  =
      
      5121
    
    let short  =
      
      5122
    
    let unsigned_short  =
      
      5123
    
    let int  =
      
      5124
    
    let unsigned_int  =
      
      5125
    
    let float  =
      
      5126
    
    let depth_component  =
      
      6402
    
    let alpha  =
      
      6406
    
    let rgb  =
      
      6407
    
    let rgba  =
      
      6408
    
    let luminance  =
      
      6409
    
    let luminance_alpha  =
      
      6410
    
    let unsigned_short_4_4_4_4  =
      
      32819
    
    let unsigned_short_5_5_5_1  =
      
      32820
    
    let unsigned_short_5_6_5  =
      
      33635
    
    let fragment_shader  =
      
      35632
    
    let vertex_shader  =
      
      35633
    
    let max_vertex_attribs  =
      
      34921
    
    let max_vertex_uniform_vectors  =
      
      36347
    
    let max_varying_vectors  =
      
      36348
    
    let max_combined_texture_image_units  =
      
      35661
    
    let max_vertex_texture_image_units  =
      
      35660
    
    let max_texture_image_units  =
      
      34930
    
    let max_fragment_uniform_vectors  =
      
      36349
    
    let shader_type  =
      
      35663
    
    let delete_status  =
      
      35712
    
    let link_status  =
      
      35714
    
    let validate_status  =
      
      35715
    
    let attached_shaders  =
      
      35717
    
    let active_uniforms  =
      
      35718
    
    let active_attributes  =
      
      35721
    
    let shading_language_version  =
      
      35724
    
    let current_program  =
      
      35725
    
    let never  =
      
      512
    
    let less  =
      
      513
    
    let equal  =
      
      514
    
    let lequal  =
      
      515
    
    let greater  =
      
      516
    
    let notequal  =
      
      517
    
    let gequal  =
      
      518
    
    let always  =
      
      519
    
    let keep  =
      
      7680
    
    let replace  =
      
      7681
    
    let incr  =
      
      7682
    
    let decr  =
      
      7683
    
    let invert  =
      
      5386
    
    let incr_wrap  =
      
      34055
    
    let decr_wrap  =
      
      34056
    
    let vendor  =
      
      7936
    
    let renderer  =
      
      7937
    
    let version  =
      
      7938
    
    let nearest  =
      
      9728
    
    let linear  =
      
      9729
    
    let nearest_mipmap_nearest  =
      
      9984
    
    let linear_mipmap_nearest  =
      
      9985
    
    let nearest_mipmap_linear  =
      
      9986
    
    let linear_mipmap_linear  =
      
      9987
    
    let texture_mag_filter  =
      
      10240
    
    let texture_min_filter  =
      
      10241
    
    let texture_wrap_s  =
      
      10242
    
    let texture_wrap_t  =
      
      10243
    
    let texture_2d  =
      
      3553
    
    let texture  =
      
      5890
    
    let texture_cube_map  =
      
      34067
    
    let texture_binding_cube_map  =
      
      34068
    
    let texture_cube_map_positive_x  =
      
      34069
    
    let texture_cube_map_negative_x  =
      
      34070
    
    let texture_cube_map_positive_y  =
      
      34071
    
    let texture_cube_map_negative_y  =
      
      34072
    
    let texture_cube_map_positive_z  =
      
      34073
    
    let texture_cube_map_negative_z  =
      
      34074
    
    let max_cube_map_texture_size  =
      
      34076
    
    let texture0  =
      
      33984
    
    let texture1  =
      
      33985
    
    let texture2  =
      
      33986
    
    let texture3  =
      
      33987
    
    let texture4  =
      
      33988
    
    let texture5  =
      
      33989
    
    let texture6  =
      
      33990
    
    let texture7  =
      
      33991
    
    let texture8  =
      
      33992
    
    let texture9  =
      
      33993
    
    let texture10  =
      
      33994
    
    let texture11  =
      
      33995
    
    let texture12  =
      
      33996
    
    let texture13  =
      
      33997
    
    let texture14  =
      
      33998
    
    let texture15  =
      
      33999
    
    let texture16  =
      
      34000
    
    let texture17  =
      
      34001
    
    let texture18  =
      
      34002
    
    let texture19  =
      
      34003
    
    let texture20  =
      
      34004
    
    let texture21  =
      
      34005
    
    let texture22  =
      
      34006
    
    let texture23  =
      
      34007
    
    let texture24  =
      
      34008
    
    let texture25  =
      
      34009
    
    let texture26  =
      
      34010
    
    let texture27  =
      
      34011
    
    let texture28  =
      
      34012
    
    let texture29  =
      
      34013
    
    let texture30  =
      
      34014
    
    let texture31  =
      
      34015
    
    let active_texture  =
      
      34016
    
    let repeat  =
      
      10497
    
    let clamp_to_edge  =
      
      33071
    
    let mirrored_repeat  =
      
      33648
    
    let float_vec2  =
      
      35664
    
    let float_vec3  =
      
      35665
    
    let float_vec4  =
      
      35666
    
    let int_vec2  =
      
      35667
    
    let int_vec3  =
      
      35668
    
    let int_vec4  =
      
      35669
    
    let bool  =
      
      35670
    
    let bool_vec2  =
      
      35671
    
    let bool_vec3  =
      
      35672
    
    let bool_vec4  =
      
      35673
    
    let float_mat2  =
      
      35674
    
    let float_mat3  =
      
      35675
    
    let float_mat4  =
      
      35676
    
    let sampler_2d  =
      
      35678
    
    let sampler_cube  =
      
      35680
    
    let vertex_attrib_array_enabled  =
      
      34338
    
    let vertex_attrib_array_size  =
      
      34339
    
    let vertex_attrib_array_stride  =
      
      34340
    
    let vertex_attrib_array_type  =
      
      34341
    
    let vertex_attrib_array_normalized  =
      
      34922
    
    let vertex_attrib_array_pointer  =
      
      34373
    
    let vertex_attrib_array_buffer_binding  =
      
      34975
    
    let implementation_color_read_type  =
      
      35738
    
    let implementation_color_read_format  =
      
      35739
    
    let compile_status  =
      
      35713
    
    let low_float  =
      
      36336
    
    let medium_float  =
      
      36337
    
    let high_float  =
      
      36338
    
    let low_int  =
      
      36339
    
    let medium_int  =
      
      36340
    
    let high_int  =
      
      36341
    
    let framebuffer  =
      
      36160
    
    let renderbuffer  =
      
      36161
    
    let rgba4  =
      
      32854
    
    let rgb5_a1  =
      
      32855
    
    let rgb565  =
      
      36194
    
    let depth_component16  =
      
      33189
    
    let stencil_index  =
      
      6401
    
    let stencil_index8  =
      
      36168
    
    let depth_stencil  =
      
      34041
    
    let renderbuffer_width  =
      
      36162
    
    let renderbuffer_height  =
      
      36163
    
    let renderbuffer_internal_format  =
      
      36164
    
    let renderbuffer_red_size  =
      
      36176
    
    let renderbuffer_green_size  =
      
      36177
    
    let renderbuffer_blue_size  =
      
      36178
    
    let renderbuffer_alpha_size  =
      
      36179
    
    let renderbuffer_depth_size  =
      
      36180
    
    let renderbuffer_stencil_size  =
      
      36181
    
    let framebuffer_attachment_object_type  =
      
      36048
    
    let framebuffer_attachment_object_name  =
      
      36049
    
    let framebuffer_attachment_texture_level  =
      
      36050
    
    let framebuffer_attachment_texture_cube_map_face  =
      
      36051
    
    let color_attachment0  =
      
      36064
    
    let depth_attachment  =
      
      36096
    
    let stencil_attachment  =
      
      36128
    
    let depth_stencil_attachment  =
      
      33306
    
    let none  =
      
      0
    
    let framebuffer_complete  =
      
      36053
    
    let framebuffer_incomplete_attachment  =
      
      36054
    
    let framebuffer_incomplete_missing_attachment  =
      
      36055
    
    let framebuffer_incomplete_dimensions  =
      
      36057
    
    let framebuffer_unsupported  =
      
      36061
    
    let framebuffer_binding  =
      
      36006
    
    let renderbuffer_binding  =
      
      36007
    
    let max_renderbuffer_size  =
      
      34024
    
    let invalid_framebuffer_operation  =
      
      1286
    
    let unpack_flip_y_webgl  =
      
      37440
    
    let unpack_premultiply_alpha_webgl  =
      
      37441
    
    let context_lost_webgl  =
      
      37442
    
    let unpack_colorspace_conversion_webgl  =
      
      37443
    
    let browser_default_webgl  =
      
      37444
    
    let bufferData ~webGLRenderingContext ~target ~data ~usage =
      let conv_data = function
        | `Any_Null (x: 'a68 Js.null) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let data = conv_data data in
      let return = bufferData ~webGLRenderingContext ~target ~data ~usage in
      return
    
    let texImage2D ~webGLRenderingContext ~target ~level ~internalformat ~format ~type_ ~source =
      let conv_source = function
        | `ImageData (x: (_) imageData_like) -> Obj.magic x
        | `HTMLImageElement (x: (_) hTMLImageElement_like) -> Obj.magic x
        | `HTMLCanvasElement (x: (_) hTMLCanvasElement_like) -> Obj.magic x
        | `HTMLVideoElement (x: (_) hTMLVideoElement_like) -> Obj.magic x
         in
      let conv_source = access_null conv_source in
      let source = conv_source source in
      let return = texImage2D ~webGLRenderingContext ~target ~level ~internalformat ~format ~type_ ~source in
      return
    
    let texSubImage2D ~webGLRenderingContext ~target ~level ~xoffset ~yoffset ~format ~type_ ~source =
      let conv_source = function
        | `ImageData (x: (_) imageData_like) -> Obj.magic x
        | `HTMLImageElement (x: (_) hTMLImageElement_like) -> Obj.magic x
        | `HTMLCanvasElement (x: (_) hTMLCanvasElement_like) -> Obj.magic x
        | `HTMLVideoElement (x: (_) hTMLVideoElement_like) -> Obj.magic x
         in
      let conv_source = access_null conv_source in
      let source = conv_source source in
      let return = texSubImage2D ~webGLRenderingContext ~target ~level ~xoffset ~yoffset ~format ~type_ ~source in
      return
    
end
 module Location = struct
    
    
    external href : location:(_) location_like -> string = "href" [@@bs.get] 
    external setHref : location:(_) location_like -> href:string -> unit = "href" [@@bs.set]
    external origin : location:(_) location_like -> string = "origin" [@@bs.get] 
    external protocol : location:(_) location_like -> string = "protocol" [@@bs.get] 
    external setProtocol : location:(_) location_like -> protocol:string -> unit = "protocol" [@@bs.set]
    external host : location:(_) location_like -> string = "host" [@@bs.get] 
    external setHost : location:(_) location_like -> host:string -> unit = "host" [@@bs.set]
    external hostname : location:(_) location_like -> string = "hostname" [@@bs.get] 
    external setHostname : location:(_) location_like -> hostname:string -> unit = "hostname" [@@bs.set]
    external port : location:(_) location_like -> string = "port" [@@bs.get] 
    external setPort : location:(_) location_like -> port:string -> unit = "port" [@@bs.set]
    external pathname : location:(_) location_like -> string = "pathname" [@@bs.get] 
    external setPathname : location:(_) location_like -> pathname:string -> unit = "pathname" [@@bs.set]
    external search : location:(_) location_like -> string = "search" [@@bs.get] 
    external setSearch : location:(_) location_like -> search:string -> unit = "search" [@@bs.set]
    external hash : location:(_) location_like -> string = "hash" [@@bs.get] 
    external setHash : location:(_) location_like -> hash:string -> unit = "hash" [@@bs.set]
    external assign : location:(_) location_like -> url:string -> unit = "assign" [@@bs.send] 
    external reload : location:(_) location_like -> unit = "reload" [@@bs.send] 
    external replace : location:(_) location_like -> url:string -> unit = "replace" [@@bs.send] 
    external toString : location:(_) location_like -> string = "toString" [@@bs.send] 
    
    
end
 module Body = struct
    
    
    external bodyUsed : body:(_) body_like -> bool = "bodyUsed" [@@bs.get] 
    external blob : body:(_) body_like -> blob Js.Promise.t = "blob" [@@bs.send] 
    external formData : body:(_) body_like -> formData Js.Promise.t = "formData" [@@bs.send] 
    external json : body:(_) body_like -> 'a69 Js.Promise.t = "json" [@@bs.send] 
    external text : body:(_) body_like -> string Js.Promise.t = "text" [@@bs.send] 
    
    
end
 module History = struct
    
    
    external length : history:(_) history_like -> int = "length" [@@bs.get] 
    external back : history:(_) history_like -> unit = "back" [@@bs.send] 
    external forward : history:(_) history_like -> unit = "forward" [@@bs.send] 
    external go : history:(_) history_like -> ?delta:int Js.undefined -> unit = "go" [@@bs.send] 
    
    let go ~history ?delta () =
      let conv_delta = Js_undefined.from_opt in
      let delta = conv_delta delta in
      go ~history ~delta
    
end
 module NodeList = struct
    
    
    external length : nodeList:(_) nodeList_like -> int = "length" [@@bs.get] 
    external item : nodeList:(_) nodeList_like -> index:int -> node option = "item" [@@bs.send] [@@bs.return null_to_opt]
    
    
end
 module BluetoothDeviceEventHandlers = struct
    
    
    external ongattserverdisconnected : bluetoothDeviceEventHandlers:(_) bluetoothDeviceEventHandlers_like -> (event -> 'a70 [@bs]) option = "ongattserverdisconnected" [@@bs.get] [@@bs.return null_to_opt]
    external setOngattserverdisconnected : bluetoothDeviceEventHandlers:(_) bluetoothDeviceEventHandlers_like -> ongattserverdisconnected:(event -> 'a71 [@bs]) Js.null -> unit = "ongattserverdisconnected" [@@bs.set]
    
    
end
 module Screen = struct
    
    
    external colorDepth : screen:(_) screen_like -> int = "colorDepth" [@@bs.get] 
    external pixelDepth : screen:(_) screen_like -> int = "pixelDepth" [@@bs.get] 
    
    
end
 module PluginArray = struct
    
    
    external length : pluginArray:(_) pluginArray_like -> int = "length" [@@bs.get] 
    external item : pluginArray:(_) pluginArray_like -> index:int -> plugin option = "item" [@@bs.send] [@@bs.return null_to_opt]
    external namedItem : pluginArray:(_) pluginArray_like -> name:string -> plugin option = "namedItem" [@@bs.send] [@@bs.return null_to_opt]
    external refresh : pluginArray:(_) pluginArray_like -> ?reload:Js.boolean Js.undefined -> unit = "refresh" [@@bs.send] 
    
    let refresh ~pluginArray ?reload () =
      let conv_reload = Js_undefined.from_opt in
      let reload = conv_reload reload in
      refresh ~pluginArray ~reload
    
end
 module BluetoothCharacteristicProperties = struct
    
    
    external broadcast : bluetoothCharacteristicProperties:(_) bluetoothCharacteristicProperties_like -> bool = "broadcast" [@@bs.get] 
    external read : bluetoothCharacteristicProperties:(_) bluetoothCharacteristicProperties_like -> bool = "read" [@@bs.get] 
    external writeWithoutResponse : bluetoothCharacteristicProperties:(_) bluetoothCharacteristicProperties_like -> bool = "writeWithoutResponse" [@@bs.get] 
    external write : bluetoothCharacteristicProperties:(_) bluetoothCharacteristicProperties_like -> bool = "write" [@@bs.get] 
    external notify : bluetoothCharacteristicProperties:(_) bluetoothCharacteristicProperties_like -> bool = "notify" [@@bs.get] 
    external indicate : bluetoothCharacteristicProperties:(_) bluetoothCharacteristicProperties_like -> bool = "indicate" [@@bs.get] 
    external authenticatedSignedWrites : bluetoothCharacteristicProperties:(_) bluetoothCharacteristicProperties_like -> bool = "authenticatedSignedWrites" [@@bs.get] 
    external reliableWrite : bluetoothCharacteristicProperties:(_) bluetoothCharacteristicProperties_like -> bool = "reliableWrite" [@@bs.get] 
    external writableAuxiliaries : bluetoothCharacteristicProperties:(_) bluetoothCharacteristicProperties_like -> bool = "writableAuxiliaries" [@@bs.get] 
    
    
end
 module DOMRectReadOnly = struct
    
    
    external x : dOMRectReadOnly:(_) dOMRectReadOnly_like -> float = "x" [@@bs.get] 
    external y : dOMRectReadOnly:(_) dOMRectReadOnly_like -> float = "y" [@@bs.get] 
    external width : dOMRectReadOnly:(_) dOMRectReadOnly_like -> float = "width" [@@bs.get] 
    external height : dOMRectReadOnly:(_) dOMRectReadOnly_like -> float = "height" [@@bs.get] 
    external top : dOMRectReadOnly:(_) dOMRectReadOnly_like -> float = "top" [@@bs.get] 
    external right : dOMRectReadOnly:(_) dOMRectReadOnly_like -> float = "right" [@@bs.get] 
    external bottom : dOMRectReadOnly:(_) dOMRectReadOnly_like -> float = "bottom" [@@bs.get] 
    external left : dOMRectReadOnly:(_) dOMRectReadOnly_like -> float = "left" [@@bs.get] 
    
    
end
 module BluetoothRemoteGATTDescriptor = struct
    
    
    external characteristic : bluetoothRemoteGATTDescriptor:(_) bluetoothRemoteGATTDescriptor_like -> bluetoothRemoteGATTCharacteristic = "characteristic" [@@bs.get] 
    external uuid : bluetoothRemoteGATTDescriptor:(_) bluetoothRemoteGATTDescriptor_like -> string = "uuid" [@@bs.get] 
    external value : bluetoothRemoteGATTDescriptor:(_) bluetoothRemoteGATTDescriptor_like -> string option = "value" [@@bs.get] [@@bs.return null_to_opt]
    external readValue : bluetoothRemoteGATTDescriptor:(_) bluetoothRemoteGATTDescriptor_like -> string Js.Promise.t = "readValue" [@@bs.send] 
    external writeValue : bluetoothRemoteGATTDescriptor:(_) bluetoothRemoteGATTDescriptor_like -> value:int array -> unit Js.Promise.t = "writeValue" [@@bs.send] 
    
    
end
 module ChildNode = struct
    
    
    external after : childNode:(_) childNode_like -> ((_) childNode_like, unit, ('a72)) variadic_func = "after" [@@bs.get]
    external before : childNode:(_) childNode_like -> ((_) childNode_like, unit, ('a73)) variadic_func = "before" [@@bs.get]
    external remove : childNode:(_) childNode_like -> unit = "remove" [@@bs.send] 
    external replaceWith : childNode:(_) childNode_like -> ((_) childNode_like, unit, ('a74)) variadic_func = "replaceWith" [@@bs.get]
    
    let after ~childNode ~nodes =
      let func = after childNode in
      let args = to_arg nodes in
      apply func childNode args
    
    let after ~childNode ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = after ~childNode ~nodes in
      return
    
    let before ~childNode ~nodes =
      let func = before childNode in
      let args = to_arg nodes in
      apply func childNode args
    
    let before ~childNode ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = before ~childNode ~nodes in
      return
    
    let replaceWith ~childNode ~nodes =
      let func = replaceWith childNode in
      let args = to_arg nodes in
      apply func childNode args
    
    let replaceWith ~childNode ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = replaceWith ~childNode ~nodes in
      return
    
end
 module NonDocumentTypeChildNode = struct
    
    
    external previousElementSibling : nonDocumentTypeChildNode:(_) nonDocumentTypeChildNode_like -> element option = "previousElementSibling" [@@bs.get] [@@bs.return null_to_opt]
    external nextElementSibling : nonDocumentTypeChildNode:(_) nonDocumentTypeChildNode_like -> element option = "nextElementSibling" [@@bs.get] [@@bs.return null_to_opt]
    
    
end
 module DOMParser = struct
    
    
    external parseFromString : dOMParser:(_) dOMParser_like -> str:string -> type_:string -> document = "parseFromString" [@@bs.send] 
    
    let parseFromString ~dOMParser ~str ~type_ =
      let conv_type = function
        | `text_html -> "text/html"
        | `text_xml -> "text/xml"
        | `application_xml -> "application/xml"
        | `application_xhtml_xml -> "application/xhtml+xml"
         in
      let type_ = conv_type type_ in
      let return = parseFromString ~dOMParser ~str ~type_ in
      return
    
end
 module URL = struct
    
    
    external href : uRL:(_) uRL_like -> string = "href" [@@bs.get] 
    external setHref : uRL:(_) uRL_like -> href:string -> unit = "href" [@@bs.set]
    external origin : uRL:(_) uRL_like -> string = "origin" [@@bs.get] 
    external protocol : uRL:(_) uRL_like -> string = "protocol" [@@bs.get] 
    external setProtocol : uRL:(_) uRL_like -> protocol:string -> unit = "protocol" [@@bs.set]
    external username : uRL:(_) uRL_like -> string = "username" [@@bs.get] 
    external setUsername : uRL:(_) uRL_like -> username:string -> unit = "username" [@@bs.set]
    external password : uRL:(_) uRL_like -> string = "password" [@@bs.get] 
    external setPassword : uRL:(_) uRL_like -> password:string -> unit = "password" [@@bs.set]
    external host : uRL:(_) uRL_like -> string = "host" [@@bs.get] 
    external setHost : uRL:(_) uRL_like -> host:string -> unit = "host" [@@bs.set]
    external hostname : uRL:(_) uRL_like -> string = "hostname" [@@bs.get] 
    external setHostname : uRL:(_) uRL_like -> hostname:string -> unit = "hostname" [@@bs.set]
    external port : uRL:(_) uRL_like -> string = "port" [@@bs.get] 
    external setPort : uRL:(_) uRL_like -> port:string -> unit = "port" [@@bs.set]
    external pathname : uRL:(_) uRL_like -> string = "pathname" [@@bs.get] 
    external setPathname : uRL:(_) uRL_like -> pathname:string -> unit = "pathname" [@@bs.set]
    external search : uRL:(_) uRL_like -> string = "search" [@@bs.get] 
    external setSearch : uRL:(_) uRL_like -> search:string -> unit = "search" [@@bs.set]
    external searchParams : uRL:(_) uRL_like -> uRLSearchParams = "searchParams" [@@bs.get] 
    external hash : uRL:(_) uRL_like -> string = "hash" [@@bs.get] 
    external setHash : uRL:(_) uRL_like -> hash:string -> unit = "hash" [@@bs.set]
    external createObjectURL : uRL:(_) uRL_like -> blob:(_) blob_like -> string = "createObjectURL" [@@bs.send] 
    external revokeObjectURL : uRL:(_) uRL_like -> url:string -> unit = "revokeObjectURL" [@@bs.send] 
    external toString : uRL:(_) uRL_like -> string = "toString" [@@bs.send] 
    
    
end
 module ElementCSSInlineStyle = struct
    
    
    external style : elementCSSInlineStyle:(_) elementCSSInlineStyle_like -> cSSStyleDeclaration = "style" [@@bs.get] 
    
    
end
 module FileList = struct
    
    
    external length : fileList:(_) fileList_like -> int = "length" [@@bs.get] 
    external item : fileList:(_) fileList_like -> index:int -> file option = "item" [@@bs.send] [@@bs.return null_to_opt]
    
    
end
 module WebGLObject = struct
    
    
    
    
    
end
 module BrowserElement = struct
    
    
    external getVisible : browserElement:(_) browserElement_like -> bool = "getVisible" [@@bs.send] 
    external goBack : browserElement:(_) browserElement_like -> unit = "goBack" [@@bs.send] 
    external goForward : browserElement:(_) browserElement_like -> unit = "goForward" [@@bs.send] 
    external reload : browserElement:(_) browserElement_like -> ?hardReload:Js.boolean Js.undefined -> unit = "reload" [@@bs.send] 
    external setVisible : browserElement:(_) browserElement_like -> visible:Js.boolean -> unit = "setVisible" [@@bs.send] 
    external stop : browserElement:(_) browserElement_like -> unit = "stop" [@@bs.send] 
    
    let reload ~browserElement ?hardReload () =
      let conv_hardReload = Js_undefined.from_opt in
      let hardReload = conv_hardReload hardReload in
      reload ~browserElement ~hardReload
    
end
 module BrowserElementCommon = struct
    
    
    external getVisible : browserElementCommon:(_) browserElementCommon_like -> bool = "getVisible" [@@bs.send] 
    external setVisible : browserElementCommon:(_) browserElementCommon_like -> visible:Js.boolean -> unit = "setVisible" [@@bs.send] 
    
    
end
 module BrowserElementPrivileged = struct
    
    
    external goBack : browserElementPrivileged:(_) browserElementPrivileged_like -> unit = "goBack" [@@bs.send] 
    external goForward : browserElementPrivileged:(_) browserElementPrivileged_like -> unit = "goForward" [@@bs.send] 
    external reload : browserElementPrivileged:(_) browserElementPrivileged_like -> ?hardReload:Js.boolean Js.undefined -> unit = "reload" [@@bs.send] 
    external stop : browserElementPrivileged:(_) browserElementPrivileged_like -> unit = "stop" [@@bs.send] 
    
    let reload ~browserElementPrivileged ?hardReload () =
      let conv_hardReload = Js_undefined.from_opt in
      let hardReload = conv_hardReload hardReload in
      reload ~browserElementPrivileged ~hardReload
    
end
 module WorkerNavigator = struct
    
    
    external language : workerNavigator:(_) workerNavigator_like -> string = "language" [@@bs.get] 
    external appCodeName : workerNavigator:(_) workerNavigator_like -> string = "appCodeName" [@@bs.get] 
    external appName : workerNavigator:(_) workerNavigator_like -> string = "appName" [@@bs.get] 
    external appVersion : workerNavigator:(_) workerNavigator_like -> string = "appVersion" [@@bs.get] 
    external platform : workerNavigator:(_) workerNavigator_like -> string = "platform" [@@bs.get] 
    external product : workerNavigator:(_) workerNavigator_like -> string = "product" [@@bs.get] 
    external userAgent : workerNavigator:(_) workerNavigator_like -> string = "userAgent" [@@bs.get] 
    external permissions : workerNavigator:(_) workerNavigator_like -> permissions = "permissions" [@@bs.get] 
    external taintEnabled : workerNavigator:(_) workerNavigator_like -> bool = "taintEnabled" [@@bs.send] 
    
    
end
 module StyleSheet = struct
    
    
    external type_ : styleSheet:(_) styleSheet_like -> string = "type_" [@@bs.get] 
    external href : styleSheet:(_) styleSheet_like -> string option = "href" [@@bs.get] [@@bs.return null_to_opt]
    external title : styleSheet:(_) styleSheet_like -> string option = "title" [@@bs.get] [@@bs.return null_to_opt]
    external disabled : styleSheet:(_) styleSheet_like -> bool = "disabled" [@@bs.get] 
    external setDisabled : styleSheet:(_) styleSheet_like -> disabled:Js.boolean -> unit = "disabled" [@@bs.set]
    
    
end
 module LinkStyle = struct
    
    
    external sheet : linkStyle:(_) linkStyle_like -> styleSheet option = "sheet" [@@bs.get] [@@bs.return null_to_opt]
    
    
end
 module HTMLCollection = struct
    
    
    external length : hTMLCollection:(_) hTMLCollection_like -> int = "length" [@@bs.get] 
    external item : hTMLCollection:(_) hTMLCollection_like -> index:int -> element option = "item" [@@bs.send] [@@bs.return null_to_opt]
    external namedItem : hTMLCollection:(_) hTMLCollection_like -> name:string -> element option = "namedItem" [@@bs.send] [@@bs.return null_to_opt]
    
    
end
 module PerformanceTiming = struct
    
    
    external navigationStart : performanceTiming:(_) performanceTiming_like -> int = "navigationStart" [@@bs.get] 
    external domLoading : performanceTiming:(_) performanceTiming_like -> int = "domLoading" [@@bs.get] 
    external domInteractive : performanceTiming:(_) performanceTiming_like -> int = "domInteractive" [@@bs.get] 
    external domContentLoadedEventStart : performanceTiming:(_) performanceTiming_like -> int = "domContentLoadedEventStart" [@@bs.get] 
    external domContentLoadedEventEnd : performanceTiming:(_) performanceTiming_like -> int = "domContentLoadedEventEnd" [@@bs.get] 
    external domComplete : performanceTiming:(_) performanceTiming_like -> int = "domComplete" [@@bs.get] 
    external loadEventStart : performanceTiming:(_) performanceTiming_like -> int = "loadEventStart" [@@bs.get] 
    external loadEventEnd : performanceTiming:(_) performanceTiming_like -> int = "loadEventEnd" [@@bs.get] 
    
    
end
 module Touch = struct
    
    
    external identifier : touch:(_) touch_like -> int = "identifier" [@@bs.get] 
    external target : touch:(_) touch_like -> eventTarget = "target" [@@bs.get] 
    external screenX : touch:(_) touch_like -> float = "screenX" [@@bs.get] 
    external screenY : touch:(_) touch_like -> float = "screenY" [@@bs.get] 
    external clientX : touch:(_) touch_like -> float = "clientX" [@@bs.get] 
    external clientY : touch:(_) touch_like -> float = "clientY" [@@bs.get] 
    external pageX : touch:(_) touch_like -> float = "pageX" [@@bs.get] 
    external pageY : touch:(_) touch_like -> float = "pageY" [@@bs.get] 
    
    
end
 module NonElementParentNode = struct
    
    
    external getElementById : nonElementParentNode:(_) nonElementParentNode_like -> elementId:string -> element option = "getElementById" [@@bs.send] [@@bs.return null_to_opt]
    
    
end
 module CSSRuleList = struct
    
    
    external length : cSSRuleList:(_) cSSRuleList_like -> int = "length" [@@bs.get] 
    external item : cSSRuleList:(_) cSSRuleList_like -> index:int -> cSSRule option = "item" [@@bs.send] [@@bs.return null_to_opt]
    
    
end
 module DissimilarOriginLocation = struct
    
    
    external href : dissimilarOriginLocation:(_) dissimilarOriginLocation_like -> string = "href" [@@bs.get] 
    external setHref : dissimilarOriginLocation:(_) dissimilarOriginLocation_like -> href:string -> unit = "href" [@@bs.set]
    external assign : dissimilarOriginLocation:(_) dissimilarOriginLocation_like -> url:string -> unit = "assign" [@@bs.send] 
    external reload : dissimilarOriginLocation:(_) dissimilarOriginLocation_like -> unit = "reload" [@@bs.send] 
    external replace : dissimilarOriginLocation:(_) dissimilarOriginLocation_like -> url:string -> unit = "replace" [@@bs.send] 
    external toString : dissimilarOriginLocation:(_) dissimilarOriginLocation_like -> string = "toString" [@@bs.send] 
    
    
end
 module DOMImplementation = struct
    
    
    external createDocument : dOMImplementation:(_) dOMImplementation_like -> namespace:string Js.null -> qualifiedName:string -> ?doctype:(_) documentType_like Js.null Js.undefined -> xMLDocument = "createDocument" [@@bs.send] 
    external createDocumentType : dOMImplementation:(_) dOMImplementation_like -> qualifiedName:string -> publicId:string -> systemId:string -> documentType = "createDocumentType" [@@bs.send] 
    external createHTMLDocument : dOMImplementation:(_) dOMImplementation_like -> ?title:string Js.undefined -> document = "createHTMLDocument" [@@bs.send] 
    external hasFeature : dOMImplementation:(_) dOMImplementation_like -> bool = "hasFeature" [@@bs.send] 
    
    let createDocument ~dOMImplementation ~namespace ~qualifiedName ?doctype () =
      let conv_doctype = Js_undefined.from_opt in
      let doctype = conv_doctype doctype in
      createDocument ~dOMImplementation ~namespace ~qualifiedName ~doctype
    
    let createHTMLDocument ~dOMImplementation ?title () =
      let conv_title = Js_undefined.from_opt in
      let title = conv_title title in
      createHTMLDocument ~dOMImplementation ~title
    
end
 module TestBinding = struct
    
    
    external booleanAttribute : testBinding:(_) testBinding_like -> bool = "booleanAttribute" [@@bs.get] 
    external setBooleanAttribute : testBinding:(_) testBinding_like -> booleanAttribute:Js.boolean -> unit = "booleanAttribute" [@@bs.set]
    external byteAttribute : testBinding:(_) testBinding_like -> int = "byteAttribute" [@@bs.get] 
    external setByteAttribute : testBinding:(_) testBinding_like -> byteAttribute:int -> unit = "byteAttribute" [@@bs.set]
    external octetAttribute : testBinding:(_) testBinding_like -> int = "octetAttribute" [@@bs.get] 
    external setOctetAttribute : testBinding:(_) testBinding_like -> octetAttribute:int -> unit = "octetAttribute" [@@bs.set]
    external shortAttribute : testBinding:(_) testBinding_like -> int = "shortAttribute" [@@bs.get] 
    external setShortAttribute : testBinding:(_) testBinding_like -> shortAttribute:int -> unit = "shortAttribute" [@@bs.set]
    external unsignedShortAttribute : testBinding:(_) testBinding_like -> int = "unsignedShortAttribute" [@@bs.get] 
    external setUnsignedShortAttribute : testBinding:(_) testBinding_like -> unsignedShortAttribute:int -> unit = "unsignedShortAttribute" [@@bs.set]
    external longAttribute : testBinding:(_) testBinding_like -> int = "longAttribute" [@@bs.get] 
    external setLongAttribute : testBinding:(_) testBinding_like -> longAttribute:int -> unit = "longAttribute" [@@bs.set]
    external unsignedLongAttribute : testBinding:(_) testBinding_like -> int = "unsignedLongAttribute" [@@bs.get] 
    external setUnsignedLongAttribute : testBinding:(_) testBinding_like -> unsignedLongAttribute:int -> unit = "unsignedLongAttribute" [@@bs.set]
    external longLongAttribute : testBinding:(_) testBinding_like -> int = "longLongAttribute" [@@bs.get] 
    external setLongLongAttribute : testBinding:(_) testBinding_like -> longLongAttribute:int -> unit = "longLongAttribute" [@@bs.set]
    external unsignedLongLongAttribute : testBinding:(_) testBinding_like -> int = "unsignedLongLongAttribute" [@@bs.get] 
    external setUnsignedLongLongAttribute : testBinding:(_) testBinding_like -> unsignedLongLongAttribute:int -> unit = "unsignedLongLongAttribute" [@@bs.set]
    external unrestrictedFloatAttribute : testBinding:(_) testBinding_like -> float = "unrestrictedFloatAttribute" [@@bs.get] 
    external setUnrestrictedFloatAttribute : testBinding:(_) testBinding_like -> unrestrictedFloatAttribute:float -> unit = "unrestrictedFloatAttribute" [@@bs.set]
    external floatAttribute : testBinding:(_) testBinding_like -> float = "floatAttribute" [@@bs.get] 
    external setFloatAttribute : testBinding:(_) testBinding_like -> floatAttribute:float -> unit = "floatAttribute" [@@bs.set]
    external unrestrictedDoubleAttribute : testBinding:(_) testBinding_like -> float = "unrestrictedDoubleAttribute" [@@bs.get] 
    external setUnrestrictedDoubleAttribute : testBinding:(_) testBinding_like -> unrestrictedDoubleAttribute:float -> unit = "unrestrictedDoubleAttribute" [@@bs.set]
    external doubleAttribute : testBinding:(_) testBinding_like -> float = "doubleAttribute" [@@bs.get] 
    external setDoubleAttribute : testBinding:(_) testBinding_like -> doubleAttribute:float -> unit = "doubleAttribute" [@@bs.set]
    external stringAttribute : testBinding:(_) testBinding_like -> string = "stringAttribute" [@@bs.get] 
    external setStringAttribute : testBinding:(_) testBinding_like -> stringAttribute:string -> unit = "stringAttribute" [@@bs.set]
    external usvstringAttribute : testBinding:(_) testBinding_like -> string = "usvstringAttribute" [@@bs.get] 
    external setUsvstringAttribute : testBinding:(_) testBinding_like -> usvstringAttribute:string -> unit = "usvstringAttribute" [@@bs.set]
    external byteStringAttribute : testBinding:(_) testBinding_like -> string = "byteStringAttribute" [@@bs.get] 
    external setByteStringAttribute : testBinding:(_) testBinding_like -> byteStringAttribute:string -> unit = "byteStringAttribute" [@@bs.set]
    external enumAttribute : testBinding:(_) testBinding_like -> string = "enumAttribute" [@@bs.get] 
    external setEnumAttribute : testBinding:(_) testBinding_like -> enumAttribute:string -> unit = "enumAttribute" [@@bs.set]
    external interfaceAttribute : testBinding:(_) testBinding_like -> blob = "interfaceAttribute" [@@bs.get] 
    external setInterfaceAttribute : testBinding:(_) testBinding_like -> interfaceAttribute:blob -> unit = "interfaceAttribute" [@@bs.set]
    external unionAttribute : testBinding:(_) testBinding_like -> 'a75 = "unionAttribute" [@@bs.get] 
    external setUnionAttribute : testBinding:(_) testBinding_like -> unionAttribute:'a76 -> unit = "unionAttribute" [@@bs.set]
    external union2Attribute : testBinding:(_) testBinding_like -> 'a77 = "union2Attribute" [@@bs.get] 
    external setUnion2Attribute : testBinding:(_) testBinding_like -> union2Attribute:'a78 -> unit = "union2Attribute" [@@bs.set]
    external union3Attribute : testBinding:(_) testBinding_like -> 'a79 = "union3Attribute" [@@bs.get] 
    external setUnion3Attribute : testBinding:(_) testBinding_like -> union3Attribute:'a80 -> unit = "union3Attribute" [@@bs.set]
    external union4Attribute : testBinding:(_) testBinding_like -> 'a81 = "union4Attribute" [@@bs.get] 
    external setUnion4Attribute : testBinding:(_) testBinding_like -> union4Attribute:'a82 -> unit = "union4Attribute" [@@bs.set]
    external union5Attribute : testBinding:(_) testBinding_like -> 'a83 = "union5Attribute" [@@bs.get] 
    external setUnion5Attribute : testBinding:(_) testBinding_like -> union5Attribute:'a84 -> unit = "union5Attribute" [@@bs.set]
    external union6Attribute : testBinding:(_) testBinding_like -> 'a85 = "union6Attribute" [@@bs.get] 
    external setUnion6Attribute : testBinding:(_) testBinding_like -> union6Attribute:'a86 -> unit = "union6Attribute" [@@bs.set]
    external union7Attribute : testBinding:(_) testBinding_like -> 'a87 = "union7Attribute" [@@bs.get] 
    external setUnion7Attribute : testBinding:(_) testBinding_like -> union7Attribute:'a88 -> unit = "union7Attribute" [@@bs.set]
    external union8Attribute : testBinding:(_) testBinding_like -> 'a89 = "union8Attribute" [@@bs.get] 
    external setUnion8Attribute : testBinding:(_) testBinding_like -> union8Attribute:'a90 -> unit = "union8Attribute" [@@bs.set]
    external union9Attribute : testBinding:(_) testBinding_like -> 'a91 = "union9Attribute" [@@bs.get] 
    external setUnion9Attribute : testBinding:(_) testBinding_like -> union9Attribute:'a92 -> unit = "union9Attribute" [@@bs.set]
    external arrayAttribute : testBinding:(_) testBinding_like -> Js_typed_array.Uint8ClampedArray.t = "arrayAttribute" [@@bs.get] 
    external anyAttribute : testBinding:(_) testBinding_like -> 'a93 = "anyAttribute" [@@bs.get] 
    external setAnyAttribute : testBinding:(_) testBinding_like -> anyAttribute:'a94 -> unit = "anyAttribute" [@@bs.set]
    external objectAttribute : testBinding:(_) testBinding_like -> 'a95 = "objectAttribute" [@@bs.get] 
    external setObjectAttribute : testBinding:(_) testBinding_like -> objectAttribute:'a96 -> unit = "objectAttribute" [@@bs.set]
    external booleanAttributeNullable : testBinding:(_) testBinding_like -> Js.boolean option = "booleanAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setBooleanAttributeNullable : testBinding:(_) testBinding_like -> booleanAttributeNullable:Js.boolean Js.null -> unit = "booleanAttributeNullable" [@@bs.set]
    external byteAttributeNullable : testBinding:(_) testBinding_like -> int option = "byteAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setByteAttributeNullable : testBinding:(_) testBinding_like -> byteAttributeNullable:int Js.null -> unit = "byteAttributeNullable" [@@bs.set]
    external octetAttributeNullable : testBinding:(_) testBinding_like -> int option = "octetAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setOctetAttributeNullable : testBinding:(_) testBinding_like -> octetAttributeNullable:int Js.null -> unit = "octetAttributeNullable" [@@bs.set]
    external shortAttributeNullable : testBinding:(_) testBinding_like -> int option = "shortAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setShortAttributeNullable : testBinding:(_) testBinding_like -> shortAttributeNullable:int Js.null -> unit = "shortAttributeNullable" [@@bs.set]
    external unsignedShortAttributeNullable : testBinding:(_) testBinding_like -> int option = "unsignedShortAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setUnsignedShortAttributeNullable : testBinding:(_) testBinding_like -> unsignedShortAttributeNullable:int Js.null -> unit = "unsignedShortAttributeNullable" [@@bs.set]
    external longAttributeNullable : testBinding:(_) testBinding_like -> int option = "longAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setLongAttributeNullable : testBinding:(_) testBinding_like -> longAttributeNullable:int Js.null -> unit = "longAttributeNullable" [@@bs.set]
    external unsignedLongAttributeNullable : testBinding:(_) testBinding_like -> int option = "unsignedLongAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setUnsignedLongAttributeNullable : testBinding:(_) testBinding_like -> unsignedLongAttributeNullable:int Js.null -> unit = "unsignedLongAttributeNullable" [@@bs.set]
    external longLongAttributeNullable : testBinding:(_) testBinding_like -> int option = "longLongAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setLongLongAttributeNullable : testBinding:(_) testBinding_like -> longLongAttributeNullable:int Js.null -> unit = "longLongAttributeNullable" [@@bs.set]
    external unsignedLongLongAttributeNullable : testBinding:(_) testBinding_like -> int option = "unsignedLongLongAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setUnsignedLongLongAttributeNullable : testBinding:(_) testBinding_like -> unsignedLongLongAttributeNullable:int Js.null -> unit = "unsignedLongLongAttributeNullable" [@@bs.set]
    external unrestrictedFloatAttributeNullable : testBinding:(_) testBinding_like -> float option = "unrestrictedFloatAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setUnrestrictedFloatAttributeNullable : testBinding:(_) testBinding_like -> unrestrictedFloatAttributeNullable:float Js.null -> unit = "unrestrictedFloatAttributeNullable" [@@bs.set]
    external floatAttributeNullable : testBinding:(_) testBinding_like -> float option = "floatAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setFloatAttributeNullable : testBinding:(_) testBinding_like -> floatAttributeNullable:float Js.null -> unit = "floatAttributeNullable" [@@bs.set]
    external unrestrictedDoubleAttributeNullable : testBinding:(_) testBinding_like -> float option = "unrestrictedDoubleAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setUnrestrictedDoubleAttributeNullable : testBinding:(_) testBinding_like -> unrestrictedDoubleAttributeNullable:float Js.null -> unit = "unrestrictedDoubleAttributeNullable" [@@bs.set]
    external doubleAttributeNullable : testBinding:(_) testBinding_like -> float option = "doubleAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setDoubleAttributeNullable : testBinding:(_) testBinding_like -> doubleAttributeNullable:float Js.null -> unit = "doubleAttributeNullable" [@@bs.set]
    external stringAttributeNullable : testBinding:(_) testBinding_like -> string option = "stringAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setStringAttributeNullable : testBinding:(_) testBinding_like -> stringAttributeNullable:string Js.null -> unit = "stringAttributeNullable" [@@bs.set]
    external usvstringAttributeNullable : testBinding:(_) testBinding_like -> string option = "usvstringAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setUsvstringAttributeNullable : testBinding:(_) testBinding_like -> usvstringAttributeNullable:string Js.null -> unit = "usvstringAttributeNullable" [@@bs.set]
    external byteStringAttributeNullable : testBinding:(_) testBinding_like -> string option = "byteStringAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setByteStringAttributeNullable : testBinding:(_) testBinding_like -> byteStringAttributeNullable:string Js.null -> unit = "byteStringAttributeNullable" [@@bs.set]
    external enumAttributeNullable : testBinding:(_) testBinding_like -> string option = "enumAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external interfaceAttributeNullable : testBinding:(_) testBinding_like -> blob option = "interfaceAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setInterfaceAttributeNullable : testBinding:(_) testBinding_like -> interfaceAttributeNullable:blob Js.null -> unit = "interfaceAttributeNullable" [@@bs.set]
    external interfaceAttributeWeak : testBinding:(_) testBinding_like -> uRL option = "interfaceAttributeWeak" [@@bs.get] [@@bs.return null_to_opt]
    external setInterfaceAttributeWeak : testBinding:(_) testBinding_like -> interfaceAttributeWeak:uRL Js.null -> unit = "interfaceAttributeWeak" [@@bs.set]
    external objectAttributeNullable : testBinding:(_) testBinding_like -> 'a97 option = "objectAttributeNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setObjectAttributeNullable : testBinding:(_) testBinding_like -> objectAttributeNullable:'a98 Js.null -> unit = "objectAttributeNullable" [@@bs.set]
    external unionAttributeNullable : testBinding:(_) testBinding_like -> 'a99 = "unionAttributeNullable" [@@bs.get] 
    external setUnionAttributeNullable : testBinding:(_) testBinding_like -> unionAttributeNullable:'a100 -> unit = "unionAttributeNullable" [@@bs.set]
    external union2AttributeNullable : testBinding:(_) testBinding_like -> 'a101 = "union2AttributeNullable" [@@bs.get] 
    external setUnion2AttributeNullable : testBinding:(_) testBinding_like -> union2AttributeNullable:'a102 -> unit = "union2AttributeNullable" [@@bs.set]
    external union3AttributeNullable : testBinding:(_) testBinding_like -> 'a103 = "union3AttributeNullable" [@@bs.get] 
    external setUnion3AttributeNullable : testBinding:(_) testBinding_like -> union3AttributeNullable:'a104 -> unit = "union3AttributeNullable" [@@bs.set]
    external union4AttributeNullable : testBinding:(_) testBinding_like -> 'a105 = "union4AttributeNullable" [@@bs.get] 
    external setUnion4AttributeNullable : testBinding:(_) testBinding_like -> union4AttributeNullable:'a106 -> unit = "union4AttributeNullable" [@@bs.set]
    external union5AttributeNullable : testBinding:(_) testBinding_like -> 'a107 = "union5AttributeNullable" [@@bs.get] 
    external setUnion5AttributeNullable : testBinding:(_) testBinding_like -> union5AttributeNullable:'a108 -> unit = "union5AttributeNullable" [@@bs.set]
    external union6AttributeNullable : testBinding:(_) testBinding_like -> 'a109 = "union6AttributeNullable" [@@bs.get] 
    external setUnion6AttributeNullable : testBinding:(_) testBinding_like -> union6AttributeNullable:'a110 -> unit = "union6AttributeNullable" [@@bs.set]
    external attrToBinaryRename : testBinding:(_) testBinding_like -> string = "attrToBinaryRename" [@@bs.get] 
    external setAttrToBinaryRename : testBinding:(_) testBinding_like -> attrToBinaryRename:string -> unit = "attrToBinaryRename" [@@bs.set]
    external forwardedAttribute : testBinding:(_) testBinding_like -> testBinding = "forwardedAttribute" [@@bs.get] 
    external booleanAttributeStatic : testBinding:(_) testBinding_like -> bool = "booleanAttributeStatic" [@@bs.get] 
    external setBooleanAttributeStatic : testBinding:(_) testBinding_like -> booleanAttributeStatic:Js.boolean -> unit = "booleanAttributeStatic" [@@bs.set]
    external prefControlledAttributeDisabled : testBinding:(_) testBinding_like -> bool = "prefControlledAttributeDisabled" [@@bs.get] 
    external prefControlledStaticAttributeDisabled : testBinding:(_) testBinding_like -> bool = "prefControlledStaticAttributeDisabled" [@@bs.get] 
    external prefControlledAttributeEnabled : testBinding:(_) testBinding_like -> bool = "prefControlledAttributeEnabled" [@@bs.get] 
    external prefControlledStaticAttributeEnabled : testBinding:(_) testBinding_like -> bool = "prefControlledStaticAttributeEnabled" [@@bs.get] 
    external funcControlledAttributeDisabled : testBinding:(_) testBinding_like -> bool = "funcControlledAttributeDisabled" [@@bs.get] 
    external funcControlledStaticAttributeDisabled : testBinding:(_) testBinding_like -> bool = "funcControlledStaticAttributeDisabled" [@@bs.get] 
    external funcControlledAttributeEnabled : testBinding:(_) testBinding_like -> bool = "funcControlledAttributeEnabled" [@@bs.get] 
    external funcControlledStaticAttributeEnabled : testBinding:(_) testBinding_like -> bool = "funcControlledStaticAttributeEnabled" [@@bs.get] 
    external promiseAttribute : testBinding:(_) testBinding_like -> Js.boolean Js.Promise.t = "promiseAttribute" [@@bs.get] 
    external booleanMozPreference : testBinding:(_) testBinding_like -> pref_name:string -> bool = "BooleanMozPreference" [@@bs.send] 
    external stringMozPreference : testBinding:(_) testBinding_like -> pref_name:string -> string = "StringMozPreference" [@@bs.send] 
    external acceptPromise : testBinding:(_) testBinding_like -> string:string Js.Promise.t -> unit = "acceptPromise" [@@bs.send] 
    external advanceClock : testBinding:(_) testBinding_like -> millis:int -> ?forceLayoutTick:Js.boolean Js.undefined -> unit = "advanceClock" [@@bs.send] 
    external crashHard : testBinding:(_) testBinding_like -> unit = "crashHard" [@@bs.send] 
    external dictMatchesPassedValues : testBinding:(_) testBinding_like -> arg:(_) testDictionary_like -> bool = "dictMatchesPassedValues" [@@bs.send] 
    external entryGlobal : testBinding:(_) testBinding_like -> globalScope = "entryGlobal" [@@bs.send] 
    external funcControlledMethodDisabled : testBinding:(_) testBinding_like -> unit = "funcControlledMethodDisabled" [@@bs.send] 
    external funcControlledMethodEnabled : testBinding:(_) testBinding_like -> unit = "funcControlledMethodEnabled" [@@bs.send] 
    external funcControlledStaticMethodDisabled : testBinding:(_) testBinding_like -> unit = "funcControlledStaticMethodDisabled" [@@bs.send] 
    external funcControlledStaticMethodEnabled : testBinding:(_) testBinding_like -> unit = "funcControlledStaticMethodEnabled" [@@bs.send] 
    external incumbentGlobal : testBinding:(_) testBinding_like -> globalScope = "incumbentGlobal" [@@bs.send] 
    external methToBinaryRename : testBinding:(_) testBinding_like -> unit = "methToBinaryRename" [@@bs.send] 
    external panic : testBinding:(_) testBinding_like -> unit = "panic" [@@bs.send] 
    external passAny : testBinding:(_) testBinding_like -> arg:'a111 -> unit = "passAny" [@@bs.send] 
    external passBoolean : testBinding:(_) testBinding_like -> arg:Js.boolean -> unit = "passBoolean" [@@bs.send] 
    external passByte : testBinding:(_) testBinding_like -> arg:int -> unit = "passByte" [@@bs.send] 
    external passByteString : testBinding:(_) testBinding_like -> arg:string -> unit = "passByteString" [@@bs.send] 
    external passByteStringMozMap : testBinding:(_) testBinding_like -> arg:'a112 -> unit = "passByteStringMozMap" [@@bs.send] 
    external passCallbackFunction : testBinding:(_) testBinding_like -> fun_:('a113 -> 'a114 [@bs]) -> unit = "passCallbackFunction" [@@bs.send] 
    external passCallbackInterface : testBinding:(_) testBinding_like -> listener:(_) eventListener_like -> unit = "passCallbackInterface" [@@bs.send] 
    external passCastableObjectMozMap : testBinding:(_) testBinding_like -> arg:'a115 -> unit = "passCastableObjectMozMap" [@@bs.send] 
    external passCastableObjectNullableMozMap : testBinding:(_) testBinding_like -> arg:'a116 Js.null -> unit = "passCastableObjectNullableMozMap" [@@bs.send] 
    external passDouble : testBinding:(_) testBinding_like -> arg:float -> unit = "passDouble" [@@bs.send] 
    external passEnum : testBinding:(_) testBinding_like -> arg:string -> unit = "passEnum" [@@bs.send] 
    external passFloat : testBinding:(_) testBinding_like -> arg:float -> unit = "passFloat" [@@bs.send] 
    external passInterface : testBinding:(_) testBinding_like -> arg:(_) blob_like -> unit = "passInterface" [@@bs.send] 
    external passInterfaceSequence : testBinding:(_) testBinding_like -> seq:(_) blob_like array -> unit = "passInterfaceSequence" [@@bs.send] 
    external passLong : testBinding:(_) testBinding_like -> arg:int -> unit = "passLong" [@@bs.send] 
    external passLongLong : testBinding:(_) testBinding_like -> arg:int -> unit = "passLongLong" [@@bs.send] 
    external passMozMap : testBinding:(_) testBinding_like -> arg:'a117 -> unit = "passMozMap" [@@bs.send] 
    external passMozMapOfMozMaps : testBinding:(_) testBinding_like -> arg:'a118 -> unit = "passMozMapOfMozMaps" [@@bs.send] 
    external passMozMapOfNullableInts : testBinding:(_) testBinding_like -> arg:'a119 -> unit = "passMozMapOfNullableInts" [@@bs.send] 
    external passMozMapUnion : testBinding:(_) testBinding_like -> init:'a120 -> unit = "passMozMapUnion" [@@bs.send] 
    external passMozMapUnion2 : testBinding:(_) testBinding_like -> init:'a121 -> unit = "passMozMapUnion2" [@@bs.send] 
    external passMozMapUnion3 : testBinding:(_) testBinding_like -> init:'a122 -> unit = "passMozMapUnion3" [@@bs.send] 
    external passNullableBoolean : testBinding:(_) testBinding_like -> arg:Js.boolean Js.null -> unit = "passNullableBoolean" [@@bs.send] 
    external passNullableByte : testBinding:(_) testBinding_like -> arg:int Js.null -> unit = "passNullableByte" [@@bs.send] 
    external passNullableByteString : testBinding:(_) testBinding_like -> arg:string Js.null -> unit = "passNullableByteString" [@@bs.send] 
    external passNullableCallbackFunction : testBinding:(_) testBinding_like -> fun_:('a123 -> 'a124 [@bs]) Js.null -> unit = "passNullableCallbackFunction" [@@bs.send] 
    external passNullableCallbackInterface : testBinding:(_) testBinding_like -> listener:(_) eventListener_like Js.null -> unit = "passNullableCallbackInterface" [@@bs.send] 
    external passNullableCastableObjectMozMap : testBinding:(_) testBinding_like -> arg:'a125 -> unit = "passNullableCastableObjectMozMap" [@@bs.send] 
    external passNullableCastableObjectNullableMozMap : testBinding:(_) testBinding_like -> arg:'a126 Js.null -> unit = "passNullableCastableObjectNullableMozMap" [@@bs.send] 
    external passNullableDouble : testBinding:(_) testBinding_like -> arg:float Js.null -> unit = "passNullableDouble" [@@bs.send] 
    external passNullableFloat : testBinding:(_) testBinding_like -> arg:float Js.null -> unit = "passNullableFloat" [@@bs.send] 
    external passNullableInterface : testBinding:(_) testBinding_like -> arg:(_) blob_like Js.null -> unit = "passNullableInterface" [@@bs.send] 
    external passNullableLong : testBinding:(_) testBinding_like -> arg:int Js.null -> unit = "passNullableLong" [@@bs.send] 
    external passNullableLongLong : testBinding:(_) testBinding_like -> arg:int Js.null -> unit = "passNullableLongLong" [@@bs.send] 
    external passNullableMozMap : testBinding:(_) testBinding_like -> arg:'a127 Js.null -> unit = "passNullableMozMap" [@@bs.send] 
    external passNullableObject : testBinding:(_) testBinding_like -> arg:'a128 Js.null -> unit = "passNullableObject" [@@bs.send] 
    external passNullableOctet : testBinding:(_) testBinding_like -> arg:int Js.null -> unit = "passNullableOctet" [@@bs.send] 
    external passNullableSequence : testBinding:(_) testBinding_like -> seq:int array Js.null -> unit = "passNullableSequence" [@@bs.send] 
    external passNullableShort : testBinding:(_) testBinding_like -> arg:int Js.null -> unit = "passNullableShort" [@@bs.send] 
    external passNullableString : testBinding:(_) testBinding_like -> arg:string Js.null -> unit = "passNullableString" [@@bs.send] 
    external passNullableUnion : testBinding:(_) testBinding_like -> arg:'a129 -> unit = "passNullableUnion" [@@bs.send] 
    external passNullableUnion2 : testBinding:(_) testBinding_like -> data:'a130 -> unit = "passNullableUnion2" [@@bs.send] 
    external passNullableUnion3 : testBinding:(_) testBinding_like -> data:'a131 -> unit = "passNullableUnion3" [@@bs.send] 
    external passNullableUnion4 : testBinding:(_) testBinding_like -> bool:'a132 -> unit = "passNullableUnion4" [@@bs.send] 
    external passNullableUnion5 : testBinding:(_) testBinding_like -> arg:'a133 -> unit = "passNullableUnion5" [@@bs.send] 
    external passNullableUnion6 : testBinding:(_) testBinding_like -> arg:'a134 -> unit = "passNullableUnion6" [@@bs.send] 
    external passNullableUnrestrictedDouble : testBinding:(_) testBinding_like -> arg:float Js.null -> unit = "passNullableUnrestrictedDouble" [@@bs.send] 
    external passNullableUnrestrictedFloat : testBinding:(_) testBinding_like -> arg:float Js.null -> unit = "passNullableUnrestrictedFloat" [@@bs.send] 
    external passNullableUnsignedLong : testBinding:(_) testBinding_like -> arg:int Js.null -> unit = "passNullableUnsignedLong" [@@bs.send] 
    external passNullableUnsignedLongLong : testBinding:(_) testBinding_like -> arg:int Js.null -> unit = "passNullableUnsignedLongLong" [@@bs.send] 
    external passNullableUnsignedShort : testBinding:(_) testBinding_like -> arg:int Js.null -> unit = "passNullableUnsignedShort" [@@bs.send] 
    external passNullableUsvstring : testBinding:(_) testBinding_like -> arg:string Js.null -> unit = "passNullableUsvstring" [@@bs.send] 
    external passObject : testBinding:(_) testBinding_like -> arg:'a135 -> unit = "passObject" [@@bs.send] 
    external passOctet : testBinding:(_) testBinding_like -> arg:int -> unit = "passOctet" [@@bs.send] 
    external passOptionalAny : testBinding:(_) testBinding_like -> ?arg:'a136 Js.undefined -> unit = "passOptionalAny" [@@bs.send] 
    external passOptionalAnyWithDefault : testBinding:(_) testBinding_like -> ?arg:'a137 Js.undefined -> unit = "passOptionalAnyWithDefault" [@@bs.send] 
    external passOptionalBoolean : testBinding:(_) testBinding_like -> ?arg:Js.boolean Js.undefined -> unit = "passOptionalBoolean" [@@bs.send] 
    external passOptionalBooleanWithDefault : testBinding:(_) testBinding_like -> ?arg:Js.boolean Js.undefined -> unit = "passOptionalBooleanWithDefault" [@@bs.send] 
    external passOptionalByte : testBinding:(_) testBinding_like -> ?arg:int Js.undefined -> unit = "passOptionalByte" [@@bs.send] 
    external passOptionalByteString : testBinding:(_) testBinding_like -> ?arg:string Js.undefined -> unit = "passOptionalByteString" [@@bs.send] 
    external passOptionalByteWithDefault : testBinding:(_) testBinding_like -> ?arg:int Js.undefined -> unit = "passOptionalByteWithDefault" [@@bs.send] 
    external passOptionalBytestringWithDefault : testBinding:(_) testBinding_like -> ?arg:string Js.undefined -> unit = "passOptionalBytestringWithDefault" [@@bs.send] 
    external passOptionalCallbackFunction : testBinding:(_) testBinding_like -> ?fun_:('a138 -> 'a139 [@bs]) Js.undefined -> unit = "passOptionalCallbackFunction" [@@bs.send] 
    external passOptionalCallbackInterface : testBinding:(_) testBinding_like -> ?listener:(_) eventListener_like Js.undefined -> unit = "passOptionalCallbackInterface" [@@bs.send] 
    external passOptionalDouble : testBinding:(_) testBinding_like -> ?arg:float Js.undefined -> unit = "passOptionalDouble" [@@bs.send] 
    external passOptionalEnum : testBinding:(_) testBinding_like -> ?arg:string Js.undefined -> unit = "passOptionalEnum" [@@bs.send] 
    external passOptionalEnumWithDefault : testBinding:(_) testBinding_like -> ?arg:string Js.undefined -> unit = "passOptionalEnumWithDefault" [@@bs.send] 
    external passOptionalFloat : testBinding:(_) testBinding_like -> ?arg:float Js.undefined -> unit = "passOptionalFloat" [@@bs.send] 
    external passOptionalInterface : testBinding:(_) testBinding_like -> ?arg:(_) blob_like Js.undefined -> unit = "passOptionalInterface" [@@bs.send] 
    external passOptionalLong : testBinding:(_) testBinding_like -> ?arg:int Js.undefined -> unit = "passOptionalLong" [@@bs.send] 
    external passOptionalLongLong : testBinding:(_) testBinding_like -> ?arg:int Js.undefined -> unit = "passOptionalLongLong" [@@bs.send] 
    external passOptionalLongLongWithDefault : testBinding:(_) testBinding_like -> ?arg:int Js.undefined -> unit = "passOptionalLongLongWithDefault" [@@bs.send] 
    external passOptionalLongWithDefault : testBinding:(_) testBinding_like -> ?arg:int Js.undefined -> unit = "passOptionalLongWithDefault" [@@bs.send] 
    external passOptionalMozMap : testBinding:(_) testBinding_like -> ?arg:'a140 Js.undefined -> unit = "passOptionalMozMap" [@@bs.send] 
    external passOptionalMozMapOfNullableInts : testBinding:(_) testBinding_like -> ?arg:'a141 Js.undefined -> unit = "passOptionalMozMapOfNullableInts" [@@bs.send] 
    external passOptionalNullableBoolean : testBinding:(_) testBinding_like -> ?arg:Js.boolean Js.null Js.undefined -> unit = "passOptionalNullableBoolean" [@@bs.send] 
    external passOptionalNullableBooleanWithDefault : testBinding:(_) testBinding_like -> ?arg:Js.boolean Js.null Js.undefined -> unit = "passOptionalNullableBooleanWithDefault" [@@bs.send] 
    external passOptionalNullableBooleanWithNonNullDefault : testBinding:(_) testBinding_like -> ?arg:Js.boolean Js.null Js.undefined -> unit = "passOptionalNullableBooleanWithNonNullDefault" [@@bs.send] 
    external passOptionalNullableByte : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableByte" [@@bs.send] 
    external passOptionalNullableByteString : testBinding:(_) testBinding_like -> ?arg:string Js.null Js.undefined -> unit = "passOptionalNullableByteString" [@@bs.send] 
    external passOptionalNullableByteStringWithDefault : testBinding:(_) testBinding_like -> ?arg:string Js.null Js.undefined -> unit = "passOptionalNullableByteStringWithDefault" [@@bs.send] 
    external passOptionalNullableByteWithDefault : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableByteWithDefault" [@@bs.send] 
    external passOptionalNullableByteWithNonNullDefault : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableByteWithNonNullDefault" [@@bs.send] 
    external passOptionalNullableCallbackFunction : testBinding:(_) testBinding_like -> ?fun_:('a142 -> 'a143 [@bs]) Js.null Js.undefined -> unit = "passOptionalNullableCallbackFunction" [@@bs.send] 
    external passOptionalNullableCallbackInterface : testBinding:(_) testBinding_like -> ?listener:(_) eventListener_like Js.null Js.undefined -> unit = "passOptionalNullableCallbackInterface" [@@bs.send] 
    external passOptionalNullableCallbackInterfaceWithDefault : testBinding:(_) testBinding_like -> ?listener:(_) eventListener_like Js.null Js.undefined -> unit = "passOptionalNullableCallbackInterfaceWithDefault" [@@bs.send] 
    external passOptionalNullableDouble : testBinding:(_) testBinding_like -> ?arg:float Js.null Js.undefined -> unit = "passOptionalNullableDouble" [@@bs.send] 
    external passOptionalNullableFloat : testBinding:(_) testBinding_like -> ?arg:float Js.null Js.undefined -> unit = "passOptionalNullableFloat" [@@bs.send] 
    external passOptionalNullableInterface : testBinding:(_) testBinding_like -> ?arg:(_) blob_like Js.null Js.undefined -> unit = "passOptionalNullableInterface" [@@bs.send] 
    external passOptionalNullableInterfaceWithDefault : testBinding:(_) testBinding_like -> ?arg:(_) blob_like Js.null Js.undefined -> unit = "passOptionalNullableInterfaceWithDefault" [@@bs.send] 
    external passOptionalNullableLong : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableLong" [@@bs.send] 
    external passOptionalNullableLongLong : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableLongLong" [@@bs.send] 
    external passOptionalNullableLongLongWithDefault : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableLongLongWithDefault" [@@bs.send] 
    external passOptionalNullableLongLongWithNonNullDefault : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableLongLongWithNonNullDefault" [@@bs.send] 
    external passOptionalNullableLongWithDefault : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableLongWithDefault" [@@bs.send] 
    external passOptionalNullableLongWithNonNullDefault : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableLongWithNonNullDefault" [@@bs.send] 
    external passOptionalNullableMozMap : testBinding:(_) testBinding_like -> ?arg:'a144 Js.null Js.undefined -> unit = "passOptionalNullableMozMap" [@@bs.send] 
    external passOptionalNullableMozMapOfNullableInts : testBinding:(_) testBinding_like -> ?arg:'a145 Js.null Js.undefined -> unit = "passOptionalNullableMozMapOfNullableInts" [@@bs.send] 
    external passOptionalNullableMozMapWithDefaultValue : testBinding:(_) testBinding_like -> ?arg:'a146 Js.null Js.undefined -> unit = "passOptionalNullableMozMapWithDefaultValue" [@@bs.send] 
    external passOptionalNullableObject : testBinding:(_) testBinding_like -> ?arg:'a147 Js.null Js.undefined -> unit = "passOptionalNullableObject" [@@bs.send] 
    external passOptionalNullableObjectWithDefault : testBinding:(_) testBinding_like -> ?arg:'a148 Js.null Js.undefined -> unit = "passOptionalNullableObjectWithDefault" [@@bs.send] 
    external passOptionalNullableOctet : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableOctet" [@@bs.send] 
    external passOptionalNullableOctetWithDefault : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableOctetWithDefault" [@@bs.send] 
    external passOptionalNullableOctetWithNonNullDefault : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableOctetWithNonNullDefault" [@@bs.send] 
    external passOptionalNullableSequence : testBinding:(_) testBinding_like -> ?seq:int array Js.null Js.undefined -> unit = "passOptionalNullableSequence" [@@bs.send] 
    external passOptionalNullableShort : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableShort" [@@bs.send] 
    external passOptionalNullableShortWithDefault : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableShortWithDefault" [@@bs.send] 
    external passOptionalNullableShortWithNonNullDefault : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableShortWithNonNullDefault" [@@bs.send] 
    external passOptionalNullableString : testBinding:(_) testBinding_like -> ?arg:string Js.null Js.undefined -> unit = "passOptionalNullableString" [@@bs.send] 
    external passOptionalNullableStringWithDefault : testBinding:(_) testBinding_like -> ?arg:string Js.null Js.undefined -> unit = "passOptionalNullableStringWithDefault" [@@bs.send] 
    external passOptionalNullableStringWithNonNullDefault : testBinding:(_) testBinding_like -> ?arg:string Js.null Js.undefined -> unit = "passOptionalNullableStringWithNonNullDefault" [@@bs.send] 
    external passOptionalNullableUnion : testBinding:(_) testBinding_like -> ?arg:'a149 Js.undefined -> unit = "passOptionalNullableUnion" [@@bs.send] 
    external passOptionalNullableUnion2 : testBinding:(_) testBinding_like -> ?data:'a150 Js.undefined -> unit = "passOptionalNullableUnion2" [@@bs.send] 
    external passOptionalNullableUnion2WithDefault : testBinding:(_) testBinding_like -> ?data:'a151 Js.undefined -> unit = "passOptionalNullableUnion2WithDefault" [@@bs.send] 
    external passOptionalNullableUnion3 : testBinding:(_) testBinding_like -> ?arg:'a152 Js.undefined -> unit = "passOptionalNullableUnion3" [@@bs.send] 
    external passOptionalNullableUnion4 : testBinding:(_) testBinding_like -> ?data:'a153 Js.undefined -> unit = "passOptionalNullableUnion4" [@@bs.send] 
    external passOptionalNullableUnion5 : testBinding:(_) testBinding_like -> ?bool:'a154 Js.undefined -> unit = "passOptionalNullableUnion5" [@@bs.send] 
    external passOptionalNullableUnion6 : testBinding:(_) testBinding_like -> ?arg:'a155 Js.undefined -> unit = "passOptionalNullableUnion6" [@@bs.send] 
    external passOptionalNullableUnionWithDefault : testBinding:(_) testBinding_like -> ?arg:'a156 Js.undefined -> unit = "passOptionalNullableUnionWithDefault" [@@bs.send] 
    external passOptionalNullableUnrestrictedDouble : testBinding:(_) testBinding_like -> ?arg:float Js.null Js.undefined -> unit = "passOptionalNullableUnrestrictedDouble" [@@bs.send] 
    external passOptionalNullableUnrestrictedFloat : testBinding:(_) testBinding_like -> ?arg:float Js.null Js.undefined -> unit = "passOptionalNullableUnrestrictedFloat" [@@bs.send] 
    external passOptionalNullableUnsignedLong : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableUnsignedLong" [@@bs.send] 
    external passOptionalNullableUnsignedLongLong : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableUnsignedLongLong" [@@bs.send] 
    external passOptionalNullableUnsignedLongLongWithDefault : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableUnsignedLongLongWithDefault" [@@bs.send] 
    external passOptionalNullableUnsignedLongLongWithNonNullDefault : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableUnsignedLongLongWithNonNullDefault" [@@bs.send] 
    external passOptionalNullableUnsignedLongWithDefault : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableUnsignedLongWithDefault" [@@bs.send] 
    external passOptionalNullableUnsignedLongWithNonNullDefault : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableUnsignedLongWithNonNullDefault" [@@bs.send] 
    external passOptionalNullableUnsignedShort : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableUnsignedShort" [@@bs.send] 
    external passOptionalNullableUnsignedShortWithDefault : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableUnsignedShortWithDefault" [@@bs.send] 
    external passOptionalNullableUnsignedShortWithNonNullDefault : testBinding:(_) testBinding_like -> ?arg:int Js.null Js.undefined -> unit = "passOptionalNullableUnsignedShortWithNonNullDefault" [@@bs.send] 
    external passOptionalNullableUsvstring : testBinding:(_) testBinding_like -> ?arg:string Js.null Js.undefined -> unit = "passOptionalNullableUsvstring" [@@bs.send] 
    external passOptionalNullableUsvstringWithDefault : testBinding:(_) testBinding_like -> ?arg:string Js.null Js.undefined -> unit = "passOptionalNullableUsvstringWithDefault" [@@bs.send] 
    external passOptionalNullableUsvstringWithNonNullDefault : testBinding:(_) testBinding_like -> ?arg:string Js.null Js.undefined -> unit = "passOptionalNullableUsvstringWithNonNullDefault" [@@bs.send] 
    external passOptionalObject : testBinding:(_) testBinding_like -> ?arg:'a157 Js.undefined -> unit = "passOptionalObject" [@@bs.send] 
    external passOptionalObjectMozMap : testBinding:(_) testBinding_like -> ?arg:'a158 Js.undefined -> unit = "passOptionalObjectMozMap" [@@bs.send] 
    external passOptionalOctet : testBinding:(_) testBinding_like -> ?arg:int Js.undefined -> unit = "passOptionalOctet" [@@bs.send] 
    external passOptionalOctetWithDefault : testBinding:(_) testBinding_like -> ?arg:int Js.undefined -> unit = "passOptionalOctetWithDefault" [@@bs.send] 
    external passOptionalSequence : testBinding:(_) testBinding_like -> ?seq:int array Js.undefined -> unit = "passOptionalSequence" [@@bs.send] 
    external passOptionalShort : testBinding:(_) testBinding_like -> ?arg:int Js.undefined -> unit = "passOptionalShort" [@@bs.send] 
    external passOptionalShortWithDefault : testBinding:(_) testBinding_like -> ?arg:int Js.undefined -> unit = "passOptionalShortWithDefault" [@@bs.send] 
    external passOptionalString : testBinding:(_) testBinding_like -> ?arg:string Js.undefined -> unit = "passOptionalString" [@@bs.send] 
    external passOptionalStringWithDefault : testBinding:(_) testBinding_like -> ?arg:string Js.undefined -> unit = "passOptionalStringWithDefault" [@@bs.send] 
    external passOptionalUnion : testBinding:(_) testBinding_like -> ?arg:'a159 Js.undefined -> unit = "passOptionalUnion" [@@bs.send] 
    external passOptionalUnion2 : testBinding:(_) testBinding_like -> ?data:'a160 Js.undefined -> unit = "passOptionalUnion2" [@@bs.send] 
    external passOptionalUnion3 : testBinding:(_) testBinding_like -> ?arg:'a161 Js.undefined -> unit = "passOptionalUnion3" [@@bs.send] 
    external passOptionalUnion4 : testBinding:(_) testBinding_like -> ?data:'a162 Js.undefined -> unit = "passOptionalUnion4" [@@bs.send] 
    external passOptionalUnion5 : testBinding:(_) testBinding_like -> ?bool:'a163 Js.undefined -> unit = "passOptionalUnion5" [@@bs.send] 
    external passOptionalUnion6 : testBinding:(_) testBinding_like -> ?arg:'a164 Js.undefined -> unit = "passOptionalUnion6" [@@bs.send] 
    external passOptionalUnrestrictedDouble : testBinding:(_) testBinding_like -> ?arg:float Js.undefined -> unit = "passOptionalUnrestrictedDouble" [@@bs.send] 
    external passOptionalUnrestrictedFloat : testBinding:(_) testBinding_like -> ?arg:float Js.undefined -> unit = "passOptionalUnrestrictedFloat" [@@bs.send] 
    external passOptionalUnsignedLong : testBinding:(_) testBinding_like -> ?arg:int Js.undefined -> unit = "passOptionalUnsignedLong" [@@bs.send] 
    external passOptionalUnsignedLongLong : testBinding:(_) testBinding_like -> ?arg:int Js.undefined -> unit = "passOptionalUnsignedLongLong" [@@bs.send] 
    external passOptionalUnsignedLongLongWithDefault : testBinding:(_) testBinding_like -> ?arg:int Js.undefined -> unit = "passOptionalUnsignedLongLongWithDefault" [@@bs.send] 
    external passOptionalUnsignedLongWithDefault : testBinding:(_) testBinding_like -> ?arg:int Js.undefined -> unit = "passOptionalUnsignedLongWithDefault" [@@bs.send] 
    external passOptionalUnsignedShort : testBinding:(_) testBinding_like -> ?arg:int Js.undefined -> unit = "passOptionalUnsignedShort" [@@bs.send] 
    external passOptionalUnsignedShortWithDefault : testBinding:(_) testBinding_like -> ?arg:int Js.undefined -> unit = "passOptionalUnsignedShortWithDefault" [@@bs.send] 
    external passOptionalUsvstring : testBinding:(_) testBinding_like -> ?arg:string Js.undefined -> unit = "passOptionalUsvstring" [@@bs.send] 
    external passOptionalUsvstringWithDefault : testBinding:(_) testBinding_like -> ?arg:string Js.undefined -> unit = "passOptionalUsvstringWithDefault" [@@bs.send] 
    external passSequence : testBinding:(_) testBinding_like -> seq:int array -> unit = "passSequence" [@@bs.send] 
    external passSequenceSequence : testBinding:(_) testBinding_like -> seq:int array array -> unit = "passSequenceSequence" [@@bs.send] 
    external passShort : testBinding:(_) testBinding_like -> arg:int -> unit = "passShort" [@@bs.send] 
    external passString : testBinding:(_) testBinding_like -> arg:string -> unit = "passString" [@@bs.send] 
    external passStringMozMap : testBinding:(_) testBinding_like -> arg:'a165 -> unit = "passStringMozMap" [@@bs.send] 
    external passStringSequence : testBinding:(_) testBinding_like -> seq:string array -> unit = "passStringSequence" [@@bs.send] 
    external passUnion : testBinding:(_) testBinding_like -> arg:'a166 -> unit = "passUnion" [@@bs.send] 
    external passUnion10 : testBinding:(_) testBinding_like -> arg:'a167 -> unit = "passUnion10" [@@bs.send] 
    external passUnion2 : testBinding:(_) testBinding_like -> data:'a168 -> unit = "passUnion2" [@@bs.send] 
    external passUnion3 : testBinding:(_) testBinding_like -> data:'a169 -> unit = "passUnion3" [@@bs.send] 
    external passUnion4 : testBinding:(_) testBinding_like -> seq:'a170 -> unit = "passUnion4" [@@bs.send] 
    external passUnion5 : testBinding:(_) testBinding_like -> data:'a171 -> unit = "passUnion5" [@@bs.send] 
    external passUnion6 : testBinding:(_) testBinding_like -> bool:'a172 -> unit = "passUnion6" [@@bs.send] 
    external passUnion7 : testBinding:(_) testBinding_like -> arg:'a173 -> unit = "passUnion7" [@@bs.send] 
    external passUnion8 : testBinding:(_) testBinding_like -> arg:'a174 -> unit = "passUnion8" [@@bs.send] 
    external passUnion9 : testBinding:(_) testBinding_like -> arg:'a175 -> unit = "passUnion9" [@@bs.send] 
    external passUnionSequenceSequence : testBinding:(_) testBinding_like -> seq:'a176 -> unit = "passUnionSequenceSequence" [@@bs.send] 
    external passUnionWithTypedef : testBinding:(_) testBinding_like -> arg:'a177 -> unit = "passUnionWithTypedef" [@@bs.send] 
    external passUnionWithTypedef2 : testBinding:(_) testBinding_like -> arg:'a178 -> unit = "passUnionWithTypedef2" [@@bs.send] 
    external passUnrestrictedDouble : testBinding:(_) testBinding_like -> arg:float -> unit = "passUnrestrictedDouble" [@@bs.send] 
    external passUnrestrictedFloat : testBinding:(_) testBinding_like -> arg:float -> unit = "passUnrestrictedFloat" [@@bs.send] 
    external passUnsignedLong : testBinding:(_) testBinding_like -> arg:int -> unit = "passUnsignedLong" [@@bs.send] 
    external passUnsignedLongLong : testBinding:(_) testBinding_like -> arg:int -> unit = "passUnsignedLongLong" [@@bs.send] 
    external passUnsignedShort : testBinding:(_) testBinding_like -> arg:int -> unit = "passUnsignedShort" [@@bs.send] 
    external passUsvstring : testBinding:(_) testBinding_like -> arg:string -> unit = "passUsvstring" [@@bs.send] 
    external passVariadicAny : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, ('a179)) variadic_func = "passVariadicAny" [@@bs.get]
    external passVariadicBoolean : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (Js.boolean)) variadic_func = "passVariadicBoolean" [@@bs.get]
    external passVariadicBooleanAndDefault : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (Js.boolean Js.undefined*(Js.boolean))) variadic_func = "passVariadicBooleanAndDefault" [@@bs.get]
    external passVariadicByte : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (int)) variadic_func = "passVariadicByte" [@@bs.get]
    external passVariadicByteString : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (string)) variadic_func = "passVariadicByteString" [@@bs.get]
    external passVariadicDouble : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (float)) variadic_func = "passVariadicDouble" [@@bs.get]
    external passVariadicEnum : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (string)) variadic_func = "passVariadicEnum" [@@bs.get]
    external passVariadicFloat : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (float)) variadic_func = "passVariadicFloat" [@@bs.get]
    external passVariadicInterface : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, ((_) blob_like)) variadic_func = "passVariadicInterface" [@@bs.get]
    external passVariadicLong : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (int)) variadic_func = "passVariadicLong" [@@bs.get]
    external passVariadicLongLong : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (int)) variadic_func = "passVariadicLongLong" [@@bs.get]
    external passVariadicObject : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, ('a180)) variadic_func = "passVariadicObject" [@@bs.get]
    external passVariadicOctet : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (int)) variadic_func = "passVariadicOctet" [@@bs.get]
    external passVariadicShort : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (int)) variadic_func = "passVariadicShort" [@@bs.get]
    external passVariadicString : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (string)) variadic_func = "passVariadicString" [@@bs.get]
    external passVariadicUnion : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, ('a181)) variadic_func = "passVariadicUnion" [@@bs.get]
    external passVariadicUnion2 : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, ('a182)) variadic_func = "passVariadicUnion2" [@@bs.get]
    external passVariadicUnion3 : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, ('a183)) variadic_func = "passVariadicUnion3" [@@bs.get]
    external passVariadicUnion4 : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, ('a184)) variadic_func = "passVariadicUnion4" [@@bs.get]
    external passVariadicUnion5 : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, ('a185)) variadic_func = "passVariadicUnion5" [@@bs.get]
    external passVariadicUnion6 : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, ('a186)) variadic_func = "passVariadicUnion6" [@@bs.get]
    external passVariadicUnion7 : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, ('a187)) variadic_func = "passVariadicUnion7" [@@bs.get]
    external passVariadicUnrestrictedDouble : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (float)) variadic_func = "passVariadicUnrestrictedDouble" [@@bs.get]
    external passVariadicUnrestrictedFloat : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (float)) variadic_func = "passVariadicUnrestrictedFloat" [@@bs.get]
    external passVariadicUnsignedLong : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (int)) variadic_func = "passVariadicUnsignedLong" [@@bs.get]
    external passVariadicUnsignedLongLong : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (int)) variadic_func = "passVariadicUnsignedLongLong" [@@bs.get]
    external passVariadicUnsignedShort : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (int)) variadic_func = "passVariadicUnsignedShort" [@@bs.get]
    external passVariadicUsvstring : testBinding:(_) testBinding_like -> ((_) testBinding_like, unit, (string)) variadic_func = "passVariadicUsvstring" [@@bs.get]
    external prefControlledMethodDisabled : testBinding:(_) testBinding_like -> unit = "prefControlledMethodDisabled" [@@bs.send] 
    external prefControlledMethodEnabled : testBinding:(_) testBinding_like -> unit = "prefControlledMethodEnabled" [@@bs.send] 
    external prefControlledStaticMethodDisabled : testBinding:(_) testBinding_like -> unit = "prefControlledStaticMethodDisabled" [@@bs.send] 
    external prefControlledStaticMethodEnabled : testBinding:(_) testBinding_like -> unit = "prefControlledStaticMethodEnabled" [@@bs.send] 
    external promiseNativeHandler : testBinding:(_) testBinding_like -> resolve:('a189 -> unit [@bs]) Js.null -> reject:('a190 -> unit [@bs]) Js.null -> 'a188 Js.Promise.t = "promiseNativeHandler" [@@bs.send] 
    external promiseRejectNative : testBinding:(_) testBinding_like -> p:'a191 Js.Promise.t -> value:'a192 -> unit = "promiseRejectNative" [@@bs.send] 
    external promiseRejectWithTypeError : testBinding:(_) testBinding_like -> p:'a193 Js.Promise.t -> message:string -> unit = "promiseRejectWithTypeError" [@@bs.send] 
    external promiseResolveNative : testBinding:(_) testBinding_like -> p:'a194 Js.Promise.t -> value:'a195 -> unit = "promiseResolveNative" [@@bs.send] 
    external receiveAny : testBinding:(_) testBinding_like -> 'a196 = "receiveAny" [@@bs.send] 
    external receiveAnyMozMap : testBinding:(_) testBinding_like -> 'a197 = "receiveAnyMozMap" [@@bs.send] 
    external receiveBoolean : testBinding:(_) testBinding_like -> bool = "receiveBoolean" [@@bs.send] 
    external receiveByte : testBinding:(_) testBinding_like -> int = "receiveByte" [@@bs.send] 
    external receiveByteString : testBinding:(_) testBinding_like -> string = "receiveByteString" [@@bs.send] 
    external receiveDouble : testBinding:(_) testBinding_like -> float = "receiveDouble" [@@bs.send] 
    external receiveEnum : testBinding:(_) testBinding_like -> string = "receiveEnum" [@@bs.send] 
    external receiveFloat : testBinding:(_) testBinding_like -> float = "receiveFloat" [@@bs.send] 
    external receiveInterface : testBinding:(_) testBinding_like -> blob = "receiveInterface" [@@bs.send] 
    external receiveInterfaceSequence : testBinding:(_) testBinding_like -> blob array = "receiveInterfaceSequence" [@@bs.send] 
    external receiveLong : testBinding:(_) testBinding_like -> int = "receiveLong" [@@bs.send] 
    external receiveLongLong : testBinding:(_) testBinding_like -> int = "receiveLongLong" [@@bs.send] 
    external receiveMozMap : testBinding:(_) testBinding_like -> 'a198 = "receiveMozMap" [@@bs.send] 
    external receiveMozMapOfMozMaps : testBinding:(_) testBinding_like -> 'a199 = "receiveMozMapOfMozMaps" [@@bs.send] 
    external receiveMozMapOfNullableInts : testBinding:(_) testBinding_like -> 'a200 = "receiveMozMapOfNullableInts" [@@bs.send] 
    external receiveNullableBoolean : testBinding:(_) testBinding_like -> Js.boolean option = "receiveNullableBoolean" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableByte : testBinding:(_) testBinding_like -> int option = "receiveNullableByte" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableByteString : testBinding:(_) testBinding_like -> string option = "receiveNullableByteString" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableDouble : testBinding:(_) testBinding_like -> float option = "receiveNullableDouble" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableEnum : testBinding:(_) testBinding_like -> string option = "receiveNullableEnum" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableFloat : testBinding:(_) testBinding_like -> float option = "receiveNullableFloat" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableInterface : testBinding:(_) testBinding_like -> blob option = "receiveNullableInterface" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableLong : testBinding:(_) testBinding_like -> int option = "receiveNullableLong" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableLongLong : testBinding:(_) testBinding_like -> int option = "receiveNullableLongLong" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableMozMap : testBinding:(_) testBinding_like -> 'a201 option = "receiveNullableMozMap" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableMozMapOfNullableInts : testBinding:(_) testBinding_like -> 'a202 option = "receiveNullableMozMapOfNullableInts" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableObject : testBinding:(_) testBinding_like -> 'a203 option = "receiveNullableObject" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableOctet : testBinding:(_) testBinding_like -> int option = "receiveNullableOctet" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableSequence : testBinding:(_) testBinding_like -> int array option = "receiveNullableSequence" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableShort : testBinding:(_) testBinding_like -> int option = "receiveNullableShort" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableString : testBinding:(_) testBinding_like -> string option = "receiveNullableString" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableUnion : testBinding:(_) testBinding_like -> 'a204 = "receiveNullableUnion" [@@bs.send] 
    external receiveNullableUnion2 : testBinding:(_) testBinding_like -> 'a205 = "receiveNullableUnion2" [@@bs.send] 
    external receiveNullableUnion3 : testBinding:(_) testBinding_like -> 'a206 = "receiveNullableUnion3" [@@bs.send] 
    external receiveNullableUnion4 : testBinding:(_) testBinding_like -> 'a207 = "receiveNullableUnion4" [@@bs.send] 
    external receiveNullableUnion5 : testBinding:(_) testBinding_like -> 'a208 = "receiveNullableUnion5" [@@bs.send] 
    external receiveNullableUnion6 : testBinding:(_) testBinding_like -> 'a209 = "receiveNullableUnion6" [@@bs.send] 
    external receiveNullableUnrestrictedDouble : testBinding:(_) testBinding_like -> float option = "receiveNullableUnrestrictedDouble" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableUnrestrictedFloat : testBinding:(_) testBinding_like -> float option = "receiveNullableUnrestrictedFloat" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableUnsignedLong : testBinding:(_) testBinding_like -> int option = "receiveNullableUnsignedLong" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableUnsignedLongLong : testBinding:(_) testBinding_like -> int option = "receiveNullableUnsignedLongLong" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableUnsignedShort : testBinding:(_) testBinding_like -> int option = "receiveNullableUnsignedShort" [@@bs.send] [@@bs.return null_to_opt]
    external receiveNullableUsvstring : testBinding:(_) testBinding_like -> string option = "receiveNullableUsvstring" [@@bs.send] [@@bs.return null_to_opt]
    external receiveObject : testBinding:(_) testBinding_like -> 'a210 = "receiveObject" [@@bs.send] 
    external receiveOctet : testBinding:(_) testBinding_like -> int = "receiveOctet" [@@bs.send] 
    external receiveSequence : testBinding:(_) testBinding_like -> int array = "receiveSequence" [@@bs.send] 
    external receiveShort : testBinding:(_) testBinding_like -> int = "receiveShort" [@@bs.send] 
    external receiveString : testBinding:(_) testBinding_like -> string = "receiveString" [@@bs.send] 
    external receiveTestDictionaryWithSuccessOnKeyword : testBinding:(_) testBinding_like -> testDictionary = "receiveTestDictionaryWithSuccessOnKeyword" [@@bs.send] 
    external receiveUnion : testBinding:(_) testBinding_like -> 'a211 = "receiveUnion" [@@bs.send] 
    external receiveUnion10 : testBinding:(_) testBinding_like -> 'a212 = "receiveUnion10" [@@bs.send] 
    external receiveUnion11 : testBinding:(_) testBinding_like -> 'a213 = "receiveUnion11" [@@bs.send] 
    external receiveUnion2 : testBinding:(_) testBinding_like -> 'a214 = "receiveUnion2" [@@bs.send] 
    external receiveUnion3 : testBinding:(_) testBinding_like -> 'a215 = "receiveUnion3" [@@bs.send] 
    external receiveUnion4 : testBinding:(_) testBinding_like -> 'a216 = "receiveUnion4" [@@bs.send] 
    external receiveUnion5 : testBinding:(_) testBinding_like -> 'a217 = "receiveUnion5" [@@bs.send] 
    external receiveUnion6 : testBinding:(_) testBinding_like -> 'a218 = "receiveUnion6" [@@bs.send] 
    external receiveUnion7 : testBinding:(_) testBinding_like -> 'a219 = "receiveUnion7" [@@bs.send] 
    external receiveUnion8 : testBinding:(_) testBinding_like -> 'a220 = "receiveUnion8" [@@bs.send] 
    external receiveUnion9 : testBinding:(_) testBinding_like -> 'a221 = "receiveUnion9" [@@bs.send] 
    external receiveUnrestrictedDouble : testBinding:(_) testBinding_like -> float = "receiveUnrestrictedDouble" [@@bs.send] 
    external receiveUnrestrictedFloat : testBinding:(_) testBinding_like -> float = "receiveUnrestrictedFloat" [@@bs.send] 
    external receiveUnsignedLong : testBinding:(_) testBinding_like -> int = "receiveUnsignedLong" [@@bs.send] 
    external receiveUnsignedLongLong : testBinding:(_) testBinding_like -> int = "receiveUnsignedLongLong" [@@bs.send] 
    external receiveUnsignedShort : testBinding:(_) testBinding_like -> int = "receiveUnsignedShort" [@@bs.send] 
    external receiveUsvstring : testBinding:(_) testBinding_like -> string = "receiveUsvstring" [@@bs.send] 
    external receiveVoid : testBinding:(_) testBinding_like -> unit = "receiveVoid" [@@bs.send] 
    external receiveVoidStatic : testBinding:(_) testBinding_like -> unit = "receiveVoidStatic" [@@bs.send] 
    external resolvePromiseDelayed : testBinding:(_) testBinding_like -> p:'a222 Js.Promise.t -> value:string -> ms:int -> unit = "resolvePromiseDelayed" [@@bs.send] 
    external returnRejectedPromise : testBinding:(_) testBinding_like -> value:'a224 -> 'a223 Js.Promise.t = "returnRejectedPromise" [@@bs.send] 
    external returnResolvedPromise : testBinding:(_) testBinding_like -> value:'a226 -> 'a225 Js.Promise.t = "returnResolvedPromise" [@@bs.send] 
    external returnSequenceSequence : testBinding:(_) testBinding_like -> int array array = "returnSequenceSequence" [@@bs.send] 
    
    let prefcontrolledconstdisabled  =
      
      0
    
    let prefcontrolledconstenabled  =
      
      0
    
    let funccontrolledconstdisabled  =
      
      0
    
    let funccontrolledconstenabled  =
      
      0
    
    let advanceClock ~testBinding ~millis ?forceLayoutTick () =
      let conv_forceLayoutTick = Js_undefined.from_opt in
      let forceLayoutTick = conv_forceLayoutTick forceLayoutTick in
      advanceClock ~testBinding ~millis ~forceLayoutTick
    
    let passEnum ~testBinding ~arg =
      let conv_arg = function
        | `None -> ""
        | `foo -> "foo"
        | `bar -> "bar"
         in
      let arg = conv_arg arg in
      let return = passEnum ~testBinding ~arg in
      return
    
    let passMozMapUnion ~testBinding ~init =
      let conv_init = function
        | `Int (x: int) -> Obj.magic x
        | `Any (x: 'a227) -> Obj.magic x
         in
      let init = conv_init init in
      let return = passMozMapUnion ~testBinding ~init in
      return
    
    let passMozMapUnion2 ~testBinding ~init =
      let conv_init = function
        | `TestBinding (x: (_) testBinding_like) -> Obj.magic x
        | `Any (x: 'a228) -> Obj.magic x
         in
      let init = conv_init init in
      let return = passMozMapUnion2 ~testBinding ~init in
      return
    
    let passMozMapUnion3 ~testBinding ~init =
      let conv_init = function
        | `TestBinding (x: (_) testBinding_like) -> Obj.magic x
        | `String_Array_Array (x: string array array) -> Obj.magic x
        | `Any (x: 'a229) -> Obj.magic x
         in
      let init = conv_init init in
      let return = passMozMapUnion3 ~testBinding ~init in
      return
    
    let passNullableUnion ~testBinding ~arg =
      let conv_arg = function
        | `HTMLElement_Null (x: (_) hTMLElement_like Js.null) -> Obj.magic x
        | `Int_Null (x: int Js.null) -> Obj.magic x
         in
      let arg = conv_arg arg in
      let return = passNullableUnion ~testBinding ~arg in
      return
    
    let passNullableUnion2 ~testBinding ~data =
      let conv_data = function
        | `Event_Null (x: (_) event_like Js.null) -> Obj.magic x
        | `String_Null (x: string Js.null) -> Obj.magic x
         in
      let data = conv_data data in
      let return = passNullableUnion2 ~testBinding ~data in
      return
    
    let passNullableUnion3 ~testBinding ~data =
      let conv_data = function
        | `String_Null (x: string Js.null) -> Obj.magic x
        | `Int_Array_Null (x: int array Js.null) -> Obj.magic x
         in
      let data = conv_data data in
      let return = passNullableUnion3 ~testBinding ~data in
      return
    
    let passNullableUnion4 ~testBinding ~bool =
      let conv_bool = function
        | `Int_Array_Null (x: int array Js.null) -> Obj.magic x
        | `Js_boolean_Null (x: Js.boolean Js.null) -> Obj.magic x
         in
      let bool = conv_bool bool in
      let return = passNullableUnion4 ~testBinding ~bool in
      return
    
    let passNullableUnion5 ~testBinding ~arg =
      let conv_arg = function
        | `Int_Null (x: int Js.null) -> Obj.magic x
        | `Js_boolean_Null (x: Js.boolean Js.null) -> Obj.magic x
         in
      let arg = conv_arg arg in
      let return = passNullableUnion5 ~testBinding ~arg in
      return
    
    let passNullableUnion6 ~testBinding ~arg =
      let conv_arg = function
        | `String_Null (x: string Js.null) -> Obj.magic x
        | `Int_Null (x: int Js.null) -> Obj.magic x
         in
      let arg = conv_arg arg in
      let return = passNullableUnion6 ~testBinding ~arg in
      return
    
    let passOptionalAny ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalAny ~testBinding ~arg
    
    let passOptionalAnyWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalAnyWithDefault ~testBinding ~arg
    
    let passOptionalBoolean ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalBoolean ~testBinding ~arg
    
    let passOptionalBooleanWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalBooleanWithDefault ~testBinding ~arg
    
    let passOptionalByte ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalByte ~testBinding ~arg
    
    let passOptionalByteString ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalByteString ~testBinding ~arg
    
    let passOptionalByteWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalByteWithDefault ~testBinding ~arg
    
    let passOptionalBytestringWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalBytestringWithDefault ~testBinding ~arg
    
    let passOptionalCallbackFunction ~testBinding ?fun_ () =
      let conv_fun = Js_undefined.from_opt in
      let fun_ = conv_fun fun_ in
      passOptionalCallbackFunction ~testBinding ~fun_
    
    let passOptionalCallbackInterface ~testBinding ?listener () =
      let conv_listener = Js_undefined.from_opt in
      let listener = conv_listener listener in
      passOptionalCallbackInterface ~testBinding ~listener
    
    let passOptionalDouble ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalDouble ~testBinding ~arg
    
    let passOptionalEnum ~testBinding ~arg =
      let conv_arg = function
        | `None -> ""
        | `foo -> "foo"
        | `bar -> "bar"
         in
      let conv_arg = access_undef conv_arg in
      let arg = conv_arg arg in
      let return = passOptionalEnum ~testBinding ~arg in
      return
    
    let passOptionalEnum ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalEnum ~testBinding ~arg
    
    let passOptionalEnumWithDefault ~testBinding ~arg =
      let conv_arg = function
        | `None -> ""
        | `foo -> "foo"
        | `bar -> "bar"
         in
      let conv_arg = access_undef conv_arg in
      let arg = conv_arg arg in
      let return = passOptionalEnumWithDefault ~testBinding ~arg in
      return
    
    let passOptionalEnumWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalEnumWithDefault ~testBinding ~arg
    
    let passOptionalFloat ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalFloat ~testBinding ~arg
    
    let passOptionalInterface ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalInterface ~testBinding ~arg
    
    let passOptionalLong ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalLong ~testBinding ~arg
    
    let passOptionalLongLong ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalLongLong ~testBinding ~arg
    
    let passOptionalLongLongWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalLongLongWithDefault ~testBinding ~arg
    
    let passOptionalLongWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalLongWithDefault ~testBinding ~arg
    
    let passOptionalMozMap ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalMozMap ~testBinding ~arg
    
    let passOptionalMozMapOfNullableInts ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalMozMapOfNullableInts ~testBinding ~arg
    
    let passOptionalNullableBoolean ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableBoolean ~testBinding ~arg
    
    let passOptionalNullableBooleanWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableBooleanWithDefault ~testBinding ~arg
    
    let passOptionalNullableBooleanWithNonNullDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableBooleanWithNonNullDefault ~testBinding ~arg
    
    let passOptionalNullableByte ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableByte ~testBinding ~arg
    
    let passOptionalNullableByteString ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableByteString ~testBinding ~arg
    
    let passOptionalNullableByteStringWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableByteStringWithDefault ~testBinding ~arg
    
    let passOptionalNullableByteWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableByteWithDefault ~testBinding ~arg
    
    let passOptionalNullableByteWithNonNullDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableByteWithNonNullDefault ~testBinding ~arg
    
    let passOptionalNullableCallbackFunction ~testBinding ?fun_ () =
      let conv_fun = Js_undefined.from_opt in
      let fun_ = conv_fun fun_ in
      passOptionalNullableCallbackFunction ~testBinding ~fun_
    
    let passOptionalNullableCallbackInterface ~testBinding ?listener () =
      let conv_listener = Js_undefined.from_opt in
      let listener = conv_listener listener in
      passOptionalNullableCallbackInterface ~testBinding ~listener
    
    let passOptionalNullableCallbackInterfaceWithDefault ~testBinding ?listener () =
      let conv_listener = Js_undefined.from_opt in
      let listener = conv_listener listener in
      passOptionalNullableCallbackInterfaceWithDefault ~testBinding ~listener
    
    let passOptionalNullableDouble ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableDouble ~testBinding ~arg
    
    let passOptionalNullableFloat ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableFloat ~testBinding ~arg
    
    let passOptionalNullableInterface ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableInterface ~testBinding ~arg
    
    let passOptionalNullableInterfaceWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableInterfaceWithDefault ~testBinding ~arg
    
    let passOptionalNullableLong ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableLong ~testBinding ~arg
    
    let passOptionalNullableLongLong ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableLongLong ~testBinding ~arg
    
    let passOptionalNullableLongLongWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableLongLongWithDefault ~testBinding ~arg
    
    let passOptionalNullableLongLongWithNonNullDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableLongLongWithNonNullDefault ~testBinding ~arg
    
    let passOptionalNullableLongWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableLongWithDefault ~testBinding ~arg
    
    let passOptionalNullableLongWithNonNullDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableLongWithNonNullDefault ~testBinding ~arg
    
    let passOptionalNullableMozMap ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableMozMap ~testBinding ~arg
    
    let passOptionalNullableMozMapOfNullableInts ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableMozMapOfNullableInts ~testBinding ~arg
    
    let passOptionalNullableMozMapWithDefaultValue ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableMozMapWithDefaultValue ~testBinding ~arg
    
    let passOptionalNullableObject ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableObject ~testBinding ~arg
    
    let passOptionalNullableObjectWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableObjectWithDefault ~testBinding ~arg
    
    let passOptionalNullableOctet ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableOctet ~testBinding ~arg
    
    let passOptionalNullableOctetWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableOctetWithDefault ~testBinding ~arg
    
    let passOptionalNullableOctetWithNonNullDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableOctetWithNonNullDefault ~testBinding ~arg
    
    let passOptionalNullableSequence ~testBinding ?seq () =
      let conv_seq = Js_undefined.from_opt in
      let seq = conv_seq seq in
      passOptionalNullableSequence ~testBinding ~seq
    
    let passOptionalNullableShort ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableShort ~testBinding ~arg
    
    let passOptionalNullableShortWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableShortWithDefault ~testBinding ~arg
    
    let passOptionalNullableShortWithNonNullDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableShortWithNonNullDefault ~testBinding ~arg
    
    let passOptionalNullableString ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableString ~testBinding ~arg
    
    let passOptionalNullableStringWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableStringWithDefault ~testBinding ~arg
    
    let passOptionalNullableStringWithNonNullDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableStringWithNonNullDefault ~testBinding ~arg
    
    let passOptionalNullableUnion ~testBinding ~arg =
      let conv_arg = function
        | `HTMLElement_Null (x: (_) hTMLElement_like Js.null) -> Obj.magic x
        | `Int_Null (x: int Js.null) -> Obj.magic x
         in
      let conv_arg = access_undef conv_arg in
      let arg = conv_arg arg in
      let return = passOptionalNullableUnion ~testBinding ~arg in
      return
    
    let passOptionalNullableUnion ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUnion ~testBinding ~arg
    
    let passOptionalNullableUnion2 ~testBinding ~data =
      let conv_data = function
        | `Event_Null (x: (_) event_like Js.null) -> Obj.magic x
        | `String_Null (x: string Js.null) -> Obj.magic x
         in
      let conv_data = access_undef conv_data in
      let data = conv_data data in
      let return = passOptionalNullableUnion2 ~testBinding ~data in
      return
    
    let passOptionalNullableUnion2 ~testBinding ?data () =
      let conv_data = Js_undefined.from_opt in
      let data = conv_data data in
      passOptionalNullableUnion2 ~testBinding ~data
    
    let passOptionalNullableUnion2WithDefault ~testBinding ~data =
      let conv_data = function
        | `Event_Null (x: (_) event_like Js.null) -> Obj.magic x
        | `String_Null (x: string Js.null) -> Obj.magic x
         in
      let conv_data = access_undef conv_data in
      let data = conv_data data in
      let return = passOptionalNullableUnion2WithDefault ~testBinding ~data in
      return
    
    let passOptionalNullableUnion2WithDefault ~testBinding ?data () =
      let conv_data = Js_undefined.from_opt in
      let data = conv_data data in
      passOptionalNullableUnion2WithDefault ~testBinding ~data
    
    let passOptionalNullableUnion3 ~testBinding ~arg =
      let conv_arg = function
        | `String_Null (x: string Js.null) -> Obj.magic x
        | `Int_Array_Null (x: int array Js.null) -> Obj.magic x
         in
      let conv_arg = access_undef conv_arg in
      let arg = conv_arg arg in
      let return = passOptionalNullableUnion3 ~testBinding ~arg in
      return
    
    let passOptionalNullableUnion3 ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUnion3 ~testBinding ~arg
    
    let passOptionalNullableUnion4 ~testBinding ~data =
      let conv_data = function
        | `Int_Array_Null (x: int array Js.null) -> Obj.magic x
        | `Js_boolean_Null (x: Js.boolean Js.null) -> Obj.magic x
         in
      let conv_data = access_undef conv_data in
      let data = conv_data data in
      let return = passOptionalNullableUnion4 ~testBinding ~data in
      return
    
    let passOptionalNullableUnion4 ~testBinding ?data () =
      let conv_data = Js_undefined.from_opt in
      let data = conv_data data in
      passOptionalNullableUnion4 ~testBinding ~data
    
    let passOptionalNullableUnion5 ~testBinding ~bool =
      let conv_bool = function
        | `Int_Null (x: int Js.null) -> Obj.magic x
        | `Js_boolean_Null (x: Js.boolean Js.null) -> Obj.magic x
         in
      let conv_bool = access_undef conv_bool in
      let bool = conv_bool bool in
      let return = passOptionalNullableUnion5 ~testBinding ~bool in
      return
    
    let passOptionalNullableUnion5 ~testBinding ?bool () =
      let conv_bool = Js_undefined.from_opt in
      let bool = conv_bool bool in
      passOptionalNullableUnion5 ~testBinding ~bool
    
    let passOptionalNullableUnion6 ~testBinding ~arg =
      let conv_arg = function
        | `String_Null (x: string Js.null) -> Obj.magic x
        | `Int_Null (x: int Js.null) -> Obj.magic x
         in
      let conv_arg = access_undef conv_arg in
      let arg = conv_arg arg in
      let return = passOptionalNullableUnion6 ~testBinding ~arg in
      return
    
    let passOptionalNullableUnion6 ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUnion6 ~testBinding ~arg
    
    let passOptionalNullableUnionWithDefault ~testBinding ~arg =
      let conv_arg = function
        | `HTMLElement_Null (x: (_) hTMLElement_like Js.null) -> Obj.magic x
        | `Int_Null (x: int Js.null) -> Obj.magic x
         in
      let conv_arg = access_undef conv_arg in
      let arg = conv_arg arg in
      let return = passOptionalNullableUnionWithDefault ~testBinding ~arg in
      return
    
    let passOptionalNullableUnionWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUnionWithDefault ~testBinding ~arg
    
    let passOptionalNullableUnrestrictedDouble ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUnrestrictedDouble ~testBinding ~arg
    
    let passOptionalNullableUnrestrictedFloat ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUnrestrictedFloat ~testBinding ~arg
    
    let passOptionalNullableUnsignedLong ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUnsignedLong ~testBinding ~arg
    
    let passOptionalNullableUnsignedLongLong ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUnsignedLongLong ~testBinding ~arg
    
    let passOptionalNullableUnsignedLongLongWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUnsignedLongLongWithDefault ~testBinding ~arg
    
    let passOptionalNullableUnsignedLongLongWithNonNullDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUnsignedLongLongWithNonNullDefault ~testBinding ~arg
    
    let passOptionalNullableUnsignedLongWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUnsignedLongWithDefault ~testBinding ~arg
    
    let passOptionalNullableUnsignedLongWithNonNullDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUnsignedLongWithNonNullDefault ~testBinding ~arg
    
    let passOptionalNullableUnsignedShort ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUnsignedShort ~testBinding ~arg
    
    let passOptionalNullableUnsignedShortWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUnsignedShortWithDefault ~testBinding ~arg
    
    let passOptionalNullableUnsignedShortWithNonNullDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUnsignedShortWithNonNullDefault ~testBinding ~arg
    
    let passOptionalNullableUsvstring ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUsvstring ~testBinding ~arg
    
    let passOptionalNullableUsvstringWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUsvstringWithDefault ~testBinding ~arg
    
    let passOptionalNullableUsvstringWithNonNullDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalNullableUsvstringWithNonNullDefault ~testBinding ~arg
    
    let passOptionalObject ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalObject ~testBinding ~arg
    
    let passOptionalObjectMozMap ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalObjectMozMap ~testBinding ~arg
    
    let passOptionalOctet ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalOctet ~testBinding ~arg
    
    let passOptionalOctetWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalOctetWithDefault ~testBinding ~arg
    
    let passOptionalSequence ~testBinding ?seq () =
      let conv_seq = Js_undefined.from_opt in
      let seq = conv_seq seq in
      passOptionalSequence ~testBinding ~seq
    
    let passOptionalShort ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalShort ~testBinding ~arg
    
    let passOptionalShortWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalShortWithDefault ~testBinding ~arg
    
    let passOptionalString ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalString ~testBinding ~arg
    
    let passOptionalStringWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalStringWithDefault ~testBinding ~arg
    
    let passOptionalUnion ~testBinding ~arg =
      let conv_arg = function
        | `HTMLElement (x: (_) hTMLElement_like) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let conv_arg = access_undef conv_arg in
      let arg = conv_arg arg in
      let return = passOptionalUnion ~testBinding ~arg in
      return
    
    let passOptionalUnion ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalUnion ~testBinding ~arg
    
    let passOptionalUnion2 ~testBinding ~data =
      let conv_data = function
        | `Event (x: (_) event_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_data = access_undef conv_data in
      let data = conv_data data in
      let return = passOptionalUnion2 ~testBinding ~data in
      return
    
    let passOptionalUnion2 ~testBinding ?data () =
      let conv_data = Js_undefined.from_opt in
      let data = conv_data data in
      passOptionalUnion2 ~testBinding ~data
    
    let passOptionalUnion3 ~testBinding ~arg =
      let conv_arg = function
        | `String (x: string) -> Obj.magic x
        | `Int_Array (x: int array) -> Obj.magic x
         in
      let conv_arg = access_undef conv_arg in
      let arg = conv_arg arg in
      let return = passOptionalUnion3 ~testBinding ~arg in
      return
    
    let passOptionalUnion3 ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalUnion3 ~testBinding ~arg
    
    let passOptionalUnion4 ~testBinding ~data =
      let conv_data = function
        | `Int_Array (x: int array) -> Obj.magic x
        | `Js_boolean (x: Js.boolean) -> Obj.magic x
         in
      let conv_data = access_undef conv_data in
      let data = conv_data data in
      let return = passOptionalUnion4 ~testBinding ~data in
      return
    
    let passOptionalUnion4 ~testBinding ?data () =
      let conv_data = Js_undefined.from_opt in
      let data = conv_data data in
      passOptionalUnion4 ~testBinding ~data
    
    let passOptionalUnion5 ~testBinding ~bool =
      let conv_bool = function
        | `Int (x: int) -> Obj.magic x
        | `Js_boolean (x: Js.boolean) -> Obj.magic x
         in
      let conv_bool = access_undef conv_bool in
      let bool = conv_bool bool in
      let return = passOptionalUnion5 ~testBinding ~bool in
      return
    
    let passOptionalUnion5 ~testBinding ?bool () =
      let conv_bool = Js_undefined.from_opt in
      let bool = conv_bool bool in
      passOptionalUnion5 ~testBinding ~bool
    
    let passOptionalUnion6 ~testBinding ~arg =
      let conv_arg = function
        | `String (x: string) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let conv_arg = access_undef conv_arg in
      let arg = conv_arg arg in
      let return = passOptionalUnion6 ~testBinding ~arg in
      return
    
    let passOptionalUnion6 ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalUnion6 ~testBinding ~arg
    
    let passOptionalUnrestrictedDouble ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalUnrestrictedDouble ~testBinding ~arg
    
    let passOptionalUnrestrictedFloat ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalUnrestrictedFloat ~testBinding ~arg
    
    let passOptionalUnsignedLong ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalUnsignedLong ~testBinding ~arg
    
    let passOptionalUnsignedLongLong ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalUnsignedLongLong ~testBinding ~arg
    
    let passOptionalUnsignedLongLongWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalUnsignedLongLongWithDefault ~testBinding ~arg
    
    let passOptionalUnsignedLongWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalUnsignedLongWithDefault ~testBinding ~arg
    
    let passOptionalUnsignedShort ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalUnsignedShort ~testBinding ~arg
    
    let passOptionalUnsignedShortWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalUnsignedShortWithDefault ~testBinding ~arg
    
    let passOptionalUsvstring ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalUsvstring ~testBinding ~arg
    
    let passOptionalUsvstringWithDefault ~testBinding ?arg () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passOptionalUsvstringWithDefault ~testBinding ~arg
    
    let passUnion ~testBinding ~arg =
      let conv_arg = function
        | `HTMLElement (x: (_) hTMLElement_like) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let arg = conv_arg arg in
      let return = passUnion ~testBinding ~arg in
      return
    
    let passUnion10 ~testBinding ~arg =
      let conv_arg = function
        | `String (x: string) -> Obj.magic x
        | `Any (x: 'a230) -> Obj.magic x
         in
      let arg = conv_arg arg in
      let return = passUnion10 ~testBinding ~arg in
      return
    
    let passUnion2 ~testBinding ~data =
      let conv_data = function
        | `Event (x: (_) event_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let data = conv_data data in
      let return = passUnion2 ~testBinding ~data in
      return
    
    let passUnion3 ~testBinding ~data =
      let conv_data = function
        | `Blob (x: (_) blob_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let data = conv_data data in
      let return = passUnion3 ~testBinding ~data in
      return
    
    let passUnion4 ~testBinding ~seq =
      let conv_seq = function
        | `String (x: string) -> Obj.magic x
        | `String_Array (x: string array) -> Obj.magic x
         in
      let seq = conv_seq seq in
      let return = passUnion4 ~testBinding ~seq in
      return
    
    let passUnion5 ~testBinding ~data =
      let conv_data = function
        | `String (x: string) -> Obj.magic x
        | `Js_boolean (x: Js.boolean) -> Obj.magic x
         in
      let data = conv_data data in
      let return = passUnion5 ~testBinding ~data in
      return
    
    let passUnion6 ~testBinding ~bool =
      let conv_bool = function
        | `Int (x: int) -> Obj.magic x
        | `Js_boolean (x: Js.boolean) -> Obj.magic x
         in
      let bool = conv_bool bool in
      let return = passUnion6 ~testBinding ~bool in
      return
    
    let passUnion7 ~testBinding ~arg =
      let conv_arg = function
        | `String_Array (x: string array) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let arg = conv_arg arg in
      let return = passUnion7 ~testBinding ~arg in
      return
    
    let passUnion8 ~testBinding ~arg =
      let conv_arg = function
        | `String_Array (x: string array) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let arg = conv_arg arg in
      let return = passUnion8 ~testBinding ~arg in
      return
    
    let passUnion9 ~testBinding ~arg =
      let conv_arg = function
        | `TestDictionary (x: (_) testDictionary_like) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let arg = conv_arg arg in
      let return = passUnion9 ~testBinding ~arg in
      return
    
    let passUnionSequenceSequence ~testBinding ~seq =
      let conv_seq = function
        | `Int (x: int) -> Obj.magic x
        | `Int_Array_Array (x: int array array) -> Obj.magic x
         in
      let seq = conv_seq seq in
      let return = passUnionSequenceSequence ~testBinding ~seq in
      return
    
    let passUnionWithTypedef ~testBinding ~arg =
      let conv_arg = function
        | `Document (x: (_) document_like) -> Obj.magic x
        | `Any (x: 'a231) -> Obj.magic x
         in
      let arg = conv_arg arg in
      let return = passUnionWithTypedef ~testBinding ~arg in
      return
    
    let passUnionWithTypedef2 ~testBinding ~arg =
      let conv_arg = function
        | `Int_Array (x: int array) -> Obj.magic x
        | `Any (x: 'a232) -> Obj.magic x
         in
      let arg = conv_arg arg in
      let return = passUnionWithTypedef2 ~testBinding ~arg in
      return
    
    let passVariadicAny ~testBinding ~args =
      let func = passVariadicAny testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicBoolean ~testBinding ~args =
      let func = passVariadicBoolean testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicBooleanAndDefault ~testBinding ~arg ~args =
      let func = passVariadicBooleanAndDefault testBinding in
      let args = to_arg args in
      let args = unsafe_add args arg in
      apply func testBinding args
    
    let passVariadicBooleanAndDefault ~testBinding ?arg ~args () =
      let conv_arg = Js_undefined.from_opt in
      let arg = conv_arg arg in
      passVariadicBooleanAndDefault ~testBinding ~arg ~args
    
    let passVariadicByte ~testBinding ~args =
      let func = passVariadicByte testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicByteString ~testBinding ~args =
      let func = passVariadicByteString testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicDouble ~testBinding ~args =
      let func = passVariadicDouble testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicEnum ~testBinding ~args =
      let func = passVariadicEnum testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicEnum ~testBinding ~args =
      let conv_args = function
        | `None -> ""
        | `foo -> "foo"
        | `bar -> "bar"
         in
      let conv_args = access_array conv_args in
      let args = conv_args args in
      let return = passVariadicEnum ~testBinding ~args in
      return
    
    let passVariadicFloat ~testBinding ~args =
      let func = passVariadicFloat testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicInterface ~testBinding ~args =
      let func = passVariadicInterface testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicLong ~testBinding ~args =
      let func = passVariadicLong testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicLongLong ~testBinding ~args =
      let func = passVariadicLongLong testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicObject ~testBinding ~args =
      let func = passVariadicObject testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicOctet ~testBinding ~args =
      let func = passVariadicOctet testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicShort ~testBinding ~args =
      let func = passVariadicShort testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicString ~testBinding ~args =
      let func = passVariadicString testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicUnion ~testBinding ~args =
      let func = passVariadicUnion testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicUnion ~testBinding ~args =
      let conv_args = function
        | `HTMLElement (x: (_) hTMLElement_like) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let conv_args = access_array conv_args in
      let args = conv_args args in
      let return = passVariadicUnion ~testBinding ~args in
      return
    
    let passVariadicUnion2 ~testBinding ~args =
      let func = passVariadicUnion2 testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicUnion2 ~testBinding ~args =
      let conv_args = function
        | `Event (x: (_) event_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_args = access_array conv_args in
      let args = conv_args args in
      let return = passVariadicUnion2 ~testBinding ~args in
      return
    
    let passVariadicUnion3 ~testBinding ~args =
      let func = passVariadicUnion3 testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicUnion3 ~testBinding ~args =
      let conv_args = function
        | `Blob (x: (_) blob_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_args = access_array conv_args in
      let args = conv_args args in
      let return = passVariadicUnion3 ~testBinding ~args in
      return
    
    let passVariadicUnion4 ~testBinding ~args =
      let func = passVariadicUnion4 testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicUnion4 ~testBinding ~args =
      let conv_args = function
        | `Blob (x: (_) blob_like) -> Obj.magic x
        | `Js_boolean (x: Js.boolean) -> Obj.magic x
         in
      let conv_args = access_array conv_args in
      let args = conv_args args in
      let return = passVariadicUnion4 ~testBinding ~args in
      return
    
    let passVariadicUnion5 ~testBinding ~args =
      let func = passVariadicUnion5 testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicUnion5 ~testBinding ~args =
      let conv_args = function
        | `String (x: string) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let conv_args = access_array conv_args in
      let args = conv_args args in
      let return = passVariadicUnion5 ~testBinding ~args in
      return
    
    let passVariadicUnion6 ~testBinding ~args =
      let func = passVariadicUnion6 testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicUnion6 ~testBinding ~args =
      let conv_args = function
        | `Int (x: int) -> Obj.magic x
        | `Js_boolean (x: Js.boolean) -> Obj.magic x
         in
      let conv_args = access_array conv_args in
      let args = conv_args args in
      let return = passVariadicUnion6 ~testBinding ~args in
      return
    
    let passVariadicUnion7 ~testBinding ~args =
      let func = passVariadicUnion7 testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicUnion7 ~testBinding ~args =
      let conv_args = function
        | `String (x: string) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let conv_args = access_array conv_args in
      let args = conv_args args in
      let return = passVariadicUnion7 ~testBinding ~args in
      return
    
    let passVariadicUnrestrictedDouble ~testBinding ~args =
      let func = passVariadicUnrestrictedDouble testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicUnrestrictedFloat ~testBinding ~args =
      let func = passVariadicUnrestrictedFloat testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicUnsignedLong ~testBinding ~args =
      let func = passVariadicUnsignedLong testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicUnsignedLongLong ~testBinding ~args =
      let func = passVariadicUnsignedLongLong testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicUnsignedShort ~testBinding ~args =
      let func = passVariadicUnsignedShort testBinding in
      let args = to_arg args in
      apply func testBinding args
    
    let passVariadicUsvstring ~testBinding ~args =
      let func = passVariadicUsvstring testBinding in
      let args = to_arg args in
      apply func testBinding args
    
end
 module WorkerLocation = struct
    
    
    external href : workerLocation:(_) workerLocation_like -> string = "href" [@@bs.get] 
    external protocol : workerLocation:(_) workerLocation_like -> string = "protocol" [@@bs.get] 
    external host : workerLocation:(_) workerLocation_like -> string = "host" [@@bs.get] 
    external hostname : workerLocation:(_) workerLocation_like -> string = "hostname" [@@bs.get] 
    external port : workerLocation:(_) workerLocation_like -> string = "port" [@@bs.get] 
    external pathname : workerLocation:(_) workerLocation_like -> string = "pathname" [@@bs.get] 
    external search : workerLocation:(_) workerLocation_like -> string = "search" [@@bs.get] 
    external hash : workerLocation:(_) workerLocation_like -> string = "hash" [@@bs.get] 
    external toString : workerLocation:(_) workerLocation_like -> string = "toString" [@@bs.send] 
    
    
end
 module CSS = struct
    
    
    external escape : cSS:(_) cSS_like -> ident:string -> string = "escape" [@@bs.send] 
    external supports : cSS:(_) cSS_like -> property:string -> value:string -> bool = "supports" [@@bs.send] 
    
    
end
 module CanvasGradient = struct
    
    
    external addColorStop : canvasGradient:(_) canvasGradient_like -> offset:float -> color:string -> unit = "addColorStop" [@@bs.send] 
    
    
end
 module VRFieldOfView = struct
    
    
    external upDegrees : vRFieldOfView:(_) vRFieldOfView_like -> float = "upDegrees" [@@bs.get] 
    external rightDegrees : vRFieldOfView:(_) vRFieldOfView_like -> float = "rightDegrees" [@@bs.get] 
    external downDegrees : vRFieldOfView:(_) vRFieldOfView_like -> float = "downDegrees" [@@bs.get] 
    external leftDegrees : vRFieldOfView:(_) vRFieldOfView_like -> float = "leftDegrees" [@@bs.get] 
    
    
end
 module CharacteristicEventHandlers = struct
    
    
    external oncharacteristicvaluechanged : characteristicEventHandlers:(_) characteristicEventHandlers_like -> (event -> 'a233 [@bs]) option = "oncharacteristicvaluechanged" [@@bs.get] [@@bs.return null_to_opt]
    external setOncharacteristicvaluechanged : characteristicEventHandlers:(_) characteristicEventHandlers_like -> oncharacteristicvaluechanged:(event -> 'a234 [@bs]) Js.null -> unit = "oncharacteristicvaluechanged" [@@bs.set]
    
    
end
 module Gamepad = struct
    
    
    external id : gamepad:(_) gamepad_like -> string = "id" [@@bs.get] 
    external index : gamepad:(_) gamepad_like -> int = "index" [@@bs.get] 
    external connected : gamepad:(_) gamepad_like -> bool = "connected" [@@bs.get] 
    external timestamp : gamepad:(_) gamepad_like -> float = "timestamp" [@@bs.get] 
    external mapping : gamepad:(_) gamepad_like -> string = "mapping" [@@bs.get] 
    external axes : gamepad:(_) gamepad_like -> Js_typed_array.Float64Array.t = "axes" [@@bs.get] 
    external buttons : gamepad:(_) gamepad_like -> gamepadButtonList = "buttons" [@@bs.get] 
    external hand : gamepad:(_) gamepad_like -> string = "hand" [@@bs.get] 
    external pose : gamepad:(_) gamepad_like -> vRPose option = "pose" [@@bs.get] [@@bs.return null_to_opt]
    external displayId : gamepad:(_) gamepad_like -> int = "displayId" [@@bs.get] 
    
    
end
 module TextDecoder = struct
    
    
    external encoding : textDecoder:(_) textDecoder_like -> string = "encoding" [@@bs.get] 
    external fatal : textDecoder:(_) textDecoder_like -> bool = "fatal" [@@bs.get] 
    external decode : textDecoder:(_) textDecoder_like -> ?input:'a235 Js.undefined -> string = "decode" [@@bs.send] 
    
    let decode ~textDecoder ?input () =
      let conv_input = Js_undefined.from_opt in
      let input = conv_input input in
      decode ~textDecoder ~input
    
end
 module TestBindingPairIterable = struct
    
    
    external add : testBindingPairIterable:(_) testBindingPairIterable_like -> key:string -> value:int -> unit = "add" [@@bs.send] 
    
    
end
 module HTMLHyperlinkElementUtils = struct
    
    
    external href : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> string = "href" [@@bs.get] 
    external setHref : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> href:string -> unit = "href" [@@bs.set]
    external origin : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> string = "origin" [@@bs.get] 
    external protocol : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> string = "protocol" [@@bs.get] 
    external setProtocol : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> protocol:string -> unit = "protocol" [@@bs.set]
    external username : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> string = "username" [@@bs.get] 
    external setUsername : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> username:string -> unit = "username" [@@bs.set]
    external password : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> string = "password" [@@bs.get] 
    external setPassword : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> password:string -> unit = "password" [@@bs.set]
    external host : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> string = "host" [@@bs.get] 
    external setHost : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> host:string -> unit = "host" [@@bs.set]
    external hostname : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> string = "hostname" [@@bs.get] 
    external setHostname : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> hostname:string -> unit = "hostname" [@@bs.set]
    external port : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> string = "port" [@@bs.get] 
    external setPort : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> port:string -> unit = "port" [@@bs.set]
    external pathname : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> string = "pathname" [@@bs.get] 
    external setPathname : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> pathname:string -> unit = "pathname" [@@bs.set]
    external search : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> string = "search" [@@bs.get] 
    external setSearch : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> search:string -> unit = "search" [@@bs.set]
    external hash : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> string = "hash" [@@bs.get] 
    external setHash : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> hash:string -> unit = "hash" [@@bs.set]
    external toString : hTMLHyperlinkElementUtils:(_) hTMLHyperlinkElementUtils_like -> string = "toString" [@@bs.send] 
    
    
end
 module NamedNodeMap = struct
    
    
    external length : namedNodeMap:(_) namedNodeMap_like -> int = "length" [@@bs.get] 
    external getNamedItem : namedNodeMap:(_) namedNodeMap_like -> qualifiedName:string -> attr option = "getNamedItem" [@@bs.send] [@@bs.return null_to_opt]
    external getNamedItemNS : namedNodeMap:(_) namedNodeMap_like -> namespace:string Js.null -> localName:string -> attr option = "getNamedItemNS" [@@bs.send] [@@bs.return null_to_opt]
    external item : namedNodeMap:(_) namedNodeMap_like -> index:int -> attr option = "item" [@@bs.send] [@@bs.return null_to_opt]
    external removeNamedItem : namedNodeMap:(_) namedNodeMap_like -> qualifiedName:string -> attr = "removeNamedItem" [@@bs.send] 
    external removeNamedItemNS : namedNodeMap:(_) namedNodeMap_like -> namespace:string Js.null -> localName:string -> attr = "removeNamedItemNS" [@@bs.send] 
    external setNamedItem : namedNodeMap:(_) namedNodeMap_like -> attr:(_) attr_like -> attr option = "setNamedItem" [@@bs.send] [@@bs.return null_to_opt]
    external setNamedItemNS : namedNodeMap:(_) namedNodeMap_like -> attr:(_) attr_like -> attr option = "setNamedItemNS" [@@bs.send] [@@bs.return null_to_opt]
    
    
end
 module TouchList = struct
    
    
    external length : touchList:(_) touchList_like -> int = "length" [@@bs.get] 
    external item : touchList:(_) touchList_like -> index:int -> touch option = "item" [@@bs.send] [@@bs.return null_to_opt]
    
    
end
 module WebGLActiveInfo = struct
    
    
    external size : webGLActiveInfo:(_) webGLActiveInfo_like -> int = "size" [@@bs.get] 
    external type_ : webGLActiveInfo:(_) webGLActiveInfo_like -> int = "type" [@@bs.get] 
    external name : webGLActiveInfo:(_) webGLActiveInfo_like -> string = "name" [@@bs.get] 
    
    
end
 module Plugin = struct
    
    
    external name : plugin:(_) plugin_like -> string = "name" [@@bs.get] 
    external description : plugin:(_) plugin_like -> string = "description" [@@bs.get] 
    external filename : plugin:(_) plugin_like -> string = "filename" [@@bs.get] 
    external length : plugin:(_) plugin_like -> int = "length" [@@bs.get] 
    external item : plugin:(_) plugin_like -> index:int -> mimeType option = "item" [@@bs.send] [@@bs.return null_to_opt]
    external namedItem : plugin:(_) plugin_like -> name:string -> mimeType option = "namedItem" [@@bs.send] [@@bs.return null_to_opt]
    
    
end
 module VRDisplayCapabilities = struct
    
    
    external hasPosition : vRDisplayCapabilities:(_) vRDisplayCapabilities_like -> bool = "hasPosition" [@@bs.get] 
    external hasOrientation : vRDisplayCapabilities:(_) vRDisplayCapabilities_like -> bool = "hasOrientation" [@@bs.get] 
    external hasExternalDisplay : vRDisplayCapabilities:(_) vRDisplayCapabilities_like -> bool = "hasExternalDisplay" [@@bs.get] 
    external canPresent : vRDisplayCapabilities:(_) vRDisplayCapabilities_like -> bool = "canPresent" [@@bs.get] 
    external maxLayers : vRDisplayCapabilities:(_) vRDisplayCapabilities_like -> int = "maxLayers" [@@bs.get] 
    
    
end
 module Headers = struct
    
    
    external append : headers:(_) headers_like -> name:string -> value:string -> unit = "append" [@@bs.send] 
    external delete : headers:(_) headers_like -> name:string -> unit = "delete" [@@bs.send] 
    external get : headers:(_) headers_like -> name:string -> string option = "get" [@@bs.send] [@@bs.return null_to_opt]
    external has : headers:(_) headers_like -> name:string -> bool = "has" [@@bs.send] 
    external set : headers:(_) headers_like -> name:string -> value:string -> unit = "set" [@@bs.send] 
    
    
end
 module OESTextureHalfFloatLinear = struct
    
    
    
    
    
end
 module Worklet = struct
    
    
    external addModule : worklet:(_) worklet_like -> moduleURL:string -> ?options:(_) workletOptions_like Js.undefined -> unit Js.Promise.t = "addModule" [@@bs.send] 
    
    let addModule ~worklet ~moduleURL ?options () =
      let conv_options = Js_undefined.from_opt in
      let options = conv_options options in
      addModule ~worklet ~moduleURL ~options
    
end
 module Navigator = struct
    
    
    external cookieEnabled : navigator:(_) navigator_like -> bool = "cookieEnabled" [@@bs.get] 
    external plugins : navigator:(_) navigator_like -> pluginArray = "plugins" [@@bs.get] 
    external mimeTypes : navigator:(_) navigator_like -> mimeTypeArray = "mimeTypes" [@@bs.get] 
    external language : navigator:(_) navigator_like -> string = "language" [@@bs.get] 
    external appCodeName : navigator:(_) navigator_like -> string = "appCodeName" [@@bs.get] 
    external appName : navigator:(_) navigator_like -> string = "appName" [@@bs.get] 
    external appVersion : navigator:(_) navigator_like -> string = "appVersion" [@@bs.get] 
    external platform : navigator:(_) navigator_like -> string = "platform" [@@bs.get] 
    external product : navigator:(_) navigator_like -> string = "product" [@@bs.get] 
    external userAgent : navigator:(_) navigator_like -> string = "userAgent" [@@bs.get] 
    external bluetooth : navigator:(_) navigator_like -> bluetooth = "bluetooth" [@@bs.get] 
    external serviceWorker : navigator:(_) navigator_like -> serviceWorkerContainer = "serviceWorker" [@@bs.get] 
    external vr : navigator:(_) navigator_like -> vR = "vr" [@@bs.get] 
    external permissions : navigator:(_) navigator_like -> permissions = "permissions" [@@bs.get] 
    external getGamepads : navigator:(_) navigator_like -> gamepadList = "getGamepads" [@@bs.send] 
    external javaEnabled : navigator:(_) navigator_like -> bool = "javaEnabled" [@@bs.send] 
    external taintEnabled : navigator:(_) navigator_like -> bool = "taintEnabled" [@@bs.send] 
    
    
end
 module NavigatorID = struct
    
    
    external appCodeName : navigatorID:(_) navigatorID_like -> string = "appCodeName" [@@bs.get] 
    external appName : navigatorID:(_) navigatorID_like -> string = "appName" [@@bs.get] 
    external appVersion : navigatorID:(_) navigatorID_like -> string = "appVersion" [@@bs.get] 
    external platform : navigatorID:(_) navigatorID_like -> string = "platform" [@@bs.get] 
    external product : navigatorID:(_) navigatorID_like -> string = "product" [@@bs.get] 
    external userAgent : navigatorID:(_) navigatorID_like -> string = "userAgent" [@@bs.get] 
    external taintEnabled : navigatorID:(_) navigatorID_like -> bool = "taintEnabled" [@@bs.send] 
    
    
end
 module NavigatorLanguage = struct
    
    
    external language : navigatorLanguage:(_) navigatorLanguage_like -> string = "language" [@@bs.get] 
    
    
end
 module NavigatorPlugins = struct
    
    
    external plugins : navigatorPlugins:(_) navigatorPlugins_like -> pluginArray = "plugins" [@@bs.get] 
    external mimeTypes : navigatorPlugins:(_) navigatorPlugins_like -> mimeTypeArray = "mimeTypes" [@@bs.get] 
    external javaEnabled : navigatorPlugins:(_) navigatorPlugins_like -> bool = "javaEnabled" [@@bs.send] 
    
    
end
 module NavigatorCookies = struct
    
    
    external cookieEnabled : navigatorCookies:(_) navigatorCookies_like -> bool = "cookieEnabled" [@@bs.get] 
    
    
end
 module PromiseNativeHandler = struct
    
    
    
    
    
end
 module FileReaderSync = struct
    
    
    
    
    
end
 module ImageData = struct
    
    
    external width : imageData:(_) imageData_like -> int = "width" [@@bs.get] 
    external height : imageData:(_) imageData_like -> int = "height" [@@bs.get] 
    external data : imageData:(_) imageData_like -> Js_typed_array.Uint8ClampedArray.t = "data" [@@bs.get] 
    
    
end
 module MimeType = struct
    
    
    external type_ : mimeType:(_) mimeType_like -> string = "type" [@@bs.get] 
    external description : mimeType:(_) mimeType_like -> string = "description" [@@bs.get] 
    external suffixes : mimeType:(_) mimeType_like -> string = "suffixes" [@@bs.get] 
    external enabledPlugin : mimeType:(_) mimeType_like -> plugin = "enabledPlugin" [@@bs.get] 
    
    
end
 module GlobalCrypto = struct
    
    
    external crypto : globalCrypto:(_) globalCrypto_like -> crypto = "crypto" [@@bs.get] 
    
    
end
 module Crypto = struct
    
    
    external getRandomValues : crypto:(_) crypto_like -> array:'a237 -> 'a236 = "getRandomValues" [@@bs.send] 
    
    
end
 module CSSStyleDeclaration = struct
    
    
    external cssText : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "cssText" [@@bs.get] 
    external setCssText : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> cssText:string -> unit = "cssText" [@@bs.set]
    external length : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> int = "length" [@@bs.get] 
    external cssFloat : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "cssFloat" [@@bs.get] 
    external setCssFloat : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> cssFloat:string -> unit = "cssFloat" [@@bs.set]
    external all : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "all" [@@bs.get] 
    external setAll : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> all:string -> unit = "all" [@@bs.set]
    external background : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "background" [@@bs.get] 
    external setBackground : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> background:string -> unit = "background" [@@bs.set]
    external backgroundColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "backgroundColor" [@@bs.get] 
    external setBackgroundColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> backgroundColor:string -> unit = "backgroundColor" [@@bs.set]
    external backgroundPosition : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "backgroundPosition" [@@bs.get] 
    external setBackgroundPosition : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> backgroundPosition:string -> unit = "backgroundPosition" [@@bs.set]
    external backgroundPositionX : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "backgroundPositionX" [@@bs.get] 
    external setBackgroundPositionX : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> backgroundPositionX:string -> unit = "backgroundPositionX" [@@bs.set]
    external backgroundPositionY : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "backgroundPositionY" [@@bs.get] 
    external setBackgroundPositionY : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> backgroundPositionY:string -> unit = "backgroundPositionY" [@@bs.set]
    external backgroundRepeat : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "backgroundRepeat" [@@bs.get] 
    external setBackgroundRepeat : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> backgroundRepeat:string -> unit = "backgroundRepeat" [@@bs.set]
    external backgroundImage : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "backgroundImage" [@@bs.get] 
    external setBackgroundImage : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> backgroundImage:string -> unit = "backgroundImage" [@@bs.set]
    external backgroundAttachment : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "backgroundAttachment" [@@bs.get] 
    external setBackgroundAttachment : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> backgroundAttachment:string -> unit = "backgroundAttachment" [@@bs.set]
    external backgroundSize : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "backgroundSize" [@@bs.get] 
    external setBackgroundSize : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> backgroundSize:string -> unit = "backgroundSize" [@@bs.set]
    external backgroundOrigin : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "backgroundOrigin" [@@bs.get] 
    external setBackgroundOrigin : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> backgroundOrigin:string -> unit = "backgroundOrigin" [@@bs.set]
    external backgroundClip : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "backgroundClip" [@@bs.get] 
    external setBackgroundClip : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> backgroundClip:string -> unit = "backgroundClip" [@@bs.set]
    external border : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "border" [@@bs.get] 
    external setBorder : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> border:string -> unit = "border" [@@bs.set]
    external borderColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderColor" [@@bs.get] 
    external setBorderColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderColor:string -> unit = "borderColor" [@@bs.set]
    external borderRadius : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderRadius" [@@bs.get] 
    external setBorderRadius : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderRadius:string -> unit = "borderRadius" [@@bs.set]
    external borderSpacing : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderSpacing" [@@bs.get] 
    external setBorderSpacing : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderSpacing:string -> unit = "borderSpacing" [@@bs.set]
    external borderStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderStyle" [@@bs.get] 
    external setBorderStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderStyle:string -> unit = "borderStyle" [@@bs.set]
    external borderWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderWidth" [@@bs.get] 
    external setBorderWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderWidth:string -> unit = "borderWidth" [@@bs.set]
    external borderBottom : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderBottom" [@@bs.get] 
    external setBorderBottom : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderBottom:string -> unit = "borderBottom" [@@bs.set]
    external borderBottomColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderBottomColor" [@@bs.get] 
    external setBorderBottomColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderBottomColor:string -> unit = "borderBottomColor" [@@bs.set]
    external borderBottomLeftRadius : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderBottomLeftRadius" [@@bs.get] 
    external setBorderBottomLeftRadius : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderBottomLeftRadius:string -> unit = "borderBottomLeftRadius" [@@bs.set]
    external borderBottomRightRadius : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderBottomRightRadius" [@@bs.get] 
    external setBorderBottomRightRadius : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderBottomRightRadius:string -> unit = "borderBottomRightRadius" [@@bs.set]
    external borderBottomStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderBottomStyle" [@@bs.get] 
    external setBorderBottomStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderBottomStyle:string -> unit = "borderBottomStyle" [@@bs.set]
    external borderBottomWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderBottomWidth" [@@bs.get] 
    external setBorderBottomWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderBottomWidth:string -> unit = "borderBottomWidth" [@@bs.set]
    external borderLeft : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderLeft" [@@bs.get] 
    external setBorderLeft : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderLeft:string -> unit = "borderLeft" [@@bs.set]
    external borderLeftColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderLeftColor" [@@bs.get] 
    external setBorderLeftColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderLeftColor:string -> unit = "borderLeftColor" [@@bs.set]
    external borderLeftStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderLeftStyle" [@@bs.get] 
    external setBorderLeftStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderLeftStyle:string -> unit = "borderLeftStyle" [@@bs.set]
    external borderLeftWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderLeftWidth" [@@bs.get] 
    external setBorderLeftWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderLeftWidth:string -> unit = "borderLeftWidth" [@@bs.set]
    external borderRight : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderRight" [@@bs.get] 
    external setBorderRight : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderRight:string -> unit = "borderRight" [@@bs.set]
    external borderRightColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderRightColor" [@@bs.get] 
    external setBorderRightColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderRightColor:string -> unit = "borderRightColor" [@@bs.set]
    external borderRightStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderRightStyle" [@@bs.get] 
    external setBorderRightStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderRightStyle:string -> unit = "borderRightStyle" [@@bs.set]
    external borderRightWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderRightWidth" [@@bs.get] 
    external setBorderRightWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderRightWidth:string -> unit = "borderRightWidth" [@@bs.set]
    external borderTop : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderTop" [@@bs.get] 
    external setBorderTop : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderTop:string -> unit = "borderTop" [@@bs.set]
    external borderTopColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderTopColor" [@@bs.get] 
    external setBorderTopColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderTopColor:string -> unit = "borderTopColor" [@@bs.set]
    external borderTopLeftRadius : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderTopLeftRadius" [@@bs.get] 
    external setBorderTopLeftRadius : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderTopLeftRadius:string -> unit = "borderTopLeftRadius" [@@bs.set]
    external borderTopRightRadius : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderTopRightRadius" [@@bs.get] 
    external setBorderTopRightRadius : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderTopRightRadius:string -> unit = "borderTopRightRadius" [@@bs.set]
    external borderTopStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderTopStyle" [@@bs.get] 
    external setBorderTopStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderTopStyle:string -> unit = "borderTopStyle" [@@bs.set]
    external borderTopWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderTopWidth" [@@bs.get] 
    external setBorderTopWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderTopWidth:string -> unit = "borderTopWidth" [@@bs.set]
    external borderImageSource : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderImageSource" [@@bs.get] 
    external setBorderImageSource : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderImageSource:string -> unit = "borderImageSource" [@@bs.set]
    external borderImageSlice : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderImageSlice" [@@bs.get] 
    external setBorderImageSlice : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderImageSlice:string -> unit = "borderImageSlice" [@@bs.set]
    external borderImageRepeat : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderImageRepeat" [@@bs.get] 
    external setBorderImageRepeat : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderImageRepeat:string -> unit = "borderImageRepeat" [@@bs.set]
    external borderImageOutset : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderImageOutset" [@@bs.get] 
    external setBorderImageOutset : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderImageOutset:string -> unit = "borderImageOutset" [@@bs.set]
    external borderImageWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderImageWidth" [@@bs.get] 
    external setBorderImageWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderImageWidth:string -> unit = "borderImageWidth" [@@bs.set]
    external borderImage : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderImage" [@@bs.get] 
    external setBorderImage : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderImage:string -> unit = "borderImage" [@@bs.set]
    external borderBlockStartColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderBlockStartColor" [@@bs.get] 
    external setBorderBlockStartColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderBlockStartColor:string -> unit = "borderBlockStartColor" [@@bs.set]
    external borderBlockStartWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderBlockStartWidth" [@@bs.get] 
    external setBorderBlockStartWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderBlockStartWidth:string -> unit = "borderBlockStartWidth" [@@bs.set]
    external borderBlockStartStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderBlockStartStyle" [@@bs.get] 
    external setBorderBlockStartStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderBlockStartStyle:string -> unit = "borderBlockStartStyle" [@@bs.set]
    external borderBlockEndColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderBlockEndColor" [@@bs.get] 
    external setBorderBlockEndColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderBlockEndColor:string -> unit = "borderBlockEndColor" [@@bs.set]
    external borderBlockEndWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderBlockEndWidth" [@@bs.get] 
    external setBorderBlockEndWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderBlockEndWidth:string -> unit = "borderBlockEndWidth" [@@bs.set]
    external borderBlockEndStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderBlockEndStyle" [@@bs.get] 
    external setBorderBlockEndStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderBlockEndStyle:string -> unit = "borderBlockEndStyle" [@@bs.set]
    external borderInlineStartColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderInlineStartColor" [@@bs.get] 
    external setBorderInlineStartColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderInlineStartColor:string -> unit = "borderInlineStartColor" [@@bs.set]
    external borderInlineStartWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderInlineStartWidth" [@@bs.get] 
    external setBorderInlineStartWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderInlineStartWidth:string -> unit = "borderInlineStartWidth" [@@bs.set]
    external borderInlineStartStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderInlineStartStyle" [@@bs.get] 
    external setBorderInlineStartStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderInlineStartStyle:string -> unit = "borderInlineStartStyle" [@@bs.set]
    external borderInlineEndColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderInlineEndColor" [@@bs.get] 
    external setBorderInlineEndColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderInlineEndColor:string -> unit = "borderInlineEndColor" [@@bs.set]
    external borderInlineEndWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderInlineEndWidth" [@@bs.get] 
    external setBorderInlineEndWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderInlineEndWidth:string -> unit = "borderInlineEndWidth" [@@bs.set]
    external borderInlineEndStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderInlineEndStyle" [@@bs.get] 
    external setBorderInlineEndStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderInlineEndStyle:string -> unit = "borderInlineEndStyle" [@@bs.set]
    external borderBlockStart : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderBlockStart" [@@bs.get] 
    external setBorderBlockStart : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderBlockStart:string -> unit = "borderBlockStart" [@@bs.set]
    external borderBlockEnd : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderBlockEnd" [@@bs.get] 
    external setBorderBlockEnd : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderBlockEnd:string -> unit = "borderBlockEnd" [@@bs.set]
    external borderInlineStart : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderInlineStart" [@@bs.get] 
    external setBorderInlineStart : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderInlineStart:string -> unit = "borderInlineStart" [@@bs.set]
    external borderInlineEnd : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderInlineEnd" [@@bs.get] 
    external setBorderInlineEnd : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderInlineEnd:string -> unit = "borderInlineEnd" [@@bs.set]
    external content : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "content" [@@bs.get] 
    external setContent : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> content:string -> unit = "content" [@@bs.set]
    external color : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "color" [@@bs.get] 
    external setColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> color:string -> unit = "color" [@@bs.set]
    external display : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "display" [@@bs.get] 
    external setDisplay : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> display:string -> unit = "display" [@@bs.set]
    external opacity : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "opacity" [@@bs.get] 
    external setOpacity : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> opacity:string -> unit = "opacity" [@@bs.set]
    external visibility : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "visibility" [@@bs.get] 
    external setVisibility : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> visibility:string -> unit = "visibility" [@@bs.set]
    external cursor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "cursor" [@@bs.get] 
    external setCursor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> cursor:string -> unit = "cursor" [@@bs.set]
    external boxSizing : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "boxSizing" [@@bs.get] 
    external setBoxSizing : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> boxSizing:string -> unit = "boxSizing" [@@bs.set]
    external boxShadow : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "boxShadow" [@@bs.get] 
    external setBoxShadow : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> boxShadow:string -> unit = "boxShadow" [@@bs.set]
    external textShadow : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "textShadow" [@@bs.get] 
    external setTextShadow : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> textShadow:string -> unit = "textShadow" [@@bs.set]
    external _float : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "_float" [@@bs.get] 
    external set_float : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> _float:string -> unit = "_float" [@@bs.set]
    external clear : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "clear" [@@bs.get] 
    external setClear : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> clear:string -> unit = "clear" [@@bs.set]
    external clip : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "clip" [@@bs.get] 
    external setClip : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> clip:string -> unit = "clip" [@@bs.set]
    external transform : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "transform" [@@bs.get] 
    external setTransform : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> transform:string -> unit = "transform" [@@bs.set]
    external transformOrigin : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "transformOrigin" [@@bs.get] 
    external setTransformOrigin : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> transformOrigin:string -> unit = "transformOrigin" [@@bs.set]
    external perspective : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "perspective" [@@bs.get] 
    external setPerspective : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> perspective:string -> unit = "perspective" [@@bs.set]
    external perspectiveOrigin : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "perspectiveOrigin" [@@bs.get] 
    external setPerspectiveOrigin : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> perspectiveOrigin:string -> unit = "perspectiveOrigin" [@@bs.set]
    external transformStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "transformStyle" [@@bs.get] 
    external setTransformStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> transformStyle:string -> unit = "transformStyle" [@@bs.set]
    external backfaceVisibility : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "backfaceVisibility" [@@bs.get] 
    external setBackfaceVisibility : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> backfaceVisibility:string -> unit = "backfaceVisibility" [@@bs.set]
    external direction : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "direction" [@@bs.get] 
    external setDirection : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> direction:string -> unit = "direction" [@@bs.set]
    external unicodeBidi : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "unicodeBidi" [@@bs.get] 
    external setUnicodeBidi : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> unicodeBidi:string -> unit = "unicodeBidi" [@@bs.set]
    external filter : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "filter" [@@bs.get] 
    external setFilter : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> filter:string -> unit = "filter" [@@bs.set]
    external lineHeight : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "lineHeight" [@@bs.get] 
    external setLineHeight : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> lineHeight:string -> unit = "lineHeight" [@@bs.set]
    external mixBlendMode : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "mixBlendMode" [@@bs.get] 
    external setMixBlendMode : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> mixBlendMode:string -> unit = "mixBlendMode" [@@bs.set]
    external verticalAlign : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "verticalAlign" [@@bs.get] 
    external setVerticalAlign : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> verticalAlign:string -> unit = "verticalAlign" [@@bs.set]
    external listStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "listStyle" [@@bs.get] 
    external setListStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> listStyle:string -> unit = "listStyle" [@@bs.set]
    external listStylePosition : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "listStylePosition" [@@bs.get] 
    external setListStylePosition : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> listStylePosition:string -> unit = "listStylePosition" [@@bs.set]
    external listStyleType : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "listStyleType" [@@bs.get] 
    external setListStyleType : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> listStyleType:string -> unit = "listStyleType" [@@bs.set]
    external listStyleImage : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "listStyleImage" [@@bs.get] 
    external setListStyleImage : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> listStyleImage:string -> unit = "listStyleImage" [@@bs.set]
    external quotes : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "quotes" [@@bs.get] 
    external setQuotes : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> quotes:string -> unit = "quotes" [@@bs.set]
    external counterIncrement : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "counterIncrement" [@@bs.get] 
    external setCounterIncrement : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> counterIncrement:string -> unit = "counterIncrement" [@@bs.set]
    external counterReset : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "counterReset" [@@bs.get] 
    external setCounterReset : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> counterReset:string -> unit = "counterReset" [@@bs.set]
    external overflow : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "overflow" [@@bs.get] 
    external setOverflow : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> overflow:string -> unit = "overflow" [@@bs.set]
    external overflowX : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "overflowX" [@@bs.get] 
    external setOverflowX : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> overflowX:string -> unit = "overflowX" [@@bs.set]
    external overflowY : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "overflowY" [@@bs.get] 
    external setOverflowY : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> overflowY:string -> unit = "overflowY" [@@bs.set]
    external overflowWrap : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "overflowWrap" [@@bs.get] 
    external setOverflowWrap : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> overflowWrap:string -> unit = "overflowWrap" [@@bs.set]
    external tableLayout : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "tableLayout" [@@bs.get] 
    external setTableLayout : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> tableLayout:string -> unit = "tableLayout" [@@bs.set]
    external borderCollapse : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "borderCollapse" [@@bs.get] 
    external setBorderCollapse : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> borderCollapse:string -> unit = "borderCollapse" [@@bs.set]
    external emptyCells : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "emptyCells" [@@bs.get] 
    external setEmptyCells : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> emptyCells:string -> unit = "emptyCells" [@@bs.set]
    external captionSide : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "captionSide" [@@bs.get] 
    external setCaptionSide : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> captionSide:string -> unit = "captionSide" [@@bs.set]
    external whiteSpace : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "whiteSpace" [@@bs.get] 
    external setWhiteSpace : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> whiteSpace:string -> unit = "whiteSpace" [@@bs.set]
    external writingMode : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "writingMode" [@@bs.get] 
    external setWritingMode : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> writingMode:string -> unit = "writingMode" [@@bs.set]
    external letterSpacing : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "letterSpacing" [@@bs.get] 
    external setLetterSpacing : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> letterSpacing:string -> unit = "letterSpacing" [@@bs.set]
    external wordBreak : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "wordBreak" [@@bs.get] 
    external setWordBreak : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> wordBreak:string -> unit = "wordBreak" [@@bs.set]
    external wordSpacing : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "wordSpacing" [@@bs.get] 
    external setWordSpacing : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> wordSpacing:string -> unit = "wordSpacing" [@@bs.set]
    external wordWrap : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "wordWrap" [@@bs.get] 
    external setWordWrap : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> wordWrap:string -> unit = "wordWrap" [@@bs.set]
    external textOverflow : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "textOverflow" [@@bs.get] 
    external setTextOverflow : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> textOverflow:string -> unit = "textOverflow" [@@bs.set]
    external textAlign : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "textAlign" [@@bs.get] 
    external setTextAlign : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> textAlign:string -> unit = "textAlign" [@@bs.set]
    external textDecoration : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "textDecoration" [@@bs.get] 
    external setTextDecoration : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> textDecoration:string -> unit = "textDecoration" [@@bs.set]
    external textDecorationLine : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "textDecorationLine" [@@bs.get] 
    external setTextDecorationLine : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> textDecorationLine:string -> unit = "textDecorationLine" [@@bs.set]
    external textIndent : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "textIndent" [@@bs.get] 
    external setTextIndent : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> textIndent:string -> unit = "textIndent" [@@bs.set]
    external textJustify : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "textJustify" [@@bs.get] 
    external setTextJustify : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> textJustify:string -> unit = "textJustify" [@@bs.set]
    external textRendering : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "textRendering" [@@bs.get] 
    external setTextRendering : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> textRendering:string -> unit = "textRendering" [@@bs.set]
    external textTransform : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "textTransform" [@@bs.get] 
    external setTextTransform : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> textTransform:string -> unit = "textTransform" [@@bs.set]
    external font : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "font" [@@bs.get] 
    external setFont : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> font:string -> unit = "font" [@@bs.set]
    external fontFamily : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "fontFamily" [@@bs.get] 
    external setFontFamily : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> fontFamily:string -> unit = "fontFamily" [@@bs.set]
    external fontSize : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "fontSize" [@@bs.get] 
    external setFontSize : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> fontSize:string -> unit = "fontSize" [@@bs.set]
    external fontStretch : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "fontStretch" [@@bs.get] 
    external setFontStretch : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> fontStretch:string -> unit = "fontStretch" [@@bs.set]
    external fontStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "fontStyle" [@@bs.get] 
    external setFontStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> fontStyle:string -> unit = "fontStyle" [@@bs.set]
    external fontVariant : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "fontVariant" [@@bs.get] 
    external setFontVariant : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> fontVariant:string -> unit = "fontVariant" [@@bs.set]
    external fontVariantCaps : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "fontVariantCaps" [@@bs.get] 
    external setFontVariantCaps : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> fontVariantCaps:string -> unit = "fontVariantCaps" [@@bs.set]
    external fontWeight : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "fontWeight" [@@bs.get] 
    external setFontWeight : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> fontWeight:string -> unit = "fontWeight" [@@bs.set]
    external margin : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "margin" [@@bs.get] 
    external setMargin : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> margin:string -> unit = "margin" [@@bs.set]
    external marginBottom : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "marginBottom" [@@bs.get] 
    external setMarginBottom : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> marginBottom:string -> unit = "marginBottom" [@@bs.set]
    external marginLeft : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "marginLeft" [@@bs.get] 
    external setMarginLeft : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> marginLeft:string -> unit = "marginLeft" [@@bs.set]
    external marginRight : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "marginRight" [@@bs.get] 
    external setMarginRight : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> marginRight:string -> unit = "marginRight" [@@bs.set]
    external marginTop : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "marginTop" [@@bs.get] 
    external setMarginTop : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> marginTop:string -> unit = "marginTop" [@@bs.set]
    external marginBlockStart : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "marginBlockStart" [@@bs.get] 
    external setMarginBlockStart : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> marginBlockStart:string -> unit = "marginBlockStart" [@@bs.set]
    external marginBlockEnd : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "marginBlockEnd" [@@bs.get] 
    external setMarginBlockEnd : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> marginBlockEnd:string -> unit = "marginBlockEnd" [@@bs.set]
    external marginInlineStart : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "marginInlineStart" [@@bs.get] 
    external setMarginInlineStart : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> marginInlineStart:string -> unit = "marginInlineStart" [@@bs.set]
    external marginInlineEnd : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "marginInlineEnd" [@@bs.get] 
    external setMarginInlineEnd : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> marginInlineEnd:string -> unit = "marginInlineEnd" [@@bs.set]
    external padding : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "padding" [@@bs.get] 
    external setPadding : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> padding:string -> unit = "padding" [@@bs.set]
    external paddingBottom : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "paddingBottom" [@@bs.get] 
    external setPaddingBottom : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> paddingBottom:string -> unit = "paddingBottom" [@@bs.set]
    external paddingLeft : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "paddingLeft" [@@bs.get] 
    external setPaddingLeft : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> paddingLeft:string -> unit = "paddingLeft" [@@bs.set]
    external paddingRight : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "paddingRight" [@@bs.get] 
    external setPaddingRight : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> paddingRight:string -> unit = "paddingRight" [@@bs.set]
    external paddingTop : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "paddingTop" [@@bs.get] 
    external setPaddingTop : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> paddingTop:string -> unit = "paddingTop" [@@bs.set]
    external paddingBlockStart : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "paddingBlockStart" [@@bs.get] 
    external setPaddingBlockStart : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> paddingBlockStart:string -> unit = "paddingBlockStart" [@@bs.set]
    external paddingBlockEnd : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "paddingBlockEnd" [@@bs.get] 
    external setPaddingBlockEnd : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> paddingBlockEnd:string -> unit = "paddingBlockEnd" [@@bs.set]
    external paddingInlineStart : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "paddingInlineStart" [@@bs.get] 
    external setPaddingInlineStart : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> paddingInlineStart:string -> unit = "paddingInlineStart" [@@bs.set]
    external paddingInlineEnd : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "paddingInlineEnd" [@@bs.get] 
    external setPaddingInlineEnd : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> paddingInlineEnd:string -> unit = "paddingInlineEnd" [@@bs.set]
    external outline : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "outline" [@@bs.get] 
    external setOutline : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> outline:string -> unit = "outline" [@@bs.set]
    external outlineColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "outlineColor" [@@bs.get] 
    external setOutlineColor : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> outlineColor:string -> unit = "outlineColor" [@@bs.set]
    external outlineStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "outlineStyle" [@@bs.get] 
    external setOutlineStyle : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> outlineStyle:string -> unit = "outlineStyle" [@@bs.set]
    external outlineWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "outlineWidth" [@@bs.get] 
    external setOutlineWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> outlineWidth:string -> unit = "outlineWidth" [@@bs.set]
    external outlineOffset : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "outlineOffset" [@@bs.get] 
    external setOutlineOffset : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> outlineOffset:string -> unit = "outlineOffset" [@@bs.set]
    external position : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "position" [@@bs.get] 
    external setPosition : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> position:string -> unit = "position" [@@bs.set]
    external pointerEvents : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "pointerEvents" [@@bs.get] 
    external setPointerEvents : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> pointerEvents:string -> unit = "pointerEvents" [@@bs.set]
    external top : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "top" [@@bs.get] 
    external setTop : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> top:string -> unit = "top" [@@bs.set]
    external right : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "right" [@@bs.get] 
    external setRight : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> right:string -> unit = "right" [@@bs.set]
    external left : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "left" [@@bs.get] 
    external setLeft : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> left:string -> unit = "left" [@@bs.set]
    external bottom : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "bottom" [@@bs.get] 
    external setBottom : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> bottom:string -> unit = "bottom" [@@bs.set]
    external offsetBlockStart : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "offsetBlockStart" [@@bs.get] 
    external setOffsetBlockStart : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> offsetBlockStart:string -> unit = "offsetBlockStart" [@@bs.set]
    external offsetBlockEnd : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "offsetBlockEnd" [@@bs.get] 
    external setOffsetBlockEnd : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> offsetBlockEnd:string -> unit = "offsetBlockEnd" [@@bs.set]
    external offsetInlineStart : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "offsetInlineStart" [@@bs.get] 
    external setOffsetInlineStart : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> offsetInlineStart:string -> unit = "offsetInlineStart" [@@bs.set]
    external offsetInlineEnd : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "offsetInlineEnd" [@@bs.get] 
    external setOffsetInlineEnd : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> offsetInlineEnd:string -> unit = "offsetInlineEnd" [@@bs.set]
    external height : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "height" [@@bs.get] 
    external setHeight : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> height:string -> unit = "height" [@@bs.set]
    external minHeight : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "minHeight" [@@bs.get] 
    external setMinHeight : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> minHeight:string -> unit = "minHeight" [@@bs.set]
    external maxHeight : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "maxHeight" [@@bs.get] 
    external setMaxHeight : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> maxHeight:string -> unit = "maxHeight" [@@bs.set]
    external width : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "width" [@@bs.get] 
    external setWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> width:string -> unit = "width" [@@bs.set]
    external minWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "minWidth" [@@bs.get] 
    external setMinWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> minWidth:string -> unit = "minWidth" [@@bs.set]
    external maxWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "maxWidth" [@@bs.get] 
    external setMaxWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> maxWidth:string -> unit = "maxWidth" [@@bs.set]
    external blockSize : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "blockSize" [@@bs.get] 
    external setBlockSize : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> blockSize:string -> unit = "blockSize" [@@bs.set]
    external inlineSize : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "inlineSize" [@@bs.get] 
    external setInlineSize : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> inlineSize:string -> unit = "inlineSize" [@@bs.set]
    external maxBlockSize : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "maxBlockSize" [@@bs.get] 
    external setMaxBlockSize : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> maxBlockSize:string -> unit = "maxBlockSize" [@@bs.set]
    external maxInlineSize : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "maxInlineSize" [@@bs.get] 
    external setMaxInlineSize : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> maxInlineSize:string -> unit = "maxInlineSize" [@@bs.set]
    external minBlockSize : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "minBlockSize" [@@bs.get] 
    external setMinBlockSize : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> minBlockSize:string -> unit = "minBlockSize" [@@bs.set]
    external minInlineSize : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "minInlineSize" [@@bs.get] 
    external setMinInlineSize : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> minInlineSize:string -> unit = "minInlineSize" [@@bs.set]
    external zIndex : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "zIndex" [@@bs.get] 
    external setZIndex : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> zIndex:string -> unit = "zIndex" [@@bs.set]
    external imageRendering : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "imageRendering" [@@bs.get] 
    external setImageRendering : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> imageRendering:string -> unit = "imageRendering" [@@bs.set]
    external columnCount : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "columnCount" [@@bs.get] 
    external setColumnCount : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> columnCount:string -> unit = "columnCount" [@@bs.set]
    external columnWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "columnWidth" [@@bs.get] 
    external setColumnWidth : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> columnWidth:string -> unit = "columnWidth" [@@bs.set]
    external columns : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "columns" [@@bs.get] 
    external setColumns : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> columns:string -> unit = "columns" [@@bs.set]
    external columnGap : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "columnGap" [@@bs.get] 
    external setColumnGap : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> columnGap:string -> unit = "columnGap" [@@bs.set]
    external transition : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "transition" [@@bs.get] 
    external setTransition : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> transition:string -> unit = "transition" [@@bs.set]
    external transitionDuration : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "transitionDuration" [@@bs.get] 
    external setTransitionDuration : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> transitionDuration:string -> unit = "transitionDuration" [@@bs.set]
    external transitionTimingFunction : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "transitionTimingFunction" [@@bs.get] 
    external setTransitionTimingFunction : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> transitionTimingFunction:string -> unit = "transitionTimingFunction" [@@bs.set]
    external transitionProperty : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "transitionProperty" [@@bs.get] 
    external setTransitionProperty : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> transitionProperty:string -> unit = "transitionProperty" [@@bs.set]
    external transitionDelay : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "transitionDelay" [@@bs.get] 
    external setTransitionDelay : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> transitionDelay:string -> unit = "transitionDelay" [@@bs.set]
    external flex : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "flex" [@@bs.get] 
    external setFlex : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> flex:string -> unit = "flex" [@@bs.set]
    external flexFlow : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "flexFlow" [@@bs.get] 
    external setFlexFlow : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> flexFlow:string -> unit = "flexFlow" [@@bs.set]
    external flexDirection : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "flexDirection" [@@bs.get] 
    external setFlexDirection : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> flexDirection:string -> unit = "flexDirection" [@@bs.set]
    external flexWrap : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "flexWrap" [@@bs.get] 
    external setFlexWrap : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> flexWrap:string -> unit = "flexWrap" [@@bs.set]
    external justifyContent : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "justifyContent" [@@bs.get] 
    external setJustifyContent : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> justifyContent:string -> unit = "justifyContent" [@@bs.set]
    external alignItems : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "alignItems" [@@bs.get] 
    external setAlignItems : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> alignItems:string -> unit = "alignItems" [@@bs.set]
    external alignContent : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "alignContent" [@@bs.get] 
    external setAlignContent : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> alignContent:string -> unit = "alignContent" [@@bs.set]
    external order : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "order" [@@bs.get] 
    external setOrder : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> order:string -> unit = "order" [@@bs.set]
    external flexBasis : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "flexBasis" [@@bs.get] 
    external setFlexBasis : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> flexBasis:string -> unit = "flexBasis" [@@bs.set]
    external flexGrow : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "flexGrow" [@@bs.get] 
    external setFlexGrow : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> flexGrow:string -> unit = "flexGrow" [@@bs.set]
    external flexShrink : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "flexShrink" [@@bs.get] 
    external setFlexShrink : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> flexShrink:string -> unit = "flexShrink" [@@bs.set]
    external alignSelf : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "alignSelf" [@@bs.get] 
    external setAlignSelf : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> alignSelf:string -> unit = "alignSelf" [@@bs.set]
    external animation : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "animation" [@@bs.get] 
    external setAnimation : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> animation:string -> unit = "animation" [@@bs.set]
    external animationName : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "animationName" [@@bs.get] 
    external setAnimationName : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> animationName:string -> unit = "animationName" [@@bs.set]
    external animationDuration : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "animationDuration" [@@bs.get] 
    external setAnimationDuration : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> animationDuration:string -> unit = "animationDuration" [@@bs.set]
    external animationTimingFunction : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "animationTimingFunction" [@@bs.get] 
    external setAnimationTimingFunction : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> animationTimingFunction:string -> unit = "animationTimingFunction" [@@bs.set]
    external animationIterationCount : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "animationIterationCount" [@@bs.get] 
    external setAnimationIterationCount : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> animationIterationCount:string -> unit = "animationIterationCount" [@@bs.set]
    external animationDirection : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "animationDirection" [@@bs.get] 
    external setAnimationDirection : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> animationDirection:string -> unit = "animationDirection" [@@bs.set]
    external animationPlayState : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "animationPlayState" [@@bs.get] 
    external setAnimationPlayState : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> animationPlayState:string -> unit = "animationPlayState" [@@bs.set]
    external animationFillMode : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "animationFillMode" [@@bs.get] 
    external setAnimationFillMode : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> animationFillMode:string -> unit = "animationFillMode" [@@bs.set]
    external animationDelay : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> string = "animationDelay" [@@bs.get] 
    external setAnimationDelay : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> animationDelay:string -> unit = "animationDelay" [@@bs.set]
    external getPropertyPriority : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> property:string -> string = "getPropertyPriority" [@@bs.send] 
    external getPropertyValue : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> property:string -> string = "getPropertyValue" [@@bs.send] 
    external item : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> index:int -> string = "item" [@@bs.send] 
    external removeProperty : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> property:string -> string = "removeProperty" [@@bs.send] 
    external setProperty : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> property:string -> value:string -> ?priority:string Js.undefined -> unit = "setProperty" [@@bs.send] 
    external setPropertyPriority : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> property:string -> priority:string -> unit = "setPropertyPriority" [@@bs.send] 
    external setPropertyValue : cSSStyleDeclaration:(_) cSSStyleDeclaration_like -> property:string -> value:string -> unit = "setPropertyValue" [@@bs.send] 
    
    let setProperty ~cSSStyleDeclaration ~property ~value ?priority () =
      let conv_priority = Js_undefined.from_opt in
      let priority = conv_priority priority in
      setProperty ~cSSStyleDeclaration ~property ~value ~priority
    
end
 module DOMQuad = struct
    
    
    external p1 : dOMQuad:(_) dOMQuad_like -> dOMPoint = "p1" [@@bs.get] 
    external p2 : dOMQuad:(_) dOMQuad_like -> dOMPoint = "p2" [@@bs.get] 
    external p3 : dOMQuad:(_) dOMQuad_like -> dOMPoint = "p3" [@@bs.get] 
    external p4 : dOMQuad:(_) dOMQuad_like -> dOMPoint = "p4" [@@bs.get] 
    external fromQuad : dOMQuad:(_) dOMQuad_like -> ?other:(_) dOMQuadInit_like Js.undefined -> dOMQuad = "fromQuad" [@@bs.send] 
    external fromRect : dOMQuad:(_) dOMQuad_like -> ?other:(_) dOMRectInit_like Js.undefined -> dOMQuad = "fromRect" [@@bs.send] 
    external getBounds : dOMQuad:(_) dOMQuad_like -> dOMRect = "getBounds" [@@bs.send] 
    
    let fromQuad ~dOMQuad ?other () =
      let conv_other = Js_undefined.from_opt in
      let other = conv_other other in
      fromQuad ~dOMQuad ~other
    
    let fromRect ~dOMQuad ?other () =
      let conv_other = Js_undefined.from_opt in
      let other = conv_other other in
      fromRect ~dOMQuad ~other
    
end
 module Request = struct
    
    
    external bodyUsed : request:(_) request_like -> bool = "bodyUsed" [@@bs.get] 
    external method_ : request:(_) request_like -> string = "method" [@@bs.get] 
    external url : request:(_) request_like -> string = "url" [@@bs.get] 
    external headers : request:(_) request_like -> headers = "headers" [@@bs.get] 
    external type_ : request:(_) request_like -> string = "type" [@@bs.get] 
    external destination : request:(_) request_like -> string = "destination" [@@bs.get] 
    external referrer : request:(_) request_like -> string = "referrer" [@@bs.get] 
    external referrerPolicy : request:(_) request_like -> string = "referrerPolicy" [@@bs.get] 
    external mode : request:(_) request_like -> string = "mode" [@@bs.get] 
    external credentials : request:(_) request_like -> string = "credentials" [@@bs.get] 
    external cache : request:(_) request_like -> string = "cache" [@@bs.get] 
    external redirect : request:(_) request_like -> string = "redirect" [@@bs.get] 
    external integrity : request:(_) request_like -> string = "integrity" [@@bs.get] 
    external blob : request:(_) request_like -> blob Js.Promise.t = "blob" [@@bs.send] 
    external clone : request:(_) request_like -> request = "clone" [@@bs.send] 
    external formData : request:(_) request_like -> formData Js.Promise.t = "formData" [@@bs.send] 
    external json : request:(_) request_like -> 'a238 Js.Promise.t = "json" [@@bs.send] 
    external text : request:(_) request_like -> string Js.Promise.t = "text" [@@bs.send] 
    
    
end
 module DOMTokenList = struct
    
    
    external length : dOMTokenList:(_) dOMTokenList_like -> int = "length" [@@bs.get] 
    external value : dOMTokenList:(_) dOMTokenList_like -> string = "value" [@@bs.get] 
    external setValue : dOMTokenList:(_) dOMTokenList_like -> value:string -> unit = "value" [@@bs.set]
    external add : dOMTokenList:(_) dOMTokenList_like -> ((_) dOMTokenList_like, unit, (string)) variadic_func = "add" [@@bs.get]
    external contains : dOMTokenList:(_) dOMTokenList_like -> token:string -> bool = "contains" [@@bs.send] 
    external item : dOMTokenList:(_) dOMTokenList_like -> index:int -> string option = "item" [@@bs.send] [@@bs.return null_to_opt]
    external remove : dOMTokenList:(_) dOMTokenList_like -> ((_) dOMTokenList_like, unit, (string)) variadic_func = "remove" [@@bs.get]
    external replace : dOMTokenList:(_) dOMTokenList_like -> token:string -> newToken:string -> unit = "replace" [@@bs.send] 
    external toString : dOMTokenList:(_) dOMTokenList_like -> string = "toString" [@@bs.send] 
    external toggle : dOMTokenList:(_) dOMTokenList_like -> token:string -> ?force:Js.boolean Js.undefined -> bool = "toggle" [@@bs.send] 
    
    let add ~dOMTokenList ~tokens =
      let func = add dOMTokenList in
      let args = to_arg tokens in
      apply func dOMTokenList args
    
    let remove ~dOMTokenList ~tokens =
      let func = remove dOMTokenList in
      let args = to_arg tokens in
      apply func dOMTokenList args
    
    let toggle ~dOMTokenList ~token ?force () =
      let conv_force = Js_undefined.from_opt in
      let force = conv_force force in
      toggle ~dOMTokenList ~token ~force
    
end
 module Promise = struct
    
    
    
    
    
end
 module VRPose = struct
    
    
    external position : vRPose:(_) vRPose_like -> Js_typed_array.Float32Array.t option = "position" [@@bs.get] [@@bs.return null_to_opt]
    external linearVelocity : vRPose:(_) vRPose_like -> Js_typed_array.Float32Array.t option = "linearVelocity" [@@bs.get] [@@bs.return null_to_opt]
    external linearAcceleration : vRPose:(_) vRPose_like -> Js_typed_array.Float32Array.t option = "linearAcceleration" [@@bs.get] [@@bs.return null_to_opt]
    external orientation : vRPose:(_) vRPose_like -> Js_typed_array.Float32Array.t option = "orientation" [@@bs.get] [@@bs.return null_to_opt]
    external angularVelocity : vRPose:(_) vRPose_like -> Js_typed_array.Float32Array.t option = "angularVelocity" [@@bs.get] [@@bs.return null_to_opt]
    external angularAcceleration : vRPose:(_) vRPose_like -> Js_typed_array.Float32Array.t option = "angularAcceleration" [@@bs.get] [@@bs.return null_to_opt]
    
    
end
 module GamepadButtonList = struct
    
    
    external length : gamepadButtonList:(_) gamepadButtonList_like -> int = "length" [@@bs.get] 
    external item : gamepadButtonList:(_) gamepadButtonList_like -> index:int -> gamepadButton option = "item" [@@bs.send] [@@bs.return null_to_opt]
    
    
end
 module DOMPointReadOnly = struct
    
    
    external x : dOMPointReadOnly:(_) dOMPointReadOnly_like -> float = "x" [@@bs.get] 
    external y : dOMPointReadOnly:(_) dOMPointReadOnly_like -> float = "y" [@@bs.get] 
    external z : dOMPointReadOnly:(_) dOMPointReadOnly_like -> float = "z" [@@bs.get] 
    external w : dOMPointReadOnly:(_) dOMPointReadOnly_like -> float = "w" [@@bs.get] 
    
    
end
 module Client = struct
    
    
    external url : client:(_) client_like -> string = "url" [@@bs.get] 
    external frameType : client:(_) client_like -> string = "frameType" [@@bs.get] 
    external id : client:(_) client_like -> string = "id" [@@bs.get] 
    
    
end
 module OESTextureFloatLinear = struct
    
    
    
    
    
end
 module WebGLShaderPrecisionFormat = struct
    
    
    external rangeMin : webGLShaderPrecisionFormat:(_) webGLShaderPrecisionFormat_like -> int = "rangeMin" [@@bs.get] 
    external rangeMax : webGLShaderPrecisionFormat:(_) webGLShaderPrecisionFormat_like -> int = "rangeMax" [@@bs.get] 
    external precision : webGLShaderPrecisionFormat:(_) webGLShaderPrecisionFormat_like -> int = "precision" [@@bs.get] 
    
    
end
 module Response = struct
    
    
    external bodyUsed : response:(_) response_like -> bool = "bodyUsed" [@@bs.get] 
    external type_ : response:(_) response_like -> string = "type" [@@bs.get] 
    external url : response:(_) response_like -> string = "url" [@@bs.get] 
    external redirected : response:(_) response_like -> bool = "redirected" [@@bs.get] 
    external status : response:(_) response_like -> int = "status" [@@bs.get] 
    external ok : response:(_) response_like -> bool = "ok" [@@bs.get] 
    external statusText : response:(_) response_like -> string = "statusText" [@@bs.get] 
    external headers : response:(_) response_like -> headers = "headers" [@@bs.get] 
    external blob : response:(_) response_like -> blob Js.Promise.t = "blob" [@@bs.send] 
    external clone : response:(_) response_like -> response = "clone" [@@bs.send] 
    external error : response:(_) response_like -> response = "error" [@@bs.send] 
    external formData : response:(_) response_like -> formData Js.Promise.t = "formData" [@@bs.send] 
    external json : response:(_) response_like -> 'a239 Js.Promise.t = "json" [@@bs.send] 
    external redirect : response:(_) response_like -> url:string -> ?status:int Js.undefined -> response = "redirect" [@@bs.send] 
    external text : response:(_) response_like -> string Js.Promise.t = "text" [@@bs.send] 
    
    let redirect ~response ~url ?status () =
      let conv_status = Js_undefined.from_opt in
      let status = conv_status status in
      redirect ~response ~url ~status
    
end
 module MediaError = struct
    
    
    external code : mediaError:(_) mediaError_like -> int = "code" [@@bs.get] 
    
    let media_err_aborted  =
      
      1
    
    let media_err_network  =
      
      2
    
    let media_err_decode  =
      
      3
    
    let media_err_src_not_supported  =
      
      4
    
end
 module VRStageParameters = struct
    
    
    external sittingToStandingTransform : vRStageParameters:(_) vRStageParameters_like -> Js_typed_array.Float32Array.t = "sittingToStandingTransform" [@@bs.get] 
    external sizeX : vRStageParameters:(_) vRStageParameters_like -> float = "sizeX" [@@bs.get] 
    external sizeZ : vRStageParameters:(_) vRStageParameters_like -> float = "sizeZ" [@@bs.get] 
    
    
end
 module AbstractWorker = struct
    
    
    external onerror : abstractWorker:(_) abstractWorker_like -> (event -> 'a240 [@bs]) option = "onerror" [@@bs.get] [@@bs.return null_to_opt]
    external setOnerror : abstractWorker:(_) abstractWorker_like -> onerror:(event -> 'a241 [@bs]) Js.null -> unit = "onerror" [@@bs.set]
    
    
end
 module TestWorklet = struct
    
    
    external addModule : testWorklet:(_) testWorklet_like -> moduleURL:string -> ?options:(_) workletOptions_like Js.undefined -> unit Js.Promise.t = "addModule" [@@bs.send] 
    external lookup : testWorklet:(_) testWorklet_like -> key:string -> string option = "lookup" [@@bs.send] [@@bs.return null_to_opt]
    
    let addModule ~testWorklet ~moduleURL ?options () =
      let conv_options = Js_undefined.from_opt in
      let options = conv_options options in
      addModule ~testWorklet ~moduleURL ~options
    
end
 module CSSRule = struct
    
    
    external type_ : cSSRule:(_) cSSRule_like -> int = "type" [@@bs.get] 
    external cssText : cSSRule:(_) cSSRule_like -> string = "cssText" [@@bs.get] 
    external setCssText : cSSRule:(_) cSSRule_like -> cssText:string -> unit = "cssText" [@@bs.set]
    external parentStyleSheet : cSSRule:(_) cSSRule_like -> cSSStyleSheet option = "parentStyleSheet" [@@bs.get] [@@bs.return null_to_opt]
    
    let style_rule  =
      
      1
    
    let charset_rule  =
      
      2
    
    let import_rule  =
      
      3
    
    let media_rule  =
      
      4
    
    let font_face_rule  =
      
      5
    
    let page_rule  =
      
      6
    
    let margin_rule  =
      
      9
    
    let namespace_rule  =
      
      10
    
    let keyframes_rule  =
      
      7
    
    let keyframe_rule  =
      
      8
    
    let viewport_rule  =
      
      15
    
    let supports_rule  =
      
      12
    
end
 module BluetoothUUID = struct
    
    
    external canonicalUUID : bluetoothUUID:(_) bluetoothUUID_like -> alias:int -> string = "canonicalUUID" [@@bs.send] 
    external getCharacteristic : bluetoothUUID:(_) bluetoothUUID_like -> name:'a242 -> string = "getCharacteristic" [@@bs.send] 
    external getDescriptor : bluetoothUUID:(_) bluetoothUUID_like -> name:'a243 -> string = "getDescriptor" [@@bs.send] 
    external getService : bluetoothUUID:(_) bluetoothUUID_like -> name:'a244 -> string = "getService" [@@bs.send] 
    
    let getCharacteristic ~bluetoothUUID ~name =
      let conv_name = function
        | `String (x: string) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let name = conv_name name in
      let return = getCharacteristic ~bluetoothUUID ~name in
      return
    
    let getDescriptor ~bluetoothUUID ~name =
      let conv_name = function
        | `String (x: string) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let name = conv_name name in
      let return = getDescriptor ~bluetoothUUID ~name in
      return
    
    let getService ~bluetoothUUID ~name =
      let conv_name = function
        | `String (x: string) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let name = conv_name name in
      let return = getService ~bluetoothUUID ~name in
      return
    
end
 module CanvasRenderingContext2D = struct
    
    
    external lineWidth : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> float = "lineWidth" [@@bs.get] 
    external setLineWidth : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> lineWidth:float -> unit = "lineWidth" [@@bs.set]
    external lineCap : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> string = "lineCap" [@@bs.get] 
    external setLineCap : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> lineCap:string -> unit = "lineCap" [@@bs.set]
    external lineJoin : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> string = "lineJoin" [@@bs.get] 
    external setLineJoin : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> lineJoin:string -> unit = "lineJoin" [@@bs.set]
    external miterLimit : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> float = "miterLimit" [@@bs.get] 
    external setMiterLimit : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> miterLimit:float -> unit = "miterLimit" [@@bs.set]
    external shadowOffsetX : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> float = "shadowOffsetX" [@@bs.get] 
    external setShadowOffsetX : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> shadowOffsetX:float -> unit = "shadowOffsetX" [@@bs.set]
    external shadowOffsetY : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> float = "shadowOffsetY" [@@bs.get] 
    external setShadowOffsetY : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> shadowOffsetY:float -> unit = "shadowOffsetY" [@@bs.set]
    external shadowBlur : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> float = "shadowBlur" [@@bs.get] 
    external setShadowBlur : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> shadowBlur:float -> unit = "shadowBlur" [@@bs.set]
    external shadowColor : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> string = "shadowColor" [@@bs.get] 
    external setShadowColor : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> shadowColor:string -> unit = "shadowColor" [@@bs.set]
    external strokeStyle : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> 'a245 = "strokeStyle" [@@bs.get] 
    external setStrokeStyle : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> strokeStyle:'a246 -> unit = "strokeStyle" [@@bs.set]
    external fillStyle : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> 'a247 = "fillStyle" [@@bs.get] 
    external setFillStyle : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> fillStyle:'a248 -> unit = "fillStyle" [@@bs.set]
    external imageSmoothingEnabled : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> bool = "imageSmoothingEnabled" [@@bs.get] 
    external setImageSmoothingEnabled : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> imageSmoothingEnabled:Js.boolean -> unit = "imageSmoothingEnabled" [@@bs.set]
    external globalAlpha : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> float = "globalAlpha" [@@bs.get] 
    external setGlobalAlpha : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> globalAlpha:float -> unit = "globalAlpha" [@@bs.set]
    external globalCompositeOperation : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> string = "globalCompositeOperation" [@@bs.get] 
    external setGlobalCompositeOperation : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> globalCompositeOperation:string -> unit = "globalCompositeOperation" [@@bs.set]
    external canvas : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> hTMLCanvasElement = "canvas" [@@bs.get] 
    external arc : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> x:float -> y:float -> radius:float -> startAngle:float -> endAngle:float -> ?anticlockwise:Js.boolean Js.undefined -> unit = "arc" [@@bs.send] 
    external arcTo : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> x1:float -> y1:float -> x2:float -> y2:float -> radius:float -> unit = "arcTo" [@@bs.send] 
    external beginPath : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> unit = "beginPath" [@@bs.send] 
    external bezierCurveTo : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> cp1x:float -> cp1y:float -> cp2x:float -> cp2y:float -> x:float -> y:float -> unit = "bezierCurveTo" [@@bs.send] 
    external clearRect : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> x:float -> y:float -> w:float -> h:float -> unit = "clearRect" [@@bs.send] 
    external clip : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> ?fillRule:string Js.undefined -> unit = "clip" [@@bs.send] 
    external closePath : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> unit = "closePath" [@@bs.send] 
    external createImageData : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> sw:float -> sh:float -> imageData = "createImageData" [@@bs.send] 
    external createLinearGradient : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> x0:float -> y0:float -> x1:float -> y1:float -> canvasGradient = "createLinearGradient" [@@bs.send] 
    external createPattern : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> image:'a249 -> repetition:string -> canvasPattern = "createPattern" [@@bs.send] 
    external createRadialGradient : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> x0:float -> y0:float -> r0:float -> x1:float -> y1:float -> r1:float -> canvasGradient = "createRadialGradient" [@@bs.send] 
    external drawImage : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> image:'a250 -> dx:float -> dy:float -> unit = "drawImage" [@@bs.send] 
    external fill : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> ?fillRule:string Js.undefined -> unit = "fill" [@@bs.send] 
    external fillRect : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> x:float -> y:float -> w:float -> h:float -> unit = "fillRect" [@@bs.send] 
    external getImageData : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> sx:float -> sy:float -> sw:float -> sh:float -> imageData = "getImageData" [@@bs.send] 
    external isPointInPath : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> x:float -> y:float -> ?fillRule:string Js.undefined -> bool = "isPointInPath" [@@bs.send] 
    external lineTo : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> x:float -> y:float -> unit = "lineTo" [@@bs.send] 
    external moveTo : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> x:float -> y:float -> unit = "moveTo" [@@bs.send] 
    external putImageData : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> imagedata:(_) imageData_like -> dx:float -> dy:float -> unit = "putImageData" [@@bs.send] 
    external quadraticCurveTo : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> cpx:float -> cpy:float -> x:float -> y:float -> unit = "quadraticCurveTo" [@@bs.send] 
    external rect : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> x:float -> y:float -> w:float -> h:float -> unit = "rect" [@@bs.send] 
    external resetTransform : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> unit = "resetTransform" [@@bs.send] 
    external restore : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> unit = "restore" [@@bs.send] 
    external rotate : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> angle:float -> unit = "rotate" [@@bs.send] 
    external save : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> unit = "save" [@@bs.send] 
    external scale : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> x:float -> y:float -> unit = "scale" [@@bs.send] 
    external setTransform : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> a:float -> b:float -> c:float -> d:float -> e:float -> f:float -> unit = "setTransform" [@@bs.send] 
    external stroke : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> unit = "stroke" [@@bs.send] 
    external strokeRect : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> x:float -> y:float -> w:float -> h:float -> unit = "strokeRect" [@@bs.send] 
    external transform : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> a:float -> b:float -> c:float -> d:float -> e:float -> f:float -> unit = "transform" [@@bs.send] 
    external translate : canvasRenderingContext2D:(_) canvasRenderingContext2D_like -> x:float -> y:float -> unit = "translate" [@@bs.send] 
    
    let arc ~canvasRenderingContext2D ~x ~y ~radius ~startAngle ~endAngle ?anticlockwise () =
      let conv_anticlockwise = Js_undefined.from_opt in
      let anticlockwise = conv_anticlockwise anticlockwise in
      arc ~canvasRenderingContext2D ~x ~y ~radius ~startAngle ~endAngle ~anticlockwise
    
    let clip ~canvasRenderingContext2D ~fillRule =
      let conv_fillRule = function
        | `nonzero -> "nonzero"
        | `evenodd -> "evenodd"
         in
      let conv_fillRule = access_undef conv_fillRule in
      let fillRule = conv_fillRule fillRule in
      let return = clip ~canvasRenderingContext2D ~fillRule in
      return
    
    let clip ~canvasRenderingContext2D ?fillRule () =
      let conv_fillRule = Js_undefined.from_opt in
      let fillRule = conv_fillRule fillRule in
      clip ~canvasRenderingContext2D ~fillRule
    
    let createPattern ~canvasRenderingContext2D ~image ~repetition =
      let conv_image = function
        | `HTMLImageElement (x: (_) hTMLImageElement_like) -> Obj.magic x
        | `HTMLCanvasElement (x: (_) hTMLCanvasElement_like) -> Obj.magic x
        | `CanvasRenderingContext2D (x: (_) canvasRenderingContext2D_like) -> 
        Obj.magic x
         in
      let image = conv_image image in
      let return = createPattern ~canvasRenderingContext2D ~image ~repetition in
      return
    
    let drawImage ~canvasRenderingContext2D ~image ~dx ~dy =
      let conv_image = function
        | `HTMLImageElement (x: (_) hTMLImageElement_like) -> Obj.magic x
        | `HTMLCanvasElement (x: (_) hTMLCanvasElement_like) -> Obj.magic x
        | `CanvasRenderingContext2D (x: (_) canvasRenderingContext2D_like) -> 
        Obj.magic x
         in
      let image = conv_image image in
      let return = drawImage ~canvasRenderingContext2D ~image ~dx ~dy in
      return
    
    let fill ~canvasRenderingContext2D ~fillRule =
      let conv_fillRule = function
        | `nonzero -> "nonzero"
        | `evenodd -> "evenodd"
         in
      let conv_fillRule = access_undef conv_fillRule in
      let fillRule = conv_fillRule fillRule in
      let return = fill ~canvasRenderingContext2D ~fillRule in
      return
    
    let fill ~canvasRenderingContext2D ?fillRule () =
      let conv_fillRule = Js_undefined.from_opt in
      let fillRule = conv_fillRule fillRule in
      fill ~canvasRenderingContext2D ~fillRule
    
    let isPointInPath ~canvasRenderingContext2D ~x ~y ~fillRule =
      let conv_fillRule = function
        | `nonzero -> "nonzero"
        | `evenodd -> "evenodd"
         in
      let conv_fillRule = access_undef conv_fillRule in
      let fillRule = conv_fillRule fillRule in
      let return = isPointInPath ~canvasRenderingContext2D ~x ~y ~fillRule in
      return
    
    let isPointInPath ~canvasRenderingContext2D ~x ~y ?fillRule () =
      let conv_fillRule = Js_undefined.from_opt in
      let fillRule = conv_fillRule fillRule in
      isPointInPath ~canvasRenderingContext2D ~x ~y ~fillRule
    
end
 module CanvasState = struct
    
    
    external restore : canvasState:(_) canvasState_like -> unit = "restore" [@@bs.send] 
    external save : canvasState:(_) canvasState_like -> unit = "save" [@@bs.send] 
    
    
end
 module CanvasTransform = struct
    
    
    external resetTransform : canvasTransform:(_) canvasTransform_like -> unit = "resetTransform" [@@bs.send] 
    external rotate : canvasTransform:(_) canvasTransform_like -> angle:float -> unit = "rotate" [@@bs.send] 
    external scale : canvasTransform:(_) canvasTransform_like -> x:float -> y:float -> unit = "scale" [@@bs.send] 
    external setTransform : canvasTransform:(_) canvasTransform_like -> a:float -> b:float -> c:float -> d:float -> e:float -> f:float -> unit = "setTransform" [@@bs.send] 
    external transform : canvasTransform:(_) canvasTransform_like -> a:float -> b:float -> c:float -> d:float -> e:float -> f:float -> unit = "transform" [@@bs.send] 
    external translate : canvasTransform:(_) canvasTransform_like -> x:float -> y:float -> unit = "translate" [@@bs.send] 
    
    
end
 module CanvasCompositing = struct
    
    
    external globalAlpha : canvasCompositing:(_) canvasCompositing_like -> float = "globalAlpha" [@@bs.get] 
    external setGlobalAlpha : canvasCompositing:(_) canvasCompositing_like -> globalAlpha:float -> unit = "globalAlpha" [@@bs.set]
    external globalCompositeOperation : canvasCompositing:(_) canvasCompositing_like -> string = "globalCompositeOperation" [@@bs.get] 
    external setGlobalCompositeOperation : canvasCompositing:(_) canvasCompositing_like -> globalCompositeOperation:string -> unit = "globalCompositeOperation" [@@bs.set]
    
    
end
 module CanvasImageSmoothing = struct
    
    
    external imageSmoothingEnabled : canvasImageSmoothing:(_) canvasImageSmoothing_like -> bool = "imageSmoothingEnabled" [@@bs.get] 
    external setImageSmoothingEnabled : canvasImageSmoothing:(_) canvasImageSmoothing_like -> imageSmoothingEnabled:Js.boolean -> unit = "imageSmoothingEnabled" [@@bs.set]
    
    
end
 module CanvasFillStrokeStyles = struct
    
    
    external strokeStyle : canvasFillStrokeStyles:(_) canvasFillStrokeStyles_like -> 'a251 = "strokeStyle" [@@bs.get] 
    external setStrokeStyle : canvasFillStrokeStyles:(_) canvasFillStrokeStyles_like -> strokeStyle:'a252 -> unit = "strokeStyle" [@@bs.set]
    external fillStyle : canvasFillStrokeStyles:(_) canvasFillStrokeStyles_like -> 'a253 = "fillStyle" [@@bs.get] 
    external setFillStyle : canvasFillStrokeStyles:(_) canvasFillStrokeStyles_like -> fillStyle:'a254 -> unit = "fillStyle" [@@bs.set]
    external createLinearGradient : canvasFillStrokeStyles:(_) canvasFillStrokeStyles_like -> x0:float -> y0:float -> x1:float -> y1:float -> canvasGradient = "createLinearGradient" [@@bs.send] 
    external createPattern : canvasFillStrokeStyles:(_) canvasFillStrokeStyles_like -> image:'a255 -> repetition:string -> canvasPattern = "createPattern" [@@bs.send] 
    external createRadialGradient : canvasFillStrokeStyles:(_) canvasFillStrokeStyles_like -> x0:float -> y0:float -> r0:float -> x1:float -> y1:float -> r1:float -> canvasGradient = "createRadialGradient" [@@bs.send] 
    
    let createPattern ~canvasFillStrokeStyles ~image ~repetition =
      let conv_image = function
        | `HTMLImageElement (x: (_) hTMLImageElement_like) -> Obj.magic x
        | `HTMLCanvasElement (x: (_) hTMLCanvasElement_like) -> Obj.magic x
        | `CanvasRenderingContext2D (x: (_) canvasRenderingContext2D_like) -> 
        Obj.magic x
         in
      let image = conv_image image in
      let return = createPattern ~canvasFillStrokeStyles ~image ~repetition in
      return
    
end
 module CanvasShadowStyles = struct
    
    
    external shadowOffsetX : canvasShadowStyles:(_) canvasShadowStyles_like -> float = "shadowOffsetX" [@@bs.get] 
    external setShadowOffsetX : canvasShadowStyles:(_) canvasShadowStyles_like -> shadowOffsetX:float -> unit = "shadowOffsetX" [@@bs.set]
    external shadowOffsetY : canvasShadowStyles:(_) canvasShadowStyles_like -> float = "shadowOffsetY" [@@bs.get] 
    external setShadowOffsetY : canvasShadowStyles:(_) canvasShadowStyles_like -> shadowOffsetY:float -> unit = "shadowOffsetY" [@@bs.set]
    external shadowBlur : canvasShadowStyles:(_) canvasShadowStyles_like -> float = "shadowBlur" [@@bs.get] 
    external setShadowBlur : canvasShadowStyles:(_) canvasShadowStyles_like -> shadowBlur:float -> unit = "shadowBlur" [@@bs.set]
    external shadowColor : canvasShadowStyles:(_) canvasShadowStyles_like -> string = "shadowColor" [@@bs.get] 
    external setShadowColor : canvasShadowStyles:(_) canvasShadowStyles_like -> shadowColor:string -> unit = "shadowColor" [@@bs.set]
    
    
end
 module CanvasRect = struct
    
    
    external clearRect : canvasRect:(_) canvasRect_like -> x:float -> y:float -> w:float -> h:float -> unit = "clearRect" [@@bs.send] 
    external fillRect : canvasRect:(_) canvasRect_like -> x:float -> y:float -> w:float -> h:float -> unit = "fillRect" [@@bs.send] 
    external strokeRect : canvasRect:(_) canvasRect_like -> x:float -> y:float -> w:float -> h:float -> unit = "strokeRect" [@@bs.send] 
    
    
end
 module CanvasDrawPath = struct
    
    
    external beginPath : canvasDrawPath:(_) canvasDrawPath_like -> unit = "beginPath" [@@bs.send] 
    external clip : canvasDrawPath:(_) canvasDrawPath_like -> ?fillRule:string Js.undefined -> unit = "clip" [@@bs.send] 
    external fill : canvasDrawPath:(_) canvasDrawPath_like -> ?fillRule:string Js.undefined -> unit = "fill" [@@bs.send] 
    external isPointInPath : canvasDrawPath:(_) canvasDrawPath_like -> x:float -> y:float -> ?fillRule:string Js.undefined -> bool = "isPointInPath" [@@bs.send] 
    external stroke : canvasDrawPath:(_) canvasDrawPath_like -> unit = "stroke" [@@bs.send] 
    
    let clip ~canvasDrawPath ~fillRule =
      let conv_fillRule = function
        | `nonzero -> "nonzero"
        | `evenodd -> "evenodd"
         in
      let conv_fillRule = access_undef conv_fillRule in
      let fillRule = conv_fillRule fillRule in
      let return = clip ~canvasDrawPath ~fillRule in
      return
    
    let clip ~canvasDrawPath ?fillRule () =
      let conv_fillRule = Js_undefined.from_opt in
      let fillRule = conv_fillRule fillRule in
      clip ~canvasDrawPath ~fillRule
    
    let fill ~canvasDrawPath ~fillRule =
      let conv_fillRule = function
        | `nonzero -> "nonzero"
        | `evenodd -> "evenodd"
         in
      let conv_fillRule = access_undef conv_fillRule in
      let fillRule = conv_fillRule fillRule in
      let return = fill ~canvasDrawPath ~fillRule in
      return
    
    let fill ~canvasDrawPath ?fillRule () =
      let conv_fillRule = Js_undefined.from_opt in
      let fillRule = conv_fillRule fillRule in
      fill ~canvasDrawPath ~fillRule
    
    let isPointInPath ~canvasDrawPath ~x ~y ~fillRule =
      let conv_fillRule = function
        | `nonzero -> "nonzero"
        | `evenodd -> "evenodd"
         in
      let conv_fillRule = access_undef conv_fillRule in
      let fillRule = conv_fillRule fillRule in
      let return = isPointInPath ~canvasDrawPath ~x ~y ~fillRule in
      return
    
    let isPointInPath ~canvasDrawPath ~x ~y ?fillRule () =
      let conv_fillRule = Js_undefined.from_opt in
      let fillRule = conv_fillRule fillRule in
      isPointInPath ~canvasDrawPath ~x ~y ~fillRule
    
end
 module CanvasUserInterface = struct
    
    
    
    
    
end
 module CanvasText = struct
    
    
    
    
    
end
 module CanvasDrawImage = struct
    
    
    external drawImage : canvasDrawImage:(_) canvasDrawImage_like -> image:'a256 -> dx:float -> dy:float -> unit = "drawImage" [@@bs.send] 
    
    let drawImage ~canvasDrawImage ~image ~dx ~dy =
      let conv_image = function
        | `HTMLImageElement (x: (_) hTMLImageElement_like) -> Obj.magic x
        | `HTMLCanvasElement (x: (_) hTMLCanvasElement_like) -> Obj.magic x
        | `CanvasRenderingContext2D (x: (_) canvasRenderingContext2D_like) -> 
        Obj.magic x
         in
      let image = conv_image image in
      let return = drawImage ~canvasDrawImage ~image ~dx ~dy in
      return
    
end
 module CanvasHitRegion = struct
    
    
    
    
    
end
 module CanvasImageData = struct
    
    
    external createImageData : canvasImageData:(_) canvasImageData_like -> sw:float -> sh:float -> imageData = "createImageData" [@@bs.send] 
    external getImageData : canvasImageData:(_) canvasImageData_like -> sx:float -> sy:float -> sw:float -> sh:float -> imageData = "getImageData" [@@bs.send] 
    external putImageData : canvasImageData:(_) canvasImageData_like -> imagedata:(_) imageData_like -> dx:float -> dy:float -> unit = "putImageData" [@@bs.send] 
    
    
end
 module CanvasPathDrawingStyles = struct
    
    
    external lineWidth : canvasPathDrawingStyles:(_) canvasPathDrawingStyles_like -> float = "lineWidth" [@@bs.get] 
    external setLineWidth : canvasPathDrawingStyles:(_) canvasPathDrawingStyles_like -> lineWidth:float -> unit = "lineWidth" [@@bs.set]
    external lineCap : canvasPathDrawingStyles:(_) canvasPathDrawingStyles_like -> string = "lineCap" [@@bs.get] 
    external setLineCap : canvasPathDrawingStyles:(_) canvasPathDrawingStyles_like -> lineCap:string -> unit = "lineCap" [@@bs.set]
    external lineJoin : canvasPathDrawingStyles:(_) canvasPathDrawingStyles_like -> string = "lineJoin" [@@bs.get] 
    external setLineJoin : canvasPathDrawingStyles:(_) canvasPathDrawingStyles_like -> lineJoin:string -> unit = "lineJoin" [@@bs.set]
    external miterLimit : canvasPathDrawingStyles:(_) canvasPathDrawingStyles_like -> float = "miterLimit" [@@bs.get] 
    external setMiterLimit : canvasPathDrawingStyles:(_) canvasPathDrawingStyles_like -> miterLimit:float -> unit = "miterLimit" [@@bs.set]
    
    
end
 module CanvasTextDrawingStyles = struct
    
    
    
    
    
end
 module CanvasPath = struct
    
    
    external arc : canvasPath:(_) canvasPath_like -> x:float -> y:float -> radius:float -> startAngle:float -> endAngle:float -> ?anticlockwise:Js.boolean Js.undefined -> unit = "arc" [@@bs.send] 
    external arcTo : canvasPath:(_) canvasPath_like -> x1:float -> y1:float -> x2:float -> y2:float -> radius:float -> unit = "arcTo" [@@bs.send] 
    external bezierCurveTo : canvasPath:(_) canvasPath_like -> cp1x:float -> cp1y:float -> cp2x:float -> cp2y:float -> x:float -> y:float -> unit = "bezierCurveTo" [@@bs.send] 
    external closePath : canvasPath:(_) canvasPath_like -> unit = "closePath" [@@bs.send] 
    external lineTo : canvasPath:(_) canvasPath_like -> x:float -> y:float -> unit = "lineTo" [@@bs.send] 
    external moveTo : canvasPath:(_) canvasPath_like -> x:float -> y:float -> unit = "moveTo" [@@bs.send] 
    external quadraticCurveTo : canvasPath:(_) canvasPath_like -> cpx:float -> cpy:float -> x:float -> y:float -> unit = "quadraticCurveTo" [@@bs.send] 
    external rect : canvasPath:(_) canvasPath_like -> x:float -> y:float -> w:float -> h:float -> unit = "rect" [@@bs.send] 
    
    let arc ~canvasPath ~x ~y ~radius ~startAngle ~endAngle ?anticlockwise () =
      let conv_anticlockwise = Js_undefined.from_opt in
      let anticlockwise = conv_anticlockwise anticlockwise in
      arc ~canvasPath ~x ~y ~radius ~startAngle ~endAngle ~anticlockwise
    
end
 module MediaList = struct
    
    
    external mediaText : mediaList:(_) mediaList_like -> string = "mediaText" [@@bs.get] 
    external setMediaText : mediaList:(_) mediaList_like -> mediaText:string -> unit = "mediaText" [@@bs.set]
    external length : mediaList:(_) mediaList_like -> int = "length" [@@bs.get] 
    external appendMedium : mediaList:(_) mediaList_like -> medium:string -> unit = "appendMedium" [@@bs.send] 
    external deleteMedium : mediaList:(_) mediaList_like -> medium:string -> unit = "deleteMedium" [@@bs.send] 
    external item : mediaList:(_) mediaList_like -> index:int -> string option = "item" [@@bs.send] [@@bs.return null_to_opt]
    
    
end
 module OESTextureFloat = struct
    
    
    
    
    
end
 module Permissions = struct
    
    
    external query : permissions:(_) permissions_like -> permissionDesc:'a257 -> permissionStatus Js.Promise.t = "query" [@@bs.send] 
    external request : permissions:(_) permissions_like -> permissionDesc:'a258 -> permissionStatus Js.Promise.t = "request" [@@bs.send] 
    external revoke : permissions:(_) permissions_like -> permissionDesc:'a259 -> permissionStatus Js.Promise.t = "revoke" [@@bs.send] 
    
    
end
 module CanvasPattern = struct
    
    
    
    
    
end
 module MutationRecord = struct
    
    
    external type_ : mutationRecord:(_) mutationRecord_like -> string = "type" [@@bs.get] 
    external target : mutationRecord:(_) mutationRecord_like -> node = "target" [@@bs.get] 
    external addedNodes : mutationRecord:(_) mutationRecord_like -> nodeList = "addedNodes" [@@bs.get] 
    external removedNodes : mutationRecord:(_) mutationRecord_like -> nodeList = "removedNodes" [@@bs.get] 
    external previousSibling : mutationRecord:(_) mutationRecord_like -> node option = "previousSibling" [@@bs.get] [@@bs.return null_to_opt]
    external nextSibling : mutationRecord:(_) mutationRecord_like -> node option = "nextSibling" [@@bs.get] [@@bs.return null_to_opt]
    external attributeName : mutationRecord:(_) mutationRecord_like -> string option = "attributeName" [@@bs.get] [@@bs.return null_to_opt]
    external attributeNamespace : mutationRecord:(_) mutationRecord_like -> string option = "attributeNamespace" [@@bs.get] [@@bs.return null_to_opt]
    external oldValue : mutationRecord:(_) mutationRecord_like -> string option = "oldValue" [@@bs.get] [@@bs.return null_to_opt]
    
    
end
 module Storage = struct
    
    
    external length : storage:(_) storage_like -> int = "length" [@@bs.get] 
    external clear : storage:(_) storage_like -> unit = "clear" [@@bs.send] 
    external getItem : storage:(_) storage_like -> name:string -> string option = "getItem" [@@bs.send] [@@bs.return null_to_opt]
    external key : storage:(_) storage_like -> index:int -> string option = "key" [@@bs.send] [@@bs.return null_to_opt]
    external removeItem : storage:(_) storage_like -> name:string -> unit = "removeItem" [@@bs.send] 
    external setItem : storage:(_) storage_like -> name:string -> value:string -> unit = "setItem" [@@bs.send] 
    
    
end
 module MutationObserver = struct
    
    
    external observe : mutationObserver:(_) mutationObserver_like -> target:(_) node_like -> ?options:(_) mutationObserverInit_like Js.undefined -> unit = "observe" [@@bs.send] 
    
    let observe ~mutationObserver ~target ?options () =
      let conv_options = Js_undefined.from_opt in
      let options = conv_options options in
      observe ~mutationObserver ~target ~options
    
end
 module TestBindingIterable = struct
    
    
    external length : testBindingIterable:(_) testBindingIterable_like -> int = "length" [@@bs.get] 
    external add : testBindingIterable:(_) testBindingIterable_like -> arg:string -> unit = "add" [@@bs.send] 
    external getItem : testBindingIterable:(_) testBindingIterable_like -> index:int -> string = "getItem" [@@bs.send] 
    
    
end
 module ServiceEventHandlers = struct
    
    
    external onserviceadded : serviceEventHandlers:(_) serviceEventHandlers_like -> (event -> 'a260 [@bs]) option = "onserviceadded" [@@bs.get] [@@bs.return null_to_opt]
    external setOnserviceadded : serviceEventHandlers:(_) serviceEventHandlers_like -> onserviceadded:(event -> 'a261 [@bs]) Js.null -> unit = "onserviceadded" [@@bs.set]
    external onservicechanged : serviceEventHandlers:(_) serviceEventHandlers_like -> (event -> 'a262 [@bs]) option = "onservicechanged" [@@bs.get] [@@bs.return null_to_opt]
    external setOnservicechanged : serviceEventHandlers:(_) serviceEventHandlers_like -> onservicechanged:(event -> 'a263 [@bs]) Js.null -> unit = "onservicechanged" [@@bs.set]
    external onserviceremoved : serviceEventHandlers:(_) serviceEventHandlers_like -> (event -> 'a264 [@bs]) option = "onserviceremoved" [@@bs.get] [@@bs.return null_to_opt]
    external setOnserviceremoved : serviceEventHandlers:(_) serviceEventHandlers_like -> onserviceremoved:(event -> 'a265 [@bs]) Js.null -> unit = "onserviceremoved" [@@bs.set]
    
    
end
 module TextEncoder = struct
    
    
    external encoding : textEncoder:(_) textEncoder_like -> string = "encoding" [@@bs.get] 
    external encode : textEncoder:(_) textEncoder_like -> ?input:string Js.undefined -> Js_typed_array.Uint8Array.t = "encode" [@@bs.send] 
    
    let encode ~textEncoder ?input () =
      let conv_input = Js_undefined.from_opt in
      let input = conv_input input in
      encode ~textEncoder ~input
    
end
 module Event = struct
    
    
    external type_ : event:(_) event_like -> string = "type" [@@bs.get] 
    external target : event:(_) event_like -> eventTarget option = "target" [@@bs.get] [@@bs.return null_to_opt]
    external currentTarget : event:(_) event_like -> eventTarget option = "currentTarget" [@@bs.get] [@@bs.return null_to_opt]
    external eventPhase : event:(_) event_like -> int = "eventPhase" [@@bs.get] 
    external bubbles : event:(_) event_like -> bool = "bubbles" [@@bs.get] 
    external cancelable : event:(_) event_like -> bool = "cancelable" [@@bs.get] 
    external defaultPrevented : event:(_) event_like -> bool = "defaultPrevented" [@@bs.get] 
    external isTrusted : event:(_) event_like -> bool = "isTrusted" [@@bs.get] 
    external timeStamp : event:(_) event_like -> int = "timeStamp" [@@bs.get] 
    external initEvent : event:(_) event_like -> type_:string -> bubbles:Js.boolean -> cancelable:Js.boolean -> unit = "initEvent" [@@bs.send] 
    external preventDefault : event:(_) event_like -> unit = "preventDefault" [@@bs.send] 
    external stopImmediatePropagation : event:(_) event_like -> unit = "stopImmediatePropagation" [@@bs.send] 
    external stopPropagation : event:(_) event_like -> unit = "stopPropagation" [@@bs.send] 
    
    let none  =
      
      0
    
    let capturing_phase  =
      
      1
    
    let at_target  =
      
      2
    
    let bubbling_phase  =
      
      3
    
end
 module ValidityState = struct
    
    
    external valueMissing : validityState:(_) validityState_like -> bool = "valueMissing" [@@bs.get] 
    external typeMismatch : validityState:(_) validityState_like -> bool = "typeMismatch" [@@bs.get] 
    external patternMismatch : validityState:(_) validityState_like -> bool = "patternMismatch" [@@bs.get] 
    external tooLong : validityState:(_) validityState_like -> bool = "tooLong" [@@bs.get] 
    external tooShort : validityState:(_) validityState_like -> bool = "tooShort" [@@bs.get] 
    external rangeUnderflow : validityState:(_) validityState_like -> bool = "rangeUnderflow" [@@bs.get] 
    external rangeOverflow : validityState:(_) validityState_like -> bool = "rangeOverflow" [@@bs.get] 
    external stepMismatch : validityState:(_) validityState_like -> bool = "stepMismatch" [@@bs.get] 
    external badInput : validityState:(_) validityState_like -> bool = "badInput" [@@bs.get] 
    external customError : validityState:(_) validityState_like -> bool = "customError" [@@bs.get] 
    external valid : validityState:(_) validityState_like -> bool = "valid" [@@bs.get] 
    
    
end
 module WindowProxy = struct
    
    
    
    
    
end
 module WindowTimers = struct
    
    
    external clearInterval : windowTimers:(_) windowTimers_like -> ?handle:int Js.undefined -> unit = "clearInterval" [@@bs.send] 
    external clearTimeout : windowTimers:(_) windowTimers_like -> ?handle:int Js.undefined -> unit = "clearTimeout" [@@bs.send] 
    external setInterval : windowTimers:(_) windowTimers_like -> ((_) windowTimers_like, int, ('a266*(int Js.undefined*('a267)))) variadic_func = "setInterval" [@@bs.get]
    external setTimeout : windowTimers:(_) windowTimers_like -> ((_) windowTimers_like, int, ('a268*(int Js.undefined*('a269)))) variadic_func = "setTimeout" [@@bs.get]
    
    let clearInterval ~windowTimers ?handle () =
      let conv_handle = Js_undefined.from_opt in
      let handle = conv_handle handle in
      clearInterval ~windowTimers ~handle
    
    let clearTimeout ~windowTimers ?handle () =
      let conv_handle = Js_undefined.from_opt in
      let handle = conv_handle handle in
      clearTimeout ~windowTimers ~handle
    
    let setInterval ~windowTimers ~handler ~timeout ~arguments =
      let func = setInterval windowTimers in
      let args = to_arg arguments in
      let args = unsafe_add args timeout in
      let args = unsafe_add args handler in
      apply func windowTimers args
    
    let setInterval ~windowTimers ~handler ~timeout ~arguments =
      let conv_handler = function
        | `Callback (x: ('a270 -> 'a271 [@bs])) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let handler = conv_handler handler in
      let return = setInterval ~windowTimers ~handler ~timeout ~arguments in
      return
    
    let setInterval ~windowTimers ~handler ?timeout ~arguments () =
      let conv_timeout = Js_undefined.from_opt in
      let timeout = conv_timeout timeout in
      setInterval ~windowTimers ~handler ~timeout ~arguments
    
    let setTimeout ~windowTimers ~handler ~timeout ~arguments =
      let func = setTimeout windowTimers in
      let args = to_arg arguments in
      let args = unsafe_add args timeout in
      let args = unsafe_add args handler in
      apply func windowTimers args
    
    let setTimeout ~windowTimers ~handler ~timeout ~arguments =
      let conv_handler = function
        | `Callback (x: ('a272 -> 'a273 [@bs])) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let handler = conv_handler handler in
      let return = setTimeout ~windowTimers ~handler ~timeout ~arguments in
      return
    
    let setTimeout ~windowTimers ~handler ?timeout ~arguments () =
      let conv_timeout = Js_undefined.from_opt in
      let timeout = conv_timeout timeout in
      setTimeout ~windowTimers ~handler ~timeout ~arguments
    
end
 module WindowBase64 = struct
    
    
    external atob : windowBase64:(_) windowBase64_like -> atob:string -> string = "atob" [@@bs.send] 
    external btoa : windowBase64:(_) windowBase64_like -> btoa:string -> string = "btoa" [@@bs.send] 
    
    
end
 module WindowSessionStorage = struct
    
    
    external sessionStorage : windowSessionStorage:(_) windowSessionStorage_like -> storage = "sessionStorage" [@@bs.get] 
    
    
end
 module WindowLocalStorage = struct
    
    
    external localStorage : windowLocalStorage:(_) windowLocalStorage_like -> storage = "localStorage" [@@bs.get] 
    
    
end
 module DOMStringMap = struct
    
    
    external none : dOMStringMap:(_) dOMStringMap_like -> name:string -> string = "" [@@bs.get_index] 
    external none : dOMStringMap:(_) dOMStringMap_like -> name:string -> value:string -> unit = "" [@@bs.set_index] 
    external none : dOMStringMap:(_) dOMStringMap_like -> name:string -> unit = "" [@@bs.get_index] 
    
    
end
 module GlobalEventHandlers = struct
    
    
    external onabort : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a274 [@bs]) option = "onabort" [@@bs.get] [@@bs.return null_to_opt]
    external setOnabort : globalEventHandlers:(_) globalEventHandlers_like -> onabort:(event -> 'a275 [@bs]) Js.null -> unit = "onabort" [@@bs.set]
    external onblur : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a276 [@bs]) option = "onblur" [@@bs.get] [@@bs.return null_to_opt]
    external setOnblur : globalEventHandlers:(_) globalEventHandlers_like -> onblur:(event -> 'a277 [@bs]) Js.null -> unit = "onblur" [@@bs.set]
    external oncancel : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a278 [@bs]) option = "oncancel" [@@bs.get] [@@bs.return null_to_opt]
    external setOncancel : globalEventHandlers:(_) globalEventHandlers_like -> oncancel:(event -> 'a279 [@bs]) Js.null -> unit = "oncancel" [@@bs.set]
    external oncanplay : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a280 [@bs]) option = "oncanplay" [@@bs.get] [@@bs.return null_to_opt]
    external setOncanplay : globalEventHandlers:(_) globalEventHandlers_like -> oncanplay:(event -> 'a281 [@bs]) Js.null -> unit = "oncanplay" [@@bs.set]
    external oncanplaythrough : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a282 [@bs]) option = "oncanplaythrough" [@@bs.get] [@@bs.return null_to_opt]
    external setOncanplaythrough : globalEventHandlers:(_) globalEventHandlers_like -> oncanplaythrough:(event -> 'a283 [@bs]) Js.null -> unit = "oncanplaythrough" [@@bs.set]
    external onchange : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a284 [@bs]) option = "onchange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnchange : globalEventHandlers:(_) globalEventHandlers_like -> onchange:(event -> 'a285 [@bs]) Js.null -> unit = "onchange" [@@bs.set]
    external onclick : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a286 [@bs]) option = "onclick" [@@bs.get] [@@bs.return null_to_opt]
    external setOnclick : globalEventHandlers:(_) globalEventHandlers_like -> onclick:(event -> 'a287 [@bs]) Js.null -> unit = "onclick" [@@bs.set]
    external onclose : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a288 [@bs]) option = "onclose" [@@bs.get] [@@bs.return null_to_opt]
    external setOnclose : globalEventHandlers:(_) globalEventHandlers_like -> onclose:(event -> 'a289 [@bs]) Js.null -> unit = "onclose" [@@bs.set]
    external oncontextmenu : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a290 [@bs]) option = "oncontextmenu" [@@bs.get] [@@bs.return null_to_opt]
    external setOncontextmenu : globalEventHandlers:(_) globalEventHandlers_like -> oncontextmenu:(event -> 'a291 [@bs]) Js.null -> unit = "oncontextmenu" [@@bs.set]
    external oncuechange : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a292 [@bs]) option = "oncuechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOncuechange : globalEventHandlers:(_) globalEventHandlers_like -> oncuechange:(event -> 'a293 [@bs]) Js.null -> unit = "oncuechange" [@@bs.set]
    external ondblclick : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a294 [@bs]) option = "ondblclick" [@@bs.get] [@@bs.return null_to_opt]
    external setOndblclick : globalEventHandlers:(_) globalEventHandlers_like -> ondblclick:(event -> 'a295 [@bs]) Js.null -> unit = "ondblclick" [@@bs.set]
    external ondrag : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a296 [@bs]) option = "ondrag" [@@bs.get] [@@bs.return null_to_opt]
    external setOndrag : globalEventHandlers:(_) globalEventHandlers_like -> ondrag:(event -> 'a297 [@bs]) Js.null -> unit = "ondrag" [@@bs.set]
    external ondragend : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a298 [@bs]) option = "ondragend" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragend : globalEventHandlers:(_) globalEventHandlers_like -> ondragend:(event -> 'a299 [@bs]) Js.null -> unit = "ondragend" [@@bs.set]
    external ondragenter : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a300 [@bs]) option = "ondragenter" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragenter : globalEventHandlers:(_) globalEventHandlers_like -> ondragenter:(event -> 'a301 [@bs]) Js.null -> unit = "ondragenter" [@@bs.set]
    external ondragexit : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a302 [@bs]) option = "ondragexit" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragexit : globalEventHandlers:(_) globalEventHandlers_like -> ondragexit:(event -> 'a303 [@bs]) Js.null -> unit = "ondragexit" [@@bs.set]
    external ondragleave : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a304 [@bs]) option = "ondragleave" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragleave : globalEventHandlers:(_) globalEventHandlers_like -> ondragleave:(event -> 'a305 [@bs]) Js.null -> unit = "ondragleave" [@@bs.set]
    external ondragover : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a306 [@bs]) option = "ondragover" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragover : globalEventHandlers:(_) globalEventHandlers_like -> ondragover:(event -> 'a307 [@bs]) Js.null -> unit = "ondragover" [@@bs.set]
    external ondragstart : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a308 [@bs]) option = "ondragstart" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragstart : globalEventHandlers:(_) globalEventHandlers_like -> ondragstart:(event -> 'a309 [@bs]) Js.null -> unit = "ondragstart" [@@bs.set]
    external ondrop : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a310 [@bs]) option = "ondrop" [@@bs.get] [@@bs.return null_to_opt]
    external setOndrop : globalEventHandlers:(_) globalEventHandlers_like -> ondrop:(event -> 'a311 [@bs]) Js.null -> unit = "ondrop" [@@bs.set]
    external ondurationchange : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a312 [@bs]) option = "ondurationchange" [@@bs.get] [@@bs.return null_to_opt]
    external setOndurationchange : globalEventHandlers:(_) globalEventHandlers_like -> ondurationchange:(event -> 'a313 [@bs]) Js.null -> unit = "ondurationchange" [@@bs.set]
    external onemptied : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a314 [@bs]) option = "onemptied" [@@bs.get] [@@bs.return null_to_opt]
    external setOnemptied : globalEventHandlers:(_) globalEventHandlers_like -> onemptied:(event -> 'a315 [@bs]) Js.null -> unit = "onemptied" [@@bs.set]
    external onended : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a316 [@bs]) option = "onended" [@@bs.get] [@@bs.return null_to_opt]
    external setOnended : globalEventHandlers:(_) globalEventHandlers_like -> onended:(event -> 'a317 [@bs]) Js.null -> unit = "onended" [@@bs.set]
    external onerror : globalEventHandlers:(_) globalEventHandlers_like -> ('a318 -> string -> int -> int -> 'a319 -> 'a320 [@bs]) option = "onerror" [@@bs.get] [@@bs.return null_to_opt]
    external setOnerror : globalEventHandlers:(_) globalEventHandlers_like -> onerror:('a321 -> string -> int -> int -> 'a322 -> 'a323 [@bs]) Js.null -> unit = "onerror" [@@bs.set]
    external onfocus : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a324 [@bs]) option = "onfocus" [@@bs.get] [@@bs.return null_to_opt]
    external setOnfocus : globalEventHandlers:(_) globalEventHandlers_like -> onfocus:(event -> 'a325 [@bs]) Js.null -> unit = "onfocus" [@@bs.set]
    external oninput : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a326 [@bs]) option = "oninput" [@@bs.get] [@@bs.return null_to_opt]
    external setOninput : globalEventHandlers:(_) globalEventHandlers_like -> oninput:(event -> 'a327 [@bs]) Js.null -> unit = "oninput" [@@bs.set]
    external oninvalid : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a328 [@bs]) option = "oninvalid" [@@bs.get] [@@bs.return null_to_opt]
    external setOninvalid : globalEventHandlers:(_) globalEventHandlers_like -> oninvalid:(event -> 'a329 [@bs]) Js.null -> unit = "oninvalid" [@@bs.set]
    external onkeydown : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a330 [@bs]) option = "onkeydown" [@@bs.get] [@@bs.return null_to_opt]
    external setOnkeydown : globalEventHandlers:(_) globalEventHandlers_like -> onkeydown:(event -> 'a331 [@bs]) Js.null -> unit = "onkeydown" [@@bs.set]
    external onkeypress : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a332 [@bs]) option = "onkeypress" [@@bs.get] [@@bs.return null_to_opt]
    external setOnkeypress : globalEventHandlers:(_) globalEventHandlers_like -> onkeypress:(event -> 'a333 [@bs]) Js.null -> unit = "onkeypress" [@@bs.set]
    external onkeyup : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a334 [@bs]) option = "onkeyup" [@@bs.get] [@@bs.return null_to_opt]
    external setOnkeyup : globalEventHandlers:(_) globalEventHandlers_like -> onkeyup:(event -> 'a335 [@bs]) Js.null -> unit = "onkeyup" [@@bs.set]
    external onload : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a336 [@bs]) option = "onload" [@@bs.get] [@@bs.return null_to_opt]
    external setOnload : globalEventHandlers:(_) globalEventHandlers_like -> onload:(event -> 'a337 [@bs]) Js.null -> unit = "onload" [@@bs.set]
    external onloadeddata : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a338 [@bs]) option = "onloadeddata" [@@bs.get] [@@bs.return null_to_opt]
    external setOnloadeddata : globalEventHandlers:(_) globalEventHandlers_like -> onloadeddata:(event -> 'a339 [@bs]) Js.null -> unit = "onloadeddata" [@@bs.set]
    external onloadedmetadata : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a340 [@bs]) option = "onloadedmetadata" [@@bs.get] [@@bs.return null_to_opt]
    external setOnloadedmetadata : globalEventHandlers:(_) globalEventHandlers_like -> onloadedmetadata:(event -> 'a341 [@bs]) Js.null -> unit = "onloadedmetadata" [@@bs.set]
    external onloadstart : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a342 [@bs]) option = "onloadstart" [@@bs.get] [@@bs.return null_to_opt]
    external setOnloadstart : globalEventHandlers:(_) globalEventHandlers_like -> onloadstart:(event -> 'a343 [@bs]) Js.null -> unit = "onloadstart" [@@bs.set]
    external onmousedown : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a344 [@bs]) option = "onmousedown" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmousedown : globalEventHandlers:(_) globalEventHandlers_like -> onmousedown:(event -> 'a345 [@bs]) Js.null -> unit = "onmousedown" [@@bs.set]
    external onmouseenter : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a346 [@bs]) option = "onmouseenter" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseenter : globalEventHandlers:(_) globalEventHandlers_like -> onmouseenter:(event -> 'a347 [@bs]) Js.null -> unit = "onmouseenter" [@@bs.set]
    external onmouseleave : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a348 [@bs]) option = "onmouseleave" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseleave : globalEventHandlers:(_) globalEventHandlers_like -> onmouseleave:(event -> 'a349 [@bs]) Js.null -> unit = "onmouseleave" [@@bs.set]
    external onmousemove : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a350 [@bs]) option = "onmousemove" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmousemove : globalEventHandlers:(_) globalEventHandlers_like -> onmousemove:(event -> 'a351 [@bs]) Js.null -> unit = "onmousemove" [@@bs.set]
    external onmouseout : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a352 [@bs]) option = "onmouseout" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseout : globalEventHandlers:(_) globalEventHandlers_like -> onmouseout:(event -> 'a353 [@bs]) Js.null -> unit = "onmouseout" [@@bs.set]
    external onmouseover : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a354 [@bs]) option = "onmouseover" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseover : globalEventHandlers:(_) globalEventHandlers_like -> onmouseover:(event -> 'a355 [@bs]) Js.null -> unit = "onmouseover" [@@bs.set]
    external onmouseup : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a356 [@bs]) option = "onmouseup" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseup : globalEventHandlers:(_) globalEventHandlers_like -> onmouseup:(event -> 'a357 [@bs]) Js.null -> unit = "onmouseup" [@@bs.set]
    external onwheel : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a358 [@bs]) option = "onwheel" [@@bs.get] [@@bs.return null_to_opt]
    external setOnwheel : globalEventHandlers:(_) globalEventHandlers_like -> onwheel:(event -> 'a359 [@bs]) Js.null -> unit = "onwheel" [@@bs.set]
    external onpause : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a360 [@bs]) option = "onpause" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpause : globalEventHandlers:(_) globalEventHandlers_like -> onpause:(event -> 'a361 [@bs]) Js.null -> unit = "onpause" [@@bs.set]
    external onplay : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a362 [@bs]) option = "onplay" [@@bs.get] [@@bs.return null_to_opt]
    external setOnplay : globalEventHandlers:(_) globalEventHandlers_like -> onplay:(event -> 'a363 [@bs]) Js.null -> unit = "onplay" [@@bs.set]
    external onplaying : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a364 [@bs]) option = "onplaying" [@@bs.get] [@@bs.return null_to_opt]
    external setOnplaying : globalEventHandlers:(_) globalEventHandlers_like -> onplaying:(event -> 'a365 [@bs]) Js.null -> unit = "onplaying" [@@bs.set]
    external onprogress : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a366 [@bs]) option = "onprogress" [@@bs.get] [@@bs.return null_to_opt]
    external setOnprogress : globalEventHandlers:(_) globalEventHandlers_like -> onprogress:(event -> 'a367 [@bs]) Js.null -> unit = "onprogress" [@@bs.set]
    external onratechange : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a368 [@bs]) option = "onratechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnratechange : globalEventHandlers:(_) globalEventHandlers_like -> onratechange:(event -> 'a369 [@bs]) Js.null -> unit = "onratechange" [@@bs.set]
    external onreset : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a370 [@bs]) option = "onreset" [@@bs.get] [@@bs.return null_to_opt]
    external setOnreset : globalEventHandlers:(_) globalEventHandlers_like -> onreset:(event -> 'a371 [@bs]) Js.null -> unit = "onreset" [@@bs.set]
    external onresize : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a372 [@bs]) option = "onresize" [@@bs.get] [@@bs.return null_to_opt]
    external setOnresize : globalEventHandlers:(_) globalEventHandlers_like -> onresize:(event -> 'a373 [@bs]) Js.null -> unit = "onresize" [@@bs.set]
    external onscroll : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a374 [@bs]) option = "onscroll" [@@bs.get] [@@bs.return null_to_opt]
    external setOnscroll : globalEventHandlers:(_) globalEventHandlers_like -> onscroll:(event -> 'a375 [@bs]) Js.null -> unit = "onscroll" [@@bs.set]
    external onseeked : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a376 [@bs]) option = "onseeked" [@@bs.get] [@@bs.return null_to_opt]
    external setOnseeked : globalEventHandlers:(_) globalEventHandlers_like -> onseeked:(event -> 'a377 [@bs]) Js.null -> unit = "onseeked" [@@bs.set]
    external onseeking : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a378 [@bs]) option = "onseeking" [@@bs.get] [@@bs.return null_to_opt]
    external setOnseeking : globalEventHandlers:(_) globalEventHandlers_like -> onseeking:(event -> 'a379 [@bs]) Js.null -> unit = "onseeking" [@@bs.set]
    external onselect : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a380 [@bs]) option = "onselect" [@@bs.get] [@@bs.return null_to_opt]
    external setOnselect : globalEventHandlers:(_) globalEventHandlers_like -> onselect:(event -> 'a381 [@bs]) Js.null -> unit = "onselect" [@@bs.set]
    external onshow : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a382 [@bs]) option = "onshow" [@@bs.get] [@@bs.return null_to_opt]
    external setOnshow : globalEventHandlers:(_) globalEventHandlers_like -> onshow:(event -> 'a383 [@bs]) Js.null -> unit = "onshow" [@@bs.set]
    external onstalled : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a384 [@bs]) option = "onstalled" [@@bs.get] [@@bs.return null_to_opt]
    external setOnstalled : globalEventHandlers:(_) globalEventHandlers_like -> onstalled:(event -> 'a385 [@bs]) Js.null -> unit = "onstalled" [@@bs.set]
    external onsubmit : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a386 [@bs]) option = "onsubmit" [@@bs.get] [@@bs.return null_to_opt]
    external setOnsubmit : globalEventHandlers:(_) globalEventHandlers_like -> onsubmit:(event -> 'a387 [@bs]) Js.null -> unit = "onsubmit" [@@bs.set]
    external onsuspend : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a388 [@bs]) option = "onsuspend" [@@bs.get] [@@bs.return null_to_opt]
    external setOnsuspend : globalEventHandlers:(_) globalEventHandlers_like -> onsuspend:(event -> 'a389 [@bs]) Js.null -> unit = "onsuspend" [@@bs.set]
    external ontimeupdate : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a390 [@bs]) option = "ontimeupdate" [@@bs.get] [@@bs.return null_to_opt]
    external setOntimeupdate : globalEventHandlers:(_) globalEventHandlers_like -> ontimeupdate:(event -> 'a391 [@bs]) Js.null -> unit = "ontimeupdate" [@@bs.set]
    external ontoggle : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a392 [@bs]) option = "ontoggle" [@@bs.get] [@@bs.return null_to_opt]
    external setOntoggle : globalEventHandlers:(_) globalEventHandlers_like -> ontoggle:(event -> 'a393 [@bs]) Js.null -> unit = "ontoggle" [@@bs.set]
    external onvolumechange : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a394 [@bs]) option = "onvolumechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnvolumechange : globalEventHandlers:(_) globalEventHandlers_like -> onvolumechange:(event -> 'a395 [@bs]) Js.null -> unit = "onvolumechange" [@@bs.set]
    external onwaiting : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a396 [@bs]) option = "onwaiting" [@@bs.get] [@@bs.return null_to_opt]
    external setOnwaiting : globalEventHandlers:(_) globalEventHandlers_like -> onwaiting:(event -> 'a397 [@bs]) Js.null -> unit = "onwaiting" [@@bs.set]
    external ontransitionend : globalEventHandlers:(_) globalEventHandlers_like -> (event -> 'a398 [@bs]) option = "ontransitionend" [@@bs.get] [@@bs.return null_to_opt]
    external setOntransitionend : globalEventHandlers:(_) globalEventHandlers_like -> ontransitionend:(event -> 'a399 [@bs]) Js.null -> unit = "ontransitionend" [@@bs.set]
    
    
end
 module WindowEventHandlers = struct
    
    
    external onafterprint : windowEventHandlers:(_) windowEventHandlers_like -> (event -> 'a400 [@bs]) option = "onafterprint" [@@bs.get] [@@bs.return null_to_opt]
    external setOnafterprint : windowEventHandlers:(_) windowEventHandlers_like -> onafterprint:(event -> 'a401 [@bs]) Js.null -> unit = "onafterprint" [@@bs.set]
    external onbeforeprint : windowEventHandlers:(_) windowEventHandlers_like -> (event -> 'a402 [@bs]) option = "onbeforeprint" [@@bs.get] [@@bs.return null_to_opt]
    external setOnbeforeprint : windowEventHandlers:(_) windowEventHandlers_like -> onbeforeprint:(event -> 'a403 [@bs]) Js.null -> unit = "onbeforeprint" [@@bs.set]
    external onbeforeunload : windowEventHandlers:(_) windowEventHandlers_like -> (event -> string Js.null [@bs]) option = "onbeforeunload" [@@bs.get] [@@bs.return null_to_opt]
    external setOnbeforeunload : windowEventHandlers:(_) windowEventHandlers_like -> onbeforeunload:(event -> string Js.null [@bs]) Js.null -> unit = "onbeforeunload" [@@bs.set]
    external onhashchange : windowEventHandlers:(_) windowEventHandlers_like -> (event -> 'a404 [@bs]) option = "onhashchange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnhashchange : windowEventHandlers:(_) windowEventHandlers_like -> onhashchange:(event -> 'a405 [@bs]) Js.null -> unit = "onhashchange" [@@bs.set]
    external onlanguagechange : windowEventHandlers:(_) windowEventHandlers_like -> (event -> 'a406 [@bs]) option = "onlanguagechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnlanguagechange : windowEventHandlers:(_) windowEventHandlers_like -> onlanguagechange:(event -> 'a407 [@bs]) Js.null -> unit = "onlanguagechange" [@@bs.set]
    external onmessage : windowEventHandlers:(_) windowEventHandlers_like -> (event -> 'a408 [@bs]) option = "onmessage" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmessage : windowEventHandlers:(_) windowEventHandlers_like -> onmessage:(event -> 'a409 [@bs]) Js.null -> unit = "onmessage" [@@bs.set]
    external onoffline : windowEventHandlers:(_) windowEventHandlers_like -> (event -> 'a410 [@bs]) option = "onoffline" [@@bs.get] [@@bs.return null_to_opt]
    external setOnoffline : windowEventHandlers:(_) windowEventHandlers_like -> onoffline:(event -> 'a411 [@bs]) Js.null -> unit = "onoffline" [@@bs.set]
    external ononline : windowEventHandlers:(_) windowEventHandlers_like -> (event -> 'a412 [@bs]) option = "ononline" [@@bs.get] [@@bs.return null_to_opt]
    external setOnonline : windowEventHandlers:(_) windowEventHandlers_like -> ononline:(event -> 'a413 [@bs]) Js.null -> unit = "ononline" [@@bs.set]
    external onpagehide : windowEventHandlers:(_) windowEventHandlers_like -> (event -> 'a414 [@bs]) option = "onpagehide" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpagehide : windowEventHandlers:(_) windowEventHandlers_like -> onpagehide:(event -> 'a415 [@bs]) Js.null -> unit = "onpagehide" [@@bs.set]
    external onpageshow : windowEventHandlers:(_) windowEventHandlers_like -> (event -> 'a416 [@bs]) option = "onpageshow" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpageshow : windowEventHandlers:(_) windowEventHandlers_like -> onpageshow:(event -> 'a417 [@bs]) Js.null -> unit = "onpageshow" [@@bs.set]
    external onpopstate : windowEventHandlers:(_) windowEventHandlers_like -> (event -> 'a418 [@bs]) option = "onpopstate" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpopstate : windowEventHandlers:(_) windowEventHandlers_like -> onpopstate:(event -> 'a419 [@bs]) Js.null -> unit = "onpopstate" [@@bs.set]
    external onrejectionhandled : windowEventHandlers:(_) windowEventHandlers_like -> (event -> 'a420 [@bs]) option = "onrejectionhandled" [@@bs.get] [@@bs.return null_to_opt]
    external setOnrejectionhandled : windowEventHandlers:(_) windowEventHandlers_like -> onrejectionhandled:(event -> 'a421 [@bs]) Js.null -> unit = "onrejectionhandled" [@@bs.set]
    external onstorage : windowEventHandlers:(_) windowEventHandlers_like -> (event -> 'a422 [@bs]) option = "onstorage" [@@bs.get] [@@bs.return null_to_opt]
    external setOnstorage : windowEventHandlers:(_) windowEventHandlers_like -> onstorage:(event -> 'a423 [@bs]) Js.null -> unit = "onstorage" [@@bs.set]
    external onunhandledrejection : windowEventHandlers:(_) windowEventHandlers_like -> (event -> 'a424 [@bs]) option = "onunhandledrejection" [@@bs.get] [@@bs.return null_to_opt]
    external setOnunhandledrejection : windowEventHandlers:(_) windowEventHandlers_like -> onunhandledrejection:(event -> 'a425 [@bs]) Js.null -> unit = "onunhandledrejection" [@@bs.set]
    external onunload : windowEventHandlers:(_) windowEventHandlers_like -> (event -> 'a426 [@bs]) option = "onunload" [@@bs.get] [@@bs.return null_to_opt]
    external setOnunload : windowEventHandlers:(_) windowEventHandlers_like -> onunload:(event -> 'a427 [@bs]) Js.null -> unit = "onunload" [@@bs.set]
    
    
end
 module DocumentAndElementEventHandlers = struct
    
    
    external oncopy : documentAndElementEventHandlers:(_) documentAndElementEventHandlers_like -> (event -> 'a428 [@bs]) option = "oncopy" [@@bs.get] [@@bs.return null_to_opt]
    external setOncopy : documentAndElementEventHandlers:(_) documentAndElementEventHandlers_like -> oncopy:(event -> 'a429 [@bs]) Js.null -> unit = "oncopy" [@@bs.set]
    external oncut : documentAndElementEventHandlers:(_) documentAndElementEventHandlers_like -> (event -> 'a430 [@bs]) option = "oncut" [@@bs.get] [@@bs.return null_to_opt]
    external setOncut : documentAndElementEventHandlers:(_) documentAndElementEventHandlers_like -> oncut:(event -> 'a431 [@bs]) Js.null -> unit = "oncut" [@@bs.set]
    external onpaste : documentAndElementEventHandlers:(_) documentAndElementEventHandlers_like -> (event -> 'a432 [@bs]) option = "onpaste" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpaste : documentAndElementEventHandlers:(_) documentAndElementEventHandlers_like -> onpaste:(event -> 'a433 [@bs]) Js.null -> unit = "onpaste" [@@bs.set]
    
    
end
 module Blob = struct
    
    
    external size : blob:(_) blob_like -> int = "size" [@@bs.get] 
    external type_ : blob:(_) blob_like -> string = "type" [@@bs.get] 
    external slice : blob:(_) blob_like -> ?start:int Js.undefined -> ?end_:int Js.undefined -> ?contentType:string Js.undefined -> blob = "slice" [@@bs.send] 
    
    let slice ~blob ?start ?end_ ?contentType () =
      let conv_start = Js_undefined.from_opt in
      let start = conv_start start in
      let conv_end = Js_undefined.from_opt in
      let end_ = conv_end end_ in
      let conv_contentType = Js_undefined.from_opt in
      let contentType = conv_contentType contentType in
      slice ~blob ~start ~end_ ~contentType
    
end
 module VRFrameData = struct
    
    
    external timestamp : vRFrameData:(_) vRFrameData_like -> float = "timestamp" [@@bs.get] 
    external leftProjectionMatrix : vRFrameData:(_) vRFrameData_like -> Js_typed_array.Float32Array.t = "leftProjectionMatrix" [@@bs.get] 
    external leftViewMatrix : vRFrameData:(_) vRFrameData_like -> Js_typed_array.Float32Array.t = "leftViewMatrix" [@@bs.get] 
    external rightProjectionMatrix : vRFrameData:(_) vRFrameData_like -> Js_typed_array.Float32Array.t = "rightProjectionMatrix" [@@bs.get] 
    external rightViewMatrix : vRFrameData:(_) vRFrameData_like -> Js_typed_array.Float32Array.t = "rightViewMatrix" [@@bs.get] 
    external pose : vRFrameData:(_) vRFrameData_like -> vRPose = "pose" [@@bs.get] 
    
    
end
 module ServoParser = struct
    
    
    
    
    
end
 module Attr = struct
    
    
    external namespaceURI : attr:(_) attr_like -> string option = "namespaceURI" [@@bs.get] [@@bs.return null_to_opt]
    external prefix : attr:(_) attr_like -> string option = "prefix" [@@bs.get] [@@bs.return null_to_opt]
    external localName : attr:(_) attr_like -> string = "localName" [@@bs.get] 
    external name : attr:(_) attr_like -> string = "name" [@@bs.get] 
    external nodeName : attr:(_) attr_like -> string = "nodeName" [@@bs.get] 
    external value : attr:(_) attr_like -> string = "value" [@@bs.get] 
    external setValue : attr:(_) attr_like -> value:string -> unit = "value" [@@bs.set]
    external textContent : attr:(_) attr_like -> string = "textContent" [@@bs.get] 
    external setTextContent : attr:(_) attr_like -> textContent:string -> unit = "textContent" [@@bs.set]
    external nodeValue : attr:(_) attr_like -> string = "nodeValue" [@@bs.get] 
    external setNodeValue : attr:(_) attr_like -> nodeValue:string -> unit = "nodeValue" [@@bs.set]
    external ownerElement : attr:(_) attr_like -> element option = "ownerElement" [@@bs.get] [@@bs.return null_to_opt]
    external specified : attr:(_) attr_like -> bool = "specified" [@@bs.get] 
    
    
end
 module ActivatableElement = struct
    
    
    external enterFormalActivationState : activatableElement:(_) activatableElement_like -> unit = "enterFormalActivationState" [@@bs.send] 
    external exitFormalActivationState : activatableElement:(_) activatableElement_like -> unit = "exitFormalActivationState" [@@bs.send] 
    
    
end
 module StyleSheetList = struct
    
    
    external length : styleSheetList:(_) styleSheetList_like -> int = "length" [@@bs.get] 
    external item : styleSheetList:(_) styleSheetList_like -> index:int -> styleSheet option = "item" [@@bs.send] [@@bs.return null_to_opt]
    
    
end
 module EventSourceInit = struct
    
    
    external make : ?withCredentials:Js.boolean -> unit -> eventSourceInit = "" [@@bs.obj]
    external withCredentials : eventSourceInit:(_) eventSourceInit_like -> bool = "withCredentials" [@@bs.get] 
    external setWithCredentials : eventSourceInit:(_) eventSourceInit_like -> withCredentials:Js.boolean -> unit = "withCredentials" [@@bs.set]
    
    
end
 module ElementDefinitionOptions = struct
    
    
    external make : ?extends:string -> unit -> elementDefinitionOptions = "" [@@bs.obj]
    external extends : elementDefinitionOptions:(_) elementDefinitionOptions_like -> string = "extends" [@@bs.get] 
    external setExtends : elementDefinitionOptions:(_) elementDefinitionOptions_like -> extends:string -> unit = "extends" [@@bs.set]
    
    
end
 module DOMMatrixInit = struct
    
    
    external make : ?a:float -> ?b:float -> ?c:float -> ?d:float -> ?e:float -> ?f:float -> ?m11:float -> ?m12:float -> ?m13:float -> ?m14:float -> ?m21:float -> ?m22:float -> ?m23:float -> ?m24:float -> ?m31:float -> ?m32:float -> ?m33:float -> ?m34:float -> ?m41:float -> ?m42:float -> ?m43:float -> ?m44:float -> ?is2D:Js.boolean -> unit -> dOMMatrixInit = "" [@@bs.obj]
    external a : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "a" [@@bs.get] 
    external setA : dOMMatrixInit:(_) dOMMatrixInit_like -> a:float -> unit = "a" [@@bs.set]
    external b : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "b" [@@bs.get] 
    external setB : dOMMatrixInit:(_) dOMMatrixInit_like -> b:float -> unit = "b" [@@bs.set]
    external c : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "c" [@@bs.get] 
    external setC : dOMMatrixInit:(_) dOMMatrixInit_like -> c:float -> unit = "c" [@@bs.set]
    external d : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "d" [@@bs.get] 
    external setD : dOMMatrixInit:(_) dOMMatrixInit_like -> d:float -> unit = "d" [@@bs.set]
    external e : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "e" [@@bs.get] 
    external setE : dOMMatrixInit:(_) dOMMatrixInit_like -> e:float -> unit = "e" [@@bs.set]
    external f : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "f" [@@bs.get] 
    external setF : dOMMatrixInit:(_) dOMMatrixInit_like -> f:float -> unit = "f" [@@bs.set]
    external m11 : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "m11" [@@bs.get] 
    external setM11 : dOMMatrixInit:(_) dOMMatrixInit_like -> m11:float -> unit = "m11" [@@bs.set]
    external m12 : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "m12" [@@bs.get] 
    external setM12 : dOMMatrixInit:(_) dOMMatrixInit_like -> m12:float -> unit = "m12" [@@bs.set]
    external m13 : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "m13" [@@bs.get] 
    external setM13 : dOMMatrixInit:(_) dOMMatrixInit_like -> m13:float -> unit = "m13" [@@bs.set]
    external m14 : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "m14" [@@bs.get] 
    external setM14 : dOMMatrixInit:(_) dOMMatrixInit_like -> m14:float -> unit = "m14" [@@bs.set]
    external m21 : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "m21" [@@bs.get] 
    external setM21 : dOMMatrixInit:(_) dOMMatrixInit_like -> m21:float -> unit = "m21" [@@bs.set]
    external m22 : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "m22" [@@bs.get] 
    external setM22 : dOMMatrixInit:(_) dOMMatrixInit_like -> m22:float -> unit = "m22" [@@bs.set]
    external m23 : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "m23" [@@bs.get] 
    external setM23 : dOMMatrixInit:(_) dOMMatrixInit_like -> m23:float -> unit = "m23" [@@bs.set]
    external m24 : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "m24" [@@bs.get] 
    external setM24 : dOMMatrixInit:(_) dOMMatrixInit_like -> m24:float -> unit = "m24" [@@bs.set]
    external m31 : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "m31" [@@bs.get] 
    external setM31 : dOMMatrixInit:(_) dOMMatrixInit_like -> m31:float -> unit = "m31" [@@bs.set]
    external m32 : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "m32" [@@bs.get] 
    external setM32 : dOMMatrixInit:(_) dOMMatrixInit_like -> m32:float -> unit = "m32" [@@bs.set]
    external m33 : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "m33" [@@bs.get] 
    external setM33 : dOMMatrixInit:(_) dOMMatrixInit_like -> m33:float -> unit = "m33" [@@bs.set]
    external m34 : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "m34" [@@bs.get] 
    external setM34 : dOMMatrixInit:(_) dOMMatrixInit_like -> m34:float -> unit = "m34" [@@bs.set]
    external m41 : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "m41" [@@bs.get] 
    external setM41 : dOMMatrixInit:(_) dOMMatrixInit_like -> m41:float -> unit = "m41" [@@bs.set]
    external m42 : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "m42" [@@bs.get] 
    external setM42 : dOMMatrixInit:(_) dOMMatrixInit_like -> m42:float -> unit = "m42" [@@bs.set]
    external m43 : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "m43" [@@bs.get] 
    external setM43 : dOMMatrixInit:(_) dOMMatrixInit_like -> m43:float -> unit = "m43" [@@bs.set]
    external m44 : dOMMatrixInit:(_) dOMMatrixInit_like -> float = "m44" [@@bs.get] 
    external setM44 : dOMMatrixInit:(_) dOMMatrixInit_like -> m44:float -> unit = "m44" [@@bs.set]
    external is2D : dOMMatrixInit:(_) dOMMatrixInit_like -> bool = "is2D" [@@bs.get] 
    external setIs2D : dOMMatrixInit:(_) dOMMatrixInit_like -> is2D:Js.boolean -> unit = "is2D" [@@bs.set]
    
    
end
 module VRLayer = struct
    
    
    external make : ?source:(_) hTMLCanvasElement_like -> ?leftBounds:float array -> ?rightBounds:float array -> unit -> vRLayer = "" [@@bs.obj]
    external source : vRLayer:(_) vRLayer_like -> hTMLCanvasElement = "source" [@@bs.get] 
    external setSource : vRLayer:(_) vRLayer_like -> source:hTMLCanvasElement -> unit = "source" [@@bs.set]
    external leftBounds : vRLayer:(_) vRLayer_like -> float array = "leftBounds" [@@bs.get] 
    external setLeftBounds : vRLayer:(_) vRLayer_like -> leftBounds:float array -> unit = "leftBounds" [@@bs.set]
    external rightBounds : vRLayer:(_) vRLayer_like -> float array = "rightBounds" [@@bs.get] 
    external setRightBounds : vRLayer:(_) vRLayer_like -> rightBounds:float array -> unit = "rightBounds" [@@bs.set]
    
    
end
 module IterableKeyOrValueResult = struct
    
    
    external make : ?value:'a434 -> ?done_:Js.boolean -> unit -> iterableKeyOrValueResult = "" [@@bs.obj]
    external value : iterableKeyOrValueResult:(_) iterableKeyOrValueResult_like -> 'a435 = "value" [@@bs.get] 
    external setValue : iterableKeyOrValueResult:(_) iterableKeyOrValueResult_like -> value:'a436 -> unit = "value" [@@bs.set]
    external done_ : iterableKeyOrValueResult:(_) iterableKeyOrValueResult_like -> bool = "done" [@@bs.get] 
    external setDone : iterableKeyOrValueResult:(_) iterableKeyOrValueResult_like -> done_:Js.boolean -> unit = "done" [@@bs.set]
    
    
end
 module IterableKeyAndValueResult = struct
    
    
    external make : ?value:'a437 array -> ?done_:Js.boolean -> unit -> iterableKeyAndValueResult = "" [@@bs.obj]
    external value : iterableKeyAndValueResult:(_) iterableKeyAndValueResult_like -> 'a438 array = "value" [@@bs.get] 
    external setValue : iterableKeyAndValueResult:(_) iterableKeyAndValueResult_like -> value:'a439 array -> unit = "value" [@@bs.set]
    external done_ : iterableKeyAndValueResult:(_) iterableKeyAndValueResult_like -> bool = "done" [@@bs.get] 
    external setDone : iterableKeyAndValueResult:(_) iterableKeyAndValueResult_like -> done_:Js.boolean -> unit = "done" [@@bs.set]
    
    
end
 module RegistrationOptions = struct
    
    
    external make : ?scope:string -> unit -> registrationOptions = "" [@@bs.obj]
    external scope : registrationOptions:(_) registrationOptions_like -> string = "scope" [@@bs.get] 
    external setScope : registrationOptions:(_) registrationOptions_like -> scope:string -> unit = "scope" [@@bs.set]
    
    
end
 module PermissionDescriptor = struct
    
    
    external make : name:string -> unit -> permissionDescriptor = "" [@@bs.obj]
    external name : permissionDescriptor:(_) permissionDescriptor_like -> string = "name" [@@bs.get] 
    external setName : permissionDescriptor:(_) permissionDescriptor_like -> name:string -> unit = "name" [@@bs.set]
    
    
end
 module WebGLContextAttributes = struct
    
    
    external make : ?alpha:Js.boolean -> ?depth:Js.boolean -> ?stencil:Js.boolean -> ?antialias:Js.boolean -> ?premultipliedAlpha:Js.boolean -> ?preserveDrawingBuffer:Js.boolean -> ?preferLowPowerToHighPerformance:Js.boolean -> ?failIfMajorPerformanceCaveat:Js.boolean -> unit -> webGLContextAttributes = "" [@@bs.obj]
    external alpha : webGLContextAttributes:(_) webGLContextAttributes_like -> bool = "alpha" [@@bs.get] 
    external setAlpha : webGLContextAttributes:(_) webGLContextAttributes_like -> alpha:Js.boolean -> unit = "alpha" [@@bs.set]
    external depth : webGLContextAttributes:(_) webGLContextAttributes_like -> bool = "depth" [@@bs.get] 
    external setDepth : webGLContextAttributes:(_) webGLContextAttributes_like -> depth:Js.boolean -> unit = "depth" [@@bs.set]
    external stencil : webGLContextAttributes:(_) webGLContextAttributes_like -> bool = "stencil" [@@bs.get] 
    external setStencil : webGLContextAttributes:(_) webGLContextAttributes_like -> stencil:Js.boolean -> unit = "stencil" [@@bs.set]
    external antialias : webGLContextAttributes:(_) webGLContextAttributes_like -> bool = "antialias" [@@bs.get] 
    external setAntialias : webGLContextAttributes:(_) webGLContextAttributes_like -> antialias:Js.boolean -> unit = "antialias" [@@bs.set]
    external premultipliedAlpha : webGLContextAttributes:(_) webGLContextAttributes_like -> bool = "premultipliedAlpha" [@@bs.get] 
    external setPremultipliedAlpha : webGLContextAttributes:(_) webGLContextAttributes_like -> premultipliedAlpha:Js.boolean -> unit = "premultipliedAlpha" [@@bs.set]
    external preserveDrawingBuffer : webGLContextAttributes:(_) webGLContextAttributes_like -> bool = "preserveDrawingBuffer" [@@bs.get] 
    external setPreserveDrawingBuffer : webGLContextAttributes:(_) webGLContextAttributes_like -> preserveDrawingBuffer:Js.boolean -> unit = "preserveDrawingBuffer" [@@bs.set]
    external preferLowPowerToHighPerformance : webGLContextAttributes:(_) webGLContextAttributes_like -> bool = "preferLowPowerToHighPerformance" [@@bs.get] 
    external setPreferLowPowerToHighPerformance : webGLContextAttributes:(_) webGLContextAttributes_like -> preferLowPowerToHighPerformance:Js.boolean -> unit = "preferLowPowerToHighPerformance" [@@bs.set]
    external failIfMajorPerformanceCaveat : webGLContextAttributes:(_) webGLContextAttributes_like -> bool = "failIfMajorPerformanceCaveat" [@@bs.get] 
    external setFailIfMajorPerformanceCaveat : webGLContextAttributes:(_) webGLContextAttributes_like -> failIfMajorPerformanceCaveat:Js.boolean -> unit = "failIfMajorPerformanceCaveat" [@@bs.set]
    
    
end
 module DOMRectInit = struct
    
    
    external make : ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> dOMRectInit = "" [@@bs.obj]
    external x : dOMRectInit:(_) dOMRectInit_like -> float = "x" [@@bs.get] 
    external setX : dOMRectInit:(_) dOMRectInit_like -> x:float -> unit = "x" [@@bs.set]
    external y : dOMRectInit:(_) dOMRectInit_like -> float = "y" [@@bs.get] 
    external setY : dOMRectInit:(_) dOMRectInit_like -> y:float -> unit = "y" [@@bs.set]
    external width : dOMRectInit:(_) dOMRectInit_like -> float = "width" [@@bs.get] 
    external setWidth : dOMRectInit:(_) dOMRectInit_like -> width:float -> unit = "width" [@@bs.set]
    external height : dOMRectInit:(_) dOMRectInit_like -> float = "height" [@@bs.get] 
    external setHeight : dOMRectInit:(_) dOMRectInit_like -> height:float -> unit = "height" [@@bs.set]
    
    
end
 module BrowserElementSecurityChangeDetail = struct
    
    
    external make : ?state:string -> ?trackingState:string -> ?mixedState:string -> ?extendedValidation:Js.boolean -> ?trackingContent:Js.boolean -> ?mixedContent:Js.boolean -> unit -> browserElementSecurityChangeDetail = "" [@@bs.obj]
    external state : browserElementSecurityChangeDetail:(_) browserElementSecurityChangeDetail_like -> string = "state" [@@bs.get] 
    external setState : browserElementSecurityChangeDetail:(_) browserElementSecurityChangeDetail_like -> state:string -> unit = "state" [@@bs.set]
    external trackingState : browserElementSecurityChangeDetail:(_) browserElementSecurityChangeDetail_like -> string = "trackingState" [@@bs.get] 
    external setTrackingState : browserElementSecurityChangeDetail:(_) browserElementSecurityChangeDetail_like -> trackingState:string -> unit = "trackingState" [@@bs.set]
    external mixedState : browserElementSecurityChangeDetail:(_) browserElementSecurityChangeDetail_like -> string = "mixedState" [@@bs.get] 
    external setMixedState : browserElementSecurityChangeDetail:(_) browserElementSecurityChangeDetail_like -> mixedState:string -> unit = "mixedState" [@@bs.set]
    external extendedValidation : browserElementSecurityChangeDetail:(_) browserElementSecurityChangeDetail_like -> bool = "extendedValidation" [@@bs.get] 
    external setExtendedValidation : browserElementSecurityChangeDetail:(_) browserElementSecurityChangeDetail_like -> extendedValidation:Js.boolean -> unit = "extendedValidation" [@@bs.set]
    external trackingContent : browserElementSecurityChangeDetail:(_) browserElementSecurityChangeDetail_like -> bool = "trackingContent" [@@bs.get] 
    external setTrackingContent : browserElementSecurityChangeDetail:(_) browserElementSecurityChangeDetail_like -> trackingContent:Js.boolean -> unit = "trackingContent" [@@bs.set]
    external mixedContent : browserElementSecurityChangeDetail:(_) browserElementSecurityChangeDetail_like -> bool = "mixedContent" [@@bs.get] 
    external setMixedContent : browserElementSecurityChangeDetail:(_) browserElementSecurityChangeDetail_like -> mixedContent:Js.boolean -> unit = "mixedContent" [@@bs.set]
    
    
end
 module BrowserElementErrorEventDetail = struct
    
    
    external make : ?type_:string -> ?description:string -> ?report:string -> ?version:string -> unit -> browserElementErrorEventDetail = "" [@@bs.obj]
    external type_ : browserElementErrorEventDetail:(_) browserElementErrorEventDetail_like -> string = "type" [@@bs.get] 
    external setType : browserElementErrorEventDetail:(_) browserElementErrorEventDetail_like -> type_:string -> unit = "type" [@@bs.set]
    external description : browserElementErrorEventDetail:(_) browserElementErrorEventDetail_like -> string = "description" [@@bs.get] 
    external setDescription : browserElementErrorEventDetail:(_) browserElementErrorEventDetail_like -> description:string -> unit = "description" [@@bs.set]
    external report : browserElementErrorEventDetail:(_) browserElementErrorEventDetail_like -> string = "report" [@@bs.get] 
    external setReport : browserElementErrorEventDetail:(_) browserElementErrorEventDetail_like -> report:string -> unit = "report" [@@bs.set]
    external version : browserElementErrorEventDetail:(_) browserElementErrorEventDetail_like -> string = "version" [@@bs.get] 
    external setVersion : browserElementErrorEventDetail:(_) browserElementErrorEventDetail_like -> version:string -> unit = "version" [@@bs.set]
    
    
end
 module BrowserElementLocationChangeEventDetail = struct
    
    
    external make : ?url:string -> ?canGoBack:Js.boolean -> ?canGoForward:Js.boolean -> unit -> browserElementLocationChangeEventDetail = "" [@@bs.obj]
    external url : browserElementLocationChangeEventDetail:(_) browserElementLocationChangeEventDetail_like -> string = "url" [@@bs.get] 
    external setUrl : browserElementLocationChangeEventDetail:(_) browserElementLocationChangeEventDetail_like -> url:string -> unit = "url" [@@bs.set]
    external canGoBack : browserElementLocationChangeEventDetail:(_) browserElementLocationChangeEventDetail_like -> bool = "canGoBack" [@@bs.get] 
    external setCanGoBack : browserElementLocationChangeEventDetail:(_) browserElementLocationChangeEventDetail_like -> canGoBack:Js.boolean -> unit = "canGoBack" [@@bs.set]
    external canGoForward : browserElementLocationChangeEventDetail:(_) browserElementLocationChangeEventDetail_like -> bool = "canGoForward" [@@bs.get] 
    external setCanGoForward : browserElementLocationChangeEventDetail:(_) browserElementLocationChangeEventDetail_like -> canGoForward:Js.boolean -> unit = "canGoForward" [@@bs.set]
    
    
end
 module BrowserElementIconChangeEventDetail = struct
    
    
    external make : ?rel:string -> ?href:string -> ?sizes:string -> unit -> browserElementIconChangeEventDetail = "" [@@bs.obj]
    external rel : browserElementIconChangeEventDetail:(_) browserElementIconChangeEventDetail_like -> string = "rel" [@@bs.get] 
    external setRel : browserElementIconChangeEventDetail:(_) browserElementIconChangeEventDetail_like -> rel:string -> unit = "rel" [@@bs.set]
    external href : browserElementIconChangeEventDetail:(_) browserElementIconChangeEventDetail_like -> string = "href" [@@bs.get] 
    external setHref : browserElementIconChangeEventDetail:(_) browserElementIconChangeEventDetail_like -> href:string -> unit = "href" [@@bs.set]
    external sizes : browserElementIconChangeEventDetail:(_) browserElementIconChangeEventDetail_like -> string = "sizes" [@@bs.get] 
    external setSizes : browserElementIconChangeEventDetail:(_) browserElementIconChangeEventDetail_like -> sizes:string -> unit = "sizes" [@@bs.set]
    
    
end
 module BrowserShowModalPromptEventDetail = struct
    
    
    external make : ?promptType:string -> ?title:string -> ?message:string -> ?returnValue:string -> unit -> browserShowModalPromptEventDetail = "" [@@bs.obj]
    external promptType : browserShowModalPromptEventDetail:(_) browserShowModalPromptEventDetail_like -> string = "promptType" [@@bs.get] 
    external setPromptType : browserShowModalPromptEventDetail:(_) browserShowModalPromptEventDetail_like -> promptType:string -> unit = "promptType" [@@bs.set]
    external title : browserShowModalPromptEventDetail:(_) browserShowModalPromptEventDetail_like -> string = "title" [@@bs.get] 
    external setTitle : browserShowModalPromptEventDetail:(_) browserShowModalPromptEventDetail_like -> title:string -> unit = "title" [@@bs.set]
    external message : browserShowModalPromptEventDetail:(_) browserShowModalPromptEventDetail_like -> string = "message" [@@bs.get] 
    external setMessage : browserShowModalPromptEventDetail:(_) browserShowModalPromptEventDetail_like -> message:string -> unit = "message" [@@bs.set]
    external returnValue : browserShowModalPromptEventDetail:(_) browserShowModalPromptEventDetail_like -> string = "returnValue" [@@bs.get] 
    external setReturnValue : browserShowModalPromptEventDetail:(_) browserShowModalPromptEventDetail_like -> returnValue:string -> unit = "returnValue" [@@bs.set]
    
    
end
 module BrowserElementOpenTabEventDetail = struct
    
    
    external make : ?url:string -> unit -> browserElementOpenTabEventDetail = "" [@@bs.obj]
    external url : browserElementOpenTabEventDetail:(_) browserElementOpenTabEventDetail_like -> string = "url" [@@bs.get] 
    external setUrl : browserElementOpenTabEventDetail:(_) browserElementOpenTabEventDetail_like -> url:string -> unit = "url" [@@bs.set]
    
    
end
 module BrowserElementOpenWindowEventDetail = struct
    
    
    external make : ?url:string -> ?target:string -> ?features:string -> unit -> browserElementOpenWindowEventDetail = "" [@@bs.obj]
    external url : browserElementOpenWindowEventDetail:(_) browserElementOpenWindowEventDetail_like -> string = "url" [@@bs.get] 
    external setUrl : browserElementOpenWindowEventDetail:(_) browserElementOpenWindowEventDetail_like -> url:string -> unit = "url" [@@bs.set]
    external target : browserElementOpenWindowEventDetail:(_) browserElementOpenWindowEventDetail_like -> string = "target" [@@bs.get] 
    external setTarget : browserElementOpenWindowEventDetail:(_) browserElementOpenWindowEventDetail_like -> target:string -> unit = "target" [@@bs.set]
    external features : browserElementOpenWindowEventDetail:(_) browserElementOpenWindowEventDetail_like -> string = "features" [@@bs.get] 
    external setFeatures : browserElementOpenWindowEventDetail:(_) browserElementOpenWindowEventDetail_like -> features:string -> unit = "features" [@@bs.set]
    
    
end
 module BrowserElementVisibilityChangeEventDetail = struct
    
    
    external make : ?visible:Js.boolean -> unit -> browserElementVisibilityChangeEventDetail = "" [@@bs.obj]
    external visible : browserElementVisibilityChangeEventDetail:(_) browserElementVisibilityChangeEventDetail_like -> bool = "visible" [@@bs.get] 
    external setVisible : browserElementVisibilityChangeEventDetail:(_) browserElementVisibilityChangeEventDetail_like -> visible:Js.boolean -> unit = "visible" [@@bs.set]
    
    
end
 module TestDictionary = struct
    
    
    external make : requiredValue:Js.boolean -> ?booleanValue:Js.boolean -> ?byteValue:int -> ?octetValue:int -> ?shortValue:int -> ?unsignedShortValue:int -> ?longValue:int -> ?unsignedLongValue:int -> ?longLongValue:int -> ?unsignedLongLongValue:int -> ?unrestrictedFloatValue:float -> ?floatValue:float -> ?unrestrictedDoubleValue:float -> ?doubleValue:float -> ?stringValue:string -> ?usvstringValue:string -> ?enumValue:string -> ?interfaceValue:(_) blob_like -> ?anyValue:'a440 -> ?objectValue:'a441 -> ?dict:(_) testDictionaryDefaults_like -> ?seqDict:(_) testDictionaryDefaults_like array -> ?type_:string -> ?nonRequiredNullable:string Js.null -> ?nonRequiredNullable2:string Js.null -> unit -> testDictionary = "" [@@bs.obj]
    external requiredValue : testDictionary:(_) testDictionary_like -> bool = "requiredValue" [@@bs.get] 
    external setRequiredValue : testDictionary:(_) testDictionary_like -> requiredValue:Js.boolean -> unit = "requiredValue" [@@bs.set]
    external booleanValue : testDictionary:(_) testDictionary_like -> bool = "booleanValue" [@@bs.get] 
    external setBooleanValue : testDictionary:(_) testDictionary_like -> booleanValue:Js.boolean -> unit = "booleanValue" [@@bs.set]
    external byteValue : testDictionary:(_) testDictionary_like -> int = "byteValue" [@@bs.get] 
    external setByteValue : testDictionary:(_) testDictionary_like -> byteValue:int -> unit = "byteValue" [@@bs.set]
    external octetValue : testDictionary:(_) testDictionary_like -> int = "octetValue" [@@bs.get] 
    external setOctetValue : testDictionary:(_) testDictionary_like -> octetValue:int -> unit = "octetValue" [@@bs.set]
    external shortValue : testDictionary:(_) testDictionary_like -> int = "shortValue" [@@bs.get] 
    external setShortValue : testDictionary:(_) testDictionary_like -> shortValue:int -> unit = "shortValue" [@@bs.set]
    external unsignedShortValue : testDictionary:(_) testDictionary_like -> int = "unsignedShortValue" [@@bs.get] 
    external setUnsignedShortValue : testDictionary:(_) testDictionary_like -> unsignedShortValue:int -> unit = "unsignedShortValue" [@@bs.set]
    external longValue : testDictionary:(_) testDictionary_like -> int = "longValue" [@@bs.get] 
    external setLongValue : testDictionary:(_) testDictionary_like -> longValue:int -> unit = "longValue" [@@bs.set]
    external unsignedLongValue : testDictionary:(_) testDictionary_like -> int = "unsignedLongValue" [@@bs.get] 
    external setUnsignedLongValue : testDictionary:(_) testDictionary_like -> unsignedLongValue:int -> unit = "unsignedLongValue" [@@bs.set]
    external longLongValue : testDictionary:(_) testDictionary_like -> int = "longLongValue" [@@bs.get] 
    external setLongLongValue : testDictionary:(_) testDictionary_like -> longLongValue:int -> unit = "longLongValue" [@@bs.set]
    external unsignedLongLongValue : testDictionary:(_) testDictionary_like -> int = "unsignedLongLongValue" [@@bs.get] 
    external setUnsignedLongLongValue : testDictionary:(_) testDictionary_like -> unsignedLongLongValue:int -> unit = "unsignedLongLongValue" [@@bs.set]
    external unrestrictedFloatValue : testDictionary:(_) testDictionary_like -> float = "unrestrictedFloatValue" [@@bs.get] 
    external setUnrestrictedFloatValue : testDictionary:(_) testDictionary_like -> unrestrictedFloatValue:float -> unit = "unrestrictedFloatValue" [@@bs.set]
    external floatValue : testDictionary:(_) testDictionary_like -> float = "floatValue" [@@bs.get] 
    external setFloatValue : testDictionary:(_) testDictionary_like -> floatValue:float -> unit = "floatValue" [@@bs.set]
    external unrestrictedDoubleValue : testDictionary:(_) testDictionary_like -> float = "unrestrictedDoubleValue" [@@bs.get] 
    external setUnrestrictedDoubleValue : testDictionary:(_) testDictionary_like -> unrestrictedDoubleValue:float -> unit = "unrestrictedDoubleValue" [@@bs.set]
    external doubleValue : testDictionary:(_) testDictionary_like -> float = "doubleValue" [@@bs.get] 
    external setDoubleValue : testDictionary:(_) testDictionary_like -> doubleValue:float -> unit = "doubleValue" [@@bs.set]
    external stringValue : testDictionary:(_) testDictionary_like -> string = "stringValue" [@@bs.get] 
    external setStringValue : testDictionary:(_) testDictionary_like -> stringValue:string -> unit = "stringValue" [@@bs.set]
    external usvstringValue : testDictionary:(_) testDictionary_like -> string = "usvstringValue" [@@bs.get] 
    external setUsvstringValue : testDictionary:(_) testDictionary_like -> usvstringValue:string -> unit = "usvstringValue" [@@bs.set]
    external enumValue : testDictionary:(_) testDictionary_like -> string = "enumValue" [@@bs.get] 
    external setEnumValue : testDictionary:(_) testDictionary_like -> enumValue:string -> unit = "enumValue" [@@bs.set]
    external interfaceValue : testDictionary:(_) testDictionary_like -> blob = "interfaceValue" [@@bs.get] 
    external setInterfaceValue : testDictionary:(_) testDictionary_like -> interfaceValue:blob -> unit = "interfaceValue" [@@bs.set]
    external anyValue : testDictionary:(_) testDictionary_like -> 'a442 = "anyValue" [@@bs.get] 
    external setAnyValue : testDictionary:(_) testDictionary_like -> anyValue:'a443 -> unit = "anyValue" [@@bs.set]
    external objectValue : testDictionary:(_) testDictionary_like -> 'a444 = "objectValue" [@@bs.get] 
    external setObjectValue : testDictionary:(_) testDictionary_like -> objectValue:'a445 -> unit = "objectValue" [@@bs.set]
    external dict : testDictionary:(_) testDictionary_like -> testDictionaryDefaults = "dict" [@@bs.get] 
    external setDict : testDictionary:(_) testDictionary_like -> dict:testDictionaryDefaults -> unit = "dict" [@@bs.set]
    external seqDict : testDictionary:(_) testDictionary_like -> testDictionaryDefaults array = "seqDict" [@@bs.get] 
    external setSeqDict : testDictionary:(_) testDictionary_like -> seqDict:testDictionaryDefaults array -> unit = "seqDict" [@@bs.set]
    external type_ : testDictionary:(_) testDictionary_like -> string = "type" [@@bs.get] 
    external setType : testDictionary:(_) testDictionary_like -> type_:string -> unit = "type" [@@bs.set]
    external nonRequiredNullable : testDictionary:(_) testDictionary_like -> string option = "nonRequiredNullable" [@@bs.get] [@@bs.return null_to_opt]
    external setNonRequiredNullable : testDictionary:(_) testDictionary_like -> nonRequiredNullable:string Js.null -> unit = "nonRequiredNullable" [@@bs.set]
    external nonRequiredNullable2 : testDictionary:(_) testDictionary_like -> string option = "nonRequiredNullable2" [@@bs.get] [@@bs.return null_to_opt]
    external setNonRequiredNullable2 : testDictionary:(_) testDictionary_like -> nonRequiredNullable2:string Js.null -> unit = "nonRequiredNullable2" [@@bs.set]
    
    
end
 module TestDictionaryDefaults = struct
    
    
    external make : ?booleanValue:Js.boolean -> ?byteValue:int -> ?octetValue:int -> ?shortValue:int -> ?unsignedShortValue:int -> ?longValue:int -> ?unsignedLongValue:int -> ?longLongValue:int -> ?unsignedLongLongValue:int -> ?unrestrictedFloatValue:float -> ?floatValue:float -> ?unrestrictedDoubleValue:float -> ?doubleValue:float -> ?bytestringValue:string -> ?stringValue:string -> ?usvstringValue:string -> ?enumValue:string -> ?anyValue:'a446 -> ?nullableBooleanValue:Js.boolean Js.null -> ?nullableByteValue:int Js.null -> ?nullableOctetValue:int Js.null -> ?nullableShortValue:int Js.null -> ?nullableUnsignedShortValue:int Js.null -> ?nullableLongValue:int Js.null -> ?nullableUnsignedLongValue:int Js.null -> ?nullableLongLongValue:int Js.null -> ?nullableUnsignedLongLongValue:int Js.null -> ?nullableUnrestrictedFloatValue:float Js.null -> ?nullableFloatValue:float Js.null -> ?nullableUnrestrictedDoubleValue:float Js.null -> ?nullableDoubleValue:float Js.null -> ?nullableBytestringValue:string Js.null -> ?nullableStringValue:string Js.null -> ?nullableUsvstringValue:string Js.null -> ?nullableObjectValue:'a447 Js.null -> unit -> testDictionaryDefaults = "" [@@bs.obj]
    external booleanValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> bool = "booleanValue" [@@bs.get] 
    external setBooleanValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> booleanValue:Js.boolean -> unit = "booleanValue" [@@bs.set]
    external byteValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> int = "byteValue" [@@bs.get] 
    external setByteValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> byteValue:int -> unit = "byteValue" [@@bs.set]
    external octetValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> int = "octetValue" [@@bs.get] 
    external setOctetValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> octetValue:int -> unit = "octetValue" [@@bs.set]
    external shortValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> int = "shortValue" [@@bs.get] 
    external setShortValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> shortValue:int -> unit = "shortValue" [@@bs.set]
    external unsignedShortValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> int = "unsignedShortValue" [@@bs.get] 
    external setUnsignedShortValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> unsignedShortValue:int -> unit = "unsignedShortValue" [@@bs.set]
    external longValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> int = "longValue" [@@bs.get] 
    external setLongValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> longValue:int -> unit = "longValue" [@@bs.set]
    external unsignedLongValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> int = "unsignedLongValue" [@@bs.get] 
    external setUnsignedLongValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> unsignedLongValue:int -> unit = "unsignedLongValue" [@@bs.set]
    external longLongValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> int = "longLongValue" [@@bs.get] 
    external setLongLongValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> longLongValue:int -> unit = "longLongValue" [@@bs.set]
    external unsignedLongLongValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> int = "unsignedLongLongValue" [@@bs.get] 
    external setUnsignedLongLongValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> unsignedLongLongValue:int -> unit = "unsignedLongLongValue" [@@bs.set]
    external unrestrictedFloatValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> float = "unrestrictedFloatValue" [@@bs.get] 
    external setUnrestrictedFloatValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> unrestrictedFloatValue:float -> unit = "unrestrictedFloatValue" [@@bs.set]
    external floatValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> float = "floatValue" [@@bs.get] 
    external setFloatValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> floatValue:float -> unit = "floatValue" [@@bs.set]
    external unrestrictedDoubleValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> float = "UnrestrictedDoubleValue" [@@bs.get] 
    external setUnrestrictedDoubleValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> unrestrictedDoubleValue:float -> unit = "UnrestrictedDoubleValue" [@@bs.set]
    external doubleValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> float = "doubleValue" [@@bs.get] 
    external setDoubleValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> doubleValue:float -> unit = "doubleValue" [@@bs.set]
    external bytestringValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> string = "bytestringValue" [@@bs.get] 
    external setBytestringValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> bytestringValue:string -> unit = "bytestringValue" [@@bs.set]
    external stringValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> string = "stringValue" [@@bs.get] 
    external setStringValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> stringValue:string -> unit = "stringValue" [@@bs.set]
    external usvstringValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> string = "usvstringValue" [@@bs.get] 
    external setUsvstringValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> usvstringValue:string -> unit = "usvstringValue" [@@bs.set]
    external enumValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> string = "enumValue" [@@bs.get] 
    external setEnumValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> enumValue:string -> unit = "enumValue" [@@bs.set]
    external anyValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> 'a448 = "anyValue" [@@bs.get] 
    external setAnyValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> anyValue:'a449 -> unit = "anyValue" [@@bs.set]
    external nullableBooleanValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> Js.boolean option = "nullableBooleanValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNullableBooleanValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> nullableBooleanValue:Js.boolean Js.null -> unit = "nullableBooleanValue" [@@bs.set]
    external nullableByteValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> int option = "nullableByteValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNullableByteValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> nullableByteValue:int Js.null -> unit = "nullableByteValue" [@@bs.set]
    external nullableOctetValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> int option = "nullableOctetValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNullableOctetValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> nullableOctetValue:int Js.null -> unit = "nullableOctetValue" [@@bs.set]
    external nullableShortValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> int option = "nullableShortValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNullableShortValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> nullableShortValue:int Js.null -> unit = "nullableShortValue" [@@bs.set]
    external nullableUnsignedShortValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> int option = "nullableUnsignedShortValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNullableUnsignedShortValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> nullableUnsignedShortValue:int Js.null -> unit = "nullableUnsignedShortValue" [@@bs.set]
    external nullableLongValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> int option = "nullableLongValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNullableLongValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> nullableLongValue:int Js.null -> unit = "nullableLongValue" [@@bs.set]
    external nullableUnsignedLongValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> int option = "nullableUnsignedLongValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNullableUnsignedLongValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> nullableUnsignedLongValue:int Js.null -> unit = "nullableUnsignedLongValue" [@@bs.set]
    external nullableLongLongValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> int option = "nullableLongLongValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNullableLongLongValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> nullableLongLongValue:int Js.null -> unit = "nullableLongLongValue" [@@bs.set]
    external nullableUnsignedLongLongValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> int option = "nullableUnsignedLongLongValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNullableUnsignedLongLongValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> nullableUnsignedLongLongValue:int Js.null -> unit = "nullableUnsignedLongLongValue" [@@bs.set]
    external nullableUnrestrictedFloatValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> float option = "nullableUnrestrictedFloatValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNullableUnrestrictedFloatValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> nullableUnrestrictedFloatValue:float Js.null -> unit = "nullableUnrestrictedFloatValue" [@@bs.set]
    external nullableFloatValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> float option = "nullableFloatValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNullableFloatValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> nullableFloatValue:float Js.null -> unit = "nullableFloatValue" [@@bs.set]
    external nullableUnrestrictedDoubleValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> float option = "nullableUnrestrictedDoubleValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNullableUnrestrictedDoubleValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> nullableUnrestrictedDoubleValue:float Js.null -> unit = "nullableUnrestrictedDoubleValue" [@@bs.set]
    external nullableDoubleValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> float option = "nullableDoubleValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNullableDoubleValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> nullableDoubleValue:float Js.null -> unit = "nullableDoubleValue" [@@bs.set]
    external nullableBytestringValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> string option = "nullableBytestringValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNullableBytestringValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> nullableBytestringValue:string Js.null -> unit = "nullableBytestringValue" [@@bs.set]
    external nullableStringValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> string option = "nullableStringValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNullableStringValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> nullableStringValue:string Js.null -> unit = "nullableStringValue" [@@bs.set]
    external nullableUsvstringValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> string option = "nullableUsvstringValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNullableUsvstringValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> nullableUsvstringValue:string Js.null -> unit = "nullableUsvstringValue" [@@bs.set]
    external nullableObjectValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> 'a450 option = "nullableObjectValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNullableObjectValue : testDictionaryDefaults:(_) testDictionaryDefaults_like -> nullableObjectValue:'a451 Js.null -> unit = "nullableObjectValue" [@@bs.set]
    
    
end
 module TextDecoderOptions = struct
    
    
    external make : ?fatal:Js.boolean -> unit -> textDecoderOptions = "" [@@bs.obj]
    external fatal : textDecoderOptions:(_) textDecoderOptions_like -> bool = "fatal" [@@bs.get] 
    external setFatal : textDecoderOptions:(_) textDecoderOptions_like -> fatal:Js.boolean -> unit = "fatal" [@@bs.set]
    
    
end
 module WorkletOptions = struct
    
    
    external make : ?credentials:string -> unit -> workletOptions = "" [@@bs.obj]
    external credentials : workletOptions:(_) workletOptions_like -> string = "credentials" [@@bs.get] 
    external setCredentials : workletOptions:(_) workletOptions_like -> credentials:string -> unit = "credentials" [@@bs.set]
    
    
end
 module DOMPointInit = struct
    
    
    external make : ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> dOMPointInit = "" [@@bs.obj]
    external x : dOMPointInit:(_) dOMPointInit_like -> float = "x" [@@bs.get] 
    external setX : dOMPointInit:(_) dOMPointInit_like -> x:float -> unit = "x" [@@bs.set]
    external y : dOMPointInit:(_) dOMPointInit_like -> float = "y" [@@bs.get] 
    external setY : dOMPointInit:(_) dOMPointInit_like -> y:float -> unit = "y" [@@bs.set]
    external z : dOMPointInit:(_) dOMPointInit_like -> float = "z" [@@bs.get] 
    external setZ : dOMPointInit:(_) dOMPointInit_like -> z:float -> unit = "z" [@@bs.set]
    external w : dOMPointInit:(_) dOMPointInit_like -> float = "w" [@@bs.get] 
    external setW : dOMPointInit:(_) dOMPointInit_like -> w:float -> unit = "w" [@@bs.set]
    
    
end
 module DOMQuadInit = struct
    
    
    external make : ?p1:(_) dOMPointInit_like -> ?p2:(_) dOMPointInit_like -> ?p3:(_) dOMPointInit_like -> ?p4:(_) dOMPointInit_like -> unit -> dOMQuadInit = "" [@@bs.obj]
    external p1 : dOMQuadInit:(_) dOMQuadInit_like -> dOMPointInit = "p1" [@@bs.get] 
    external setP1 : dOMQuadInit:(_) dOMQuadInit_like -> p1:dOMPointInit -> unit = "p1" [@@bs.set]
    external p2 : dOMQuadInit:(_) dOMQuadInit_like -> dOMPointInit = "p2" [@@bs.get] 
    external setP2 : dOMQuadInit:(_) dOMQuadInit_like -> p2:dOMPointInit -> unit = "p2" [@@bs.set]
    external p3 : dOMQuadInit:(_) dOMQuadInit_like -> dOMPointInit = "p3" [@@bs.get] 
    external setP3 : dOMQuadInit:(_) dOMQuadInit_like -> p3:dOMPointInit -> unit = "p3" [@@bs.set]
    external p4 : dOMQuadInit:(_) dOMQuadInit_like -> dOMPointInit = "p4" [@@bs.get] 
    external setP4 : dOMQuadInit:(_) dOMQuadInit_like -> p4:dOMPointInit -> unit = "p4" [@@bs.set]
    
    
end
 module RequestInit = struct
    
    
    external make : ?method_:string -> ?headers:'a452 -> ?body:'a453 Js.null -> ?referrer:string -> ?referrerPolicy:string -> ?mode:string -> ?credentials:string -> ?cache:string -> ?redirect:string -> ?integrity:string -> ?window:'a454 -> unit -> requestInit = "" [@@bs.obj]
    external method_ : requestInit:(_) requestInit_like -> string = "method" [@@bs.get] 
    external setMethod : requestInit:(_) requestInit_like -> method_:string -> unit = "method" [@@bs.set]
    external headers : requestInit:(_) requestInit_like -> 'a455 = "headers" [@@bs.get] 
    external setHeaders : requestInit:(_) requestInit_like -> headers:'a456 -> unit = "headers" [@@bs.set]
    external body : requestInit:(_) requestInit_like -> 'a457 option = "body" [@@bs.get] [@@bs.return null_to_opt]
    external setBody : requestInit:(_) requestInit_like -> body:'a458 Js.null -> unit = "body" [@@bs.set]
    external referrer : requestInit:(_) requestInit_like -> string = "referrer" [@@bs.get] 
    external setReferrer : requestInit:(_) requestInit_like -> referrer:string -> unit = "referrer" [@@bs.set]
    external referrerPolicy : requestInit:(_) requestInit_like -> string = "referrerPolicy" [@@bs.get] 
    external setReferrerPolicy : requestInit:(_) requestInit_like -> referrerPolicy:string -> unit = "referrerPolicy" [@@bs.set]
    external mode : requestInit:(_) requestInit_like -> string = "mode" [@@bs.get] 
    external setMode : requestInit:(_) requestInit_like -> mode:string -> unit = "mode" [@@bs.set]
    external credentials : requestInit:(_) requestInit_like -> string = "credentials" [@@bs.get] 
    external setCredentials : requestInit:(_) requestInit_like -> credentials:string -> unit = "credentials" [@@bs.set]
    external cache : requestInit:(_) requestInit_like -> string = "cache" [@@bs.get] 
    external setCache : requestInit:(_) requestInit_like -> cache:string -> unit = "cache" [@@bs.set]
    external redirect : requestInit:(_) requestInit_like -> string = "redirect" [@@bs.get] 
    external setRedirect : requestInit:(_) requestInit_like -> redirect:string -> unit = "redirect" [@@bs.set]
    external integrity : requestInit:(_) requestInit_like -> string = "integrity" [@@bs.get] 
    external setIntegrity : requestInit:(_) requestInit_like -> integrity:string -> unit = "integrity" [@@bs.set]
    external window : requestInit:(_) requestInit_like -> 'a459 = "window" [@@bs.get] 
    external setWindow : requestInit:(_) requestInit_like -> window:'a460 -> unit = "window" [@@bs.set]
    
    
end
 module ElementCreationOptions = struct
    
    
    external make : ?is:string -> unit -> elementCreationOptions = "" [@@bs.obj]
    external is : elementCreationOptions:(_) elementCreationOptions_like -> string = "is" [@@bs.get] 
    external setIs : elementCreationOptions:(_) elementCreationOptions_like -> is:string -> unit = "is" [@@bs.set]
    
    
end
 module ResponseInit = struct
    
    
    external make : ?status:int -> ?statusText:string -> ?headers:'a461 -> unit -> responseInit = "" [@@bs.obj]
    external status : responseInit:(_) responseInit_like -> int = "status" [@@bs.get] 
    external setStatus : responseInit:(_) responseInit_like -> status:int -> unit = "status" [@@bs.set]
    external statusText : responseInit:(_) responseInit_like -> string = "statusText" [@@bs.get] 
    external setStatusText : responseInit:(_) responseInit_like -> statusText:string -> unit = "statusText" [@@bs.set]
    external headers : responseInit:(_) responseInit_like -> 'a462 = "headers" [@@bs.get] 
    external setHeaders : responseInit:(_) responseInit_like -> headers:'a463 -> unit = "headers" [@@bs.set]
    
    
end
 module BluetoothDataFilterInit = struct
    
    
    external make : ?dataPrefix:int array -> ?mask:int array -> unit -> bluetoothDataFilterInit = "" [@@bs.obj]
    external dataPrefix : bluetoothDataFilterInit:(_) bluetoothDataFilterInit_like -> int array = "dataPrefix" [@@bs.get] 
    external setDataPrefix : bluetoothDataFilterInit:(_) bluetoothDataFilterInit_like -> dataPrefix:int array -> unit = "dataPrefix" [@@bs.set]
    external mask : bluetoothDataFilterInit:(_) bluetoothDataFilterInit_like -> int array = "mask" [@@bs.get] 
    external setMask : bluetoothDataFilterInit:(_) bluetoothDataFilterInit_like -> mask:int array -> unit = "mask" [@@bs.set]
    
    
end
 module BluetoothLEScanFilterInit = struct
    
    
    external make : ?services:'a464 array -> ?name:string -> ?namePrefix:string -> ?manufacturerData:'a465 -> ?serviceData:'a466 -> unit -> bluetoothLEScanFilterInit = "" [@@bs.obj]
    external services : bluetoothLEScanFilterInit:(_) bluetoothLEScanFilterInit_like -> 'a467 array = "services" [@@bs.get] 
    external setServices : bluetoothLEScanFilterInit:(_) bluetoothLEScanFilterInit_like -> services:'a468 array -> unit = "services" [@@bs.set]
    external name : bluetoothLEScanFilterInit:(_) bluetoothLEScanFilterInit_like -> string = "name" [@@bs.get] 
    external setName : bluetoothLEScanFilterInit:(_) bluetoothLEScanFilterInit_like -> name:string -> unit = "name" [@@bs.set]
    external namePrefix : bluetoothLEScanFilterInit:(_) bluetoothLEScanFilterInit_like -> string = "namePrefix" [@@bs.get] 
    external setNamePrefix : bluetoothLEScanFilterInit:(_) bluetoothLEScanFilterInit_like -> namePrefix:string -> unit = "namePrefix" [@@bs.set]
    external manufacturerData : bluetoothLEScanFilterInit:(_) bluetoothLEScanFilterInit_like -> 'a469 = "manufacturerData" [@@bs.get] 
    external setManufacturerData : bluetoothLEScanFilterInit:(_) bluetoothLEScanFilterInit_like -> manufacturerData:'a470 -> unit = "manufacturerData" [@@bs.set]
    external serviceData : bluetoothLEScanFilterInit:(_) bluetoothLEScanFilterInit_like -> 'a471 = "serviceData" [@@bs.get] 
    external setServiceData : bluetoothLEScanFilterInit:(_) bluetoothLEScanFilterInit_like -> serviceData:'a472 -> unit = "serviceData" [@@bs.set]
    
    
end
 module RequestDeviceOptions = struct
    
    
    external make : ?filters:(_) bluetoothLEScanFilterInit_like array -> ?optionalServices:'a473 array -> ?acceptAllDevices:Js.boolean -> unit -> requestDeviceOptions = "" [@@bs.obj]
    external filters : requestDeviceOptions:(_) requestDeviceOptions_like -> bluetoothLEScanFilterInit array = "filters" [@@bs.get] 
    external setFilters : requestDeviceOptions:(_) requestDeviceOptions_like -> filters:bluetoothLEScanFilterInit array -> unit = "filters" [@@bs.set]
    external optionalServices : requestDeviceOptions:(_) requestDeviceOptions_like -> 'a474 array = "optionalServices" [@@bs.get] 
    external setOptionalServices : requestDeviceOptions:(_) requestDeviceOptions_like -> optionalServices:'a475 array -> unit = "optionalServices" [@@bs.set]
    external acceptAllDevices : requestDeviceOptions:(_) requestDeviceOptions_like -> bool = "acceptAllDevices" [@@bs.get] 
    external setAcceptAllDevices : requestDeviceOptions:(_) requestDeviceOptions_like -> acceptAllDevices:Js.boolean -> unit = "acceptAllDevices" [@@bs.set]
    
    
end
 module MutationObserverInit = struct
    
    
    external make : ?childList:Js.boolean -> ?attributes:Js.boolean -> ?characterData:Js.boolean -> ?subtree:Js.boolean -> ?attributeOldValue:Js.boolean -> ?characterDataOldValue:Js.boolean -> ?attributeFilter:string array -> unit -> mutationObserverInit = "" [@@bs.obj]
    external childList : mutationObserverInit:(_) mutationObserverInit_like -> bool = "childList" [@@bs.get] 
    external setChildList : mutationObserverInit:(_) mutationObserverInit_like -> childList:Js.boolean -> unit = "childList" [@@bs.set]
    external attributes : mutationObserverInit:(_) mutationObserverInit_like -> bool = "attributes" [@@bs.get] 
    external setAttributes : mutationObserverInit:(_) mutationObserverInit_like -> attributes:Js.boolean -> unit = "attributes" [@@bs.set]
    external characterData : mutationObserverInit:(_) mutationObserverInit_like -> bool = "characterData" [@@bs.get] 
    external setCharacterData : mutationObserverInit:(_) mutationObserverInit_like -> characterData:Js.boolean -> unit = "characterData" [@@bs.set]
    external subtree : mutationObserverInit:(_) mutationObserverInit_like -> bool = "subtree" [@@bs.get] 
    external setSubtree : mutationObserverInit:(_) mutationObserverInit_like -> subtree:Js.boolean -> unit = "subtree" [@@bs.set]
    external attributeOldValue : mutationObserverInit:(_) mutationObserverInit_like -> bool = "attributeOldValue" [@@bs.get] 
    external setAttributeOldValue : mutationObserverInit:(_) mutationObserverInit_like -> attributeOldValue:Js.boolean -> unit = "attributeOldValue" [@@bs.set]
    external characterDataOldValue : mutationObserverInit:(_) mutationObserverInit_like -> bool = "characterDataOldValue" [@@bs.get] 
    external setCharacterDataOldValue : mutationObserverInit:(_) mutationObserverInit_like -> characterDataOldValue:Js.boolean -> unit = "characterDataOldValue" [@@bs.set]
    external attributeFilter : mutationObserverInit:(_) mutationObserverInit_like -> string array = "attributeFilter" [@@bs.get] 
    external setAttributeFilter : mutationObserverInit:(_) mutationObserverInit_like -> attributeFilter:string array -> unit = "attributeFilter" [@@bs.set]
    
    
end
 module EventInit = struct
    
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> unit -> eventInit = "" [@@bs.obj]
    external bubbles : eventInit:(_) eventInit_like -> bool = "bubbles" [@@bs.get] 
    external setBubbles : eventInit:(_) eventInit_like -> bubbles:Js.boolean -> unit = "bubbles" [@@bs.set]
    external cancelable : eventInit:(_) eventInit_like -> bool = "cancelable" [@@bs.get] 
    external setCancelable : eventInit:(_) eventInit_like -> cancelable:Js.boolean -> unit = "cancelable" [@@bs.set]
    
    
end
 module ScrollOptions = struct
    
    
    external make : ?behavior:string -> unit -> scrollOptions = "" [@@bs.obj]
    external behavior : scrollOptions:(_) scrollOptions_like -> string = "behavior" [@@bs.get] 
    external setBehavior : scrollOptions:(_) scrollOptions_like -> behavior:string -> unit = "behavior" [@@bs.set]
    
    
end
 module BlobPropertyBag = struct
    
    
    external make : ?type_:string -> unit -> blobPropertyBag = "" [@@bs.obj]
    external type_ : blobPropertyBag:(_) blobPropertyBag_like -> string = "type" [@@bs.get] 
    external setType : blobPropertyBag:(_) blobPropertyBag_like -> type_:string -> unit = "type" [@@bs.set]
    
    
end
 module NodeFilter = struct
    
    
    external make : acceptNode:((_) node_like -> int [@bs]) -> unit -> nodeFilter = "" [@@bs.obj]
    external acceptNode : nodeFilter:(_) nodeFilter_like -> node:(_) node_like -> int = "acceptNode" [@@bs.send] 
    
    let filter_accept  =
      
      1
    
    let filter_reject  =
      
      2
    
    let filter_skip  =
      
      3
    
    let show_all  =
      
      4294967295
    
    let show_element  =
      
      1
    
    let show_attribute  =
      
      2
    
    let show_text  =
      
      4
    
    let show_cdata_section  =
      
      8
    
    let show_entity_reference  =
      
      16
    
    let show_entity  =
      
      32
    
    let show_processing_instruction  =
      
      64
    
    let show_comment  =
      
      128
    
    let show_document  =
      
      256
    
    let show_document_type  =
      
      512
    
    let show_document_fragment  =
      
      1024
    
    let show_notation  =
      
      2048
    
end
 module EventListener = struct
    
    
    external make : handleEvent:((_) event_like -> unit [@bs]) -> unit -> eventListener = "" [@@bs.obj]
    external handleEvent : eventListener:(_) eventListener_like -> event:(_) event_like -> unit = "handleEvent" [@@bs.send] 
    
    
end
 module EventSource = struct
    include EventTarget
    
    external url : eventSource:(_) eventSource_like -> string = "url" [@@bs.get] 
    external withCredentials : eventSource:(_) eventSource_like -> bool = "withCredentials" [@@bs.get] 
    external readyState : eventSource:(_) eventSource_like -> int = "readyState" [@@bs.get] 
    external onopen : eventSource:(_) eventSource_like -> (event -> 'a476 [@bs]) option = "onopen" [@@bs.get] [@@bs.return null_to_opt]
    external setOnopen : eventSource:(_) eventSource_like -> onopen:(event -> 'a477 [@bs]) Js.null -> unit = "onopen" [@@bs.set]
    external onmessage : eventSource:(_) eventSource_like -> (event -> 'a478 [@bs]) option = "onmessage" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmessage : eventSource:(_) eventSource_like -> onmessage:(event -> 'a479 [@bs]) Js.null -> unit = "onmessage" [@@bs.set]
    external onerror : eventSource:(_) eventSource_like -> (event -> 'a480 [@bs]) option = "onerror" [@@bs.get] [@@bs.return null_to_opt]
    external setOnerror : eventSource:(_) eventSource_like -> onerror:(event -> 'a481 [@bs]) Js.null -> unit = "onerror" [@@bs.set]
    external close : eventSource:(_) eventSource_like -> unit = "close" [@@bs.send] 
    
    let connecting  =
      
      0
    
    let open_  =
      
      1
    
    let closed_  =
      
      2
    
end
 module CSSStyleRule = struct
    include CSSRule
    
    external style : cSSStyleRule:(_) cSSStyleRule_like -> cSSStyleDeclaration = "style" [@@bs.get] 
    
    
end
 module CSSFontFaceRule = struct
    include CSSRule
    
    
    
    
end
 module UIEvent = struct
    include Event
    
    external view : uIEvent:(_) uIEvent_like -> window option = "view" [@@bs.get] [@@bs.return null_to_opt]
    external detail : uIEvent:(_) uIEvent_like -> int = "detail" [@@bs.get] 
    external initUIEvent : uIEvent:(_) uIEvent_like -> typeArg:string -> bubblesArg:Js.boolean -> cancelableArg:Js.boolean -> viewArg:(_) window_like Js.null -> detailArg:int -> unit = "initUIEvent" [@@bs.send] 
    
    
end
 module GamepadEvent = struct
    include Event
    
    external gamepad : gamepadEvent:(_) gamepadEvent_like -> gamepad = "gamepad" [@@bs.get] 
    
    
end
 module HTMLOptionsCollection = struct
    include HTMLCollection
    
    external length : hTMLOptionsCollection:(_) hTMLOptionsCollection_like -> int = "length" [@@bs.get] 
    external setLength : hTMLOptionsCollection:(_) hTMLOptionsCollection_like -> length:int -> unit = "length" [@@bs.set]
    external selectedIndex : hTMLOptionsCollection:(_) hTMLOptionsCollection_like -> int = "selectedIndex" [@@bs.get] 
    external setSelectedIndex : hTMLOptionsCollection:(_) hTMLOptionsCollection_like -> selectedIndex:int -> unit = "selectedIndex" [@@bs.set]
    external none : hTMLOptionsCollection:(_) hTMLOptionsCollection_like -> index:int -> option:(_) hTMLOptionElement_like Js.null -> unit = "" [@@bs.set_index] 
    external add : hTMLOptionsCollection:(_) hTMLOptionsCollection_like -> element:'a482 -> ?before:'a483 Js.undefined -> unit = "add" [@@bs.send] 
    external remove : hTMLOptionsCollection:(_) hTMLOptionsCollection_like -> index:int -> unit = "remove" [@@bs.send] 
    
    let add ~hTMLOptionsCollection ~element ~before =
      let conv_element = function
        | `HTMLOptionElement (x: (_) hTMLOptionElement_like) -> Obj.magic x
        | `HTMLOptGroupElement (x: (_) hTMLOptGroupElement_like) -> Obj.magic x
         in
      let element = conv_element element in
      let conv_before = function
        | `HTMLElement_Null (x: (_) hTMLElement_like Js.null) -> Obj.magic x
        | `Int_Null (x: int Js.null) -> Obj.magic x
         in
      let conv_before = access_undef conv_before in
      let before = conv_before before in
      let return = add ~hTMLOptionsCollection ~element ~before in
      return
    
    let add ~hTMLOptionsCollection ~element ?before () =
      let conv_before = Js_undefined.from_opt in
      let before = conv_before before in
      add ~hTMLOptionsCollection ~element ~before
    
end
 module DOMMatrix = struct
    include DOMMatrixReadOnly
    
    external a : dOMMatrix:(_) dOMMatrix_like -> float = "a" [@@bs.get] 
    external setA : dOMMatrix:(_) dOMMatrix_like -> a:float -> unit = "a" [@@bs.set]
    external b : dOMMatrix:(_) dOMMatrix_like -> float = "b" [@@bs.get] 
    external setB : dOMMatrix:(_) dOMMatrix_like -> b:float -> unit = "b" [@@bs.set]
    external c : dOMMatrix:(_) dOMMatrix_like -> float = "c" [@@bs.get] 
    external setC : dOMMatrix:(_) dOMMatrix_like -> c:float -> unit = "c" [@@bs.set]
    external d : dOMMatrix:(_) dOMMatrix_like -> float = "d" [@@bs.get] 
    external setD : dOMMatrix:(_) dOMMatrix_like -> d:float -> unit = "d" [@@bs.set]
    external e : dOMMatrix:(_) dOMMatrix_like -> float = "e" [@@bs.get] 
    external setE : dOMMatrix:(_) dOMMatrix_like -> e:float -> unit = "e" [@@bs.set]
    external f : dOMMatrix:(_) dOMMatrix_like -> float = "f" [@@bs.get] 
    external setF : dOMMatrix:(_) dOMMatrix_like -> f:float -> unit = "f" [@@bs.set]
    external m11 : dOMMatrix:(_) dOMMatrix_like -> float = "m11" [@@bs.get] 
    external setM11 : dOMMatrix:(_) dOMMatrix_like -> m11:float -> unit = "m11" [@@bs.set]
    external m12 : dOMMatrix:(_) dOMMatrix_like -> float = "m12" [@@bs.get] 
    external setM12 : dOMMatrix:(_) dOMMatrix_like -> m12:float -> unit = "m12" [@@bs.set]
    external m13 : dOMMatrix:(_) dOMMatrix_like -> float = "m13" [@@bs.get] 
    external setM13 : dOMMatrix:(_) dOMMatrix_like -> m13:float -> unit = "m13" [@@bs.set]
    external m14 : dOMMatrix:(_) dOMMatrix_like -> float = "m14" [@@bs.get] 
    external setM14 : dOMMatrix:(_) dOMMatrix_like -> m14:float -> unit = "m14" [@@bs.set]
    external m21 : dOMMatrix:(_) dOMMatrix_like -> float = "m21" [@@bs.get] 
    external setM21 : dOMMatrix:(_) dOMMatrix_like -> m21:float -> unit = "m21" [@@bs.set]
    external m22 : dOMMatrix:(_) dOMMatrix_like -> float = "m22" [@@bs.get] 
    external setM22 : dOMMatrix:(_) dOMMatrix_like -> m22:float -> unit = "m22" [@@bs.set]
    external m23 : dOMMatrix:(_) dOMMatrix_like -> float = "m23" [@@bs.get] 
    external setM23 : dOMMatrix:(_) dOMMatrix_like -> m23:float -> unit = "m23" [@@bs.set]
    external m24 : dOMMatrix:(_) dOMMatrix_like -> float = "m24" [@@bs.get] 
    external setM24 : dOMMatrix:(_) dOMMatrix_like -> m24:float -> unit = "m24" [@@bs.set]
    external m31 : dOMMatrix:(_) dOMMatrix_like -> float = "m31" [@@bs.get] 
    external setM31 : dOMMatrix:(_) dOMMatrix_like -> m31:float -> unit = "m31" [@@bs.set]
    external m32 : dOMMatrix:(_) dOMMatrix_like -> float = "m32" [@@bs.get] 
    external setM32 : dOMMatrix:(_) dOMMatrix_like -> m32:float -> unit = "m32" [@@bs.set]
    external m33 : dOMMatrix:(_) dOMMatrix_like -> float = "m33" [@@bs.get] 
    external setM33 : dOMMatrix:(_) dOMMatrix_like -> m33:float -> unit = "m33" [@@bs.set]
    external m34 : dOMMatrix:(_) dOMMatrix_like -> float = "m34" [@@bs.get] 
    external setM34 : dOMMatrix:(_) dOMMatrix_like -> m34:float -> unit = "m34" [@@bs.set]
    external m41 : dOMMatrix:(_) dOMMatrix_like -> float = "m41" [@@bs.get] 
    external setM41 : dOMMatrix:(_) dOMMatrix_like -> m41:float -> unit = "m41" [@@bs.set]
    external m42 : dOMMatrix:(_) dOMMatrix_like -> float = "m42" [@@bs.get] 
    external setM42 : dOMMatrix:(_) dOMMatrix_like -> m42:float -> unit = "m42" [@@bs.set]
    external m43 : dOMMatrix:(_) dOMMatrix_like -> float = "m43" [@@bs.get] 
    external setM43 : dOMMatrix:(_) dOMMatrix_like -> m43:float -> unit = "m43" [@@bs.set]
    external m44 : dOMMatrix:(_) dOMMatrix_like -> float = "m44" [@@bs.get] 
    external setM44 : dOMMatrix:(_) dOMMatrix_like -> m44:float -> unit = "m44" [@@bs.set]
    external fromMatrix : dOMMatrix:(_) dOMMatrix_like -> ?other:(_) dOMMatrixInit_like Js.undefined -> dOMMatrix = "fromMatrix" [@@bs.send] 
    external invertSelf : dOMMatrix:(_) dOMMatrix_like -> dOMMatrix = "invertSelf" [@@bs.send] 
    external multiplySelf : dOMMatrix:(_) dOMMatrix_like -> ?other:(_) dOMMatrixInit_like Js.undefined -> dOMMatrix = "multiplySelf" [@@bs.send] 
    external preMultiplySelf : dOMMatrix:(_) dOMMatrix_like -> ?other:(_) dOMMatrixInit_like Js.undefined -> dOMMatrix = "preMultiplySelf" [@@bs.send] 
    external rotateAxisAngleSelf : dOMMatrix:(_) dOMMatrix_like -> ?x:float Js.undefined -> ?y:float Js.undefined -> ?z:float Js.undefined -> ?angle:float Js.undefined -> dOMMatrix = "rotateAxisAngleSelf" [@@bs.send] 
    external rotateFromVectorSelf : dOMMatrix:(_) dOMMatrix_like -> ?x:float Js.undefined -> ?y:float Js.undefined -> dOMMatrix = "rotateFromVectorSelf" [@@bs.send] 
    external rotateSelf : dOMMatrix:(_) dOMMatrix_like -> ?rotX:float Js.undefined -> ?rotY:float Js.undefined -> ?rotZ:float Js.undefined -> dOMMatrix = "rotateSelf" [@@bs.send] 
    external scale3dSelf : dOMMatrix:(_) dOMMatrix_like -> ?scale:float Js.undefined -> ?originX:float Js.undefined -> ?originY:float Js.undefined -> ?originZ:float Js.undefined -> dOMMatrix = "scale3dSelf" [@@bs.send] 
    external scaleSelf : dOMMatrix:(_) dOMMatrix_like -> ?scaleX:float Js.undefined -> ?scaleY:float Js.undefined -> ?scaleZ:float Js.undefined -> ?originX:float Js.undefined -> ?originY:float Js.undefined -> ?originZ:float Js.undefined -> dOMMatrix = "scaleSelf" [@@bs.send] 
    external skewXSelf : dOMMatrix:(_) dOMMatrix_like -> ?sx:float Js.undefined -> dOMMatrix = "skewXSelf" [@@bs.send] 
    external skewYSelf : dOMMatrix:(_) dOMMatrix_like -> ?sy:float Js.undefined -> dOMMatrix = "skewYSelf" [@@bs.send] 
    external translateSelf : dOMMatrix:(_) dOMMatrix_like -> ?tx:float Js.undefined -> ?ty:float Js.undefined -> ?tz:float Js.undefined -> dOMMatrix = "translateSelf" [@@bs.send] 
    
    let fromMatrix ~dOMMatrix ?other () =
      let conv_other = Js_undefined.from_opt in
      let other = conv_other other in
      fromMatrix ~dOMMatrix ~other
    
    let multiplySelf ~dOMMatrix ?other () =
      let conv_other = Js_undefined.from_opt in
      let other = conv_other other in
      multiplySelf ~dOMMatrix ~other
    
    let preMultiplySelf ~dOMMatrix ?other () =
      let conv_other = Js_undefined.from_opt in
      let other = conv_other other in
      preMultiplySelf ~dOMMatrix ~other
    
    let rotateAxisAngleSelf ~dOMMatrix ?x ?y ?z ?angle () =
      let conv_x = Js_undefined.from_opt in
      let x = conv_x x in
      let conv_y = Js_undefined.from_opt in
      let y = conv_y y in
      let conv_z = Js_undefined.from_opt in
      let z = conv_z z in
      let conv_angle = Js_undefined.from_opt in
      let angle = conv_angle angle in
      rotateAxisAngleSelf ~dOMMatrix ~x ~y ~z ~angle
    
    let rotateFromVectorSelf ~dOMMatrix ?x ?y () =
      let conv_x = Js_undefined.from_opt in
      let x = conv_x x in
      let conv_y = Js_undefined.from_opt in
      let y = conv_y y in
      rotateFromVectorSelf ~dOMMatrix ~x ~y
    
    let rotateSelf ~dOMMatrix ?rotX ?rotY ?rotZ () =
      let conv_rotX = Js_undefined.from_opt in
      let rotX = conv_rotX rotX in
      let conv_rotY = Js_undefined.from_opt in
      let rotY = conv_rotY rotY in
      let conv_rotZ = Js_undefined.from_opt in
      let rotZ = conv_rotZ rotZ in
      rotateSelf ~dOMMatrix ~rotX ~rotY ~rotZ
    
    let scale3dSelf ~dOMMatrix ?scale ?originX ?originY ?originZ () =
      let conv_scale = Js_undefined.from_opt in
      let scale = conv_scale scale in
      let conv_originX = Js_undefined.from_opt in
      let originX = conv_originX originX in
      let conv_originY = Js_undefined.from_opt in
      let originY = conv_originY originY in
      let conv_originZ = Js_undefined.from_opt in
      let originZ = conv_originZ originZ in
      scale3dSelf ~dOMMatrix ~scale ~originX ~originY ~originZ
    
    let scaleSelf ~dOMMatrix ?scaleX ?scaleY ?scaleZ ?originX ?originY ?originZ () =
      let conv_scaleX = Js_undefined.from_opt in
      let scaleX = conv_scaleX scaleX in
      let conv_scaleY = Js_undefined.from_opt in
      let scaleY = conv_scaleY scaleY in
      let conv_scaleZ = Js_undefined.from_opt in
      let scaleZ = conv_scaleZ scaleZ in
      let conv_originX = Js_undefined.from_opt in
      let originX = conv_originX originX in
      let conv_originY = Js_undefined.from_opt in
      let originY = conv_originY originY in
      let conv_originZ = Js_undefined.from_opt in
      let originZ = conv_originZ originZ in
      scaleSelf ~dOMMatrix ~scaleX ~scaleY ~scaleZ ~originX ~originY ~originZ
    
    let skewXSelf ~dOMMatrix ?sx () =
      let conv_sx = Js_undefined.from_opt in
      let sx = conv_sx sx in
      skewXSelf ~dOMMatrix ~sx
    
    let skewYSelf ~dOMMatrix ?sy () =
      let conv_sy = Js_undefined.from_opt in
      let sy = conv_sy sy in
      skewYSelf ~dOMMatrix ~sy
    
    let translateSelf ~dOMMatrix ?tx ?ty ?tz () =
      let conv_tx = Js_undefined.from_opt in
      let tx = conv_tx tx in
      let conv_ty = Js_undefined.from_opt in
      let ty = conv_ty ty in
      let conv_tz = Js_undefined.from_opt in
      let tz = conv_tz tz in
      translateSelf ~dOMMatrix ~tx ~ty ~tz
    
end
 module WebGLFramebuffer = struct
    include WebGLObject
    
    
    
    
end
 module ServiceWorkerRegistration = struct
    include EventTarget
    
    external installing : serviceWorkerRegistration:(_) serviceWorkerRegistration_like -> serviceWorker option = "installing" [@@bs.get] [@@bs.return null_to_opt]
    external waiting : serviceWorkerRegistration:(_) serviceWorkerRegistration_like -> serviceWorker option = "waiting" [@@bs.get] [@@bs.return null_to_opt]
    external active : serviceWorkerRegistration:(_) serviceWorkerRegistration_like -> serviceWorker option = "active" [@@bs.get] [@@bs.return null_to_opt]
    external scope : serviceWorkerRegistration:(_) serviceWorkerRegistration_like -> string = "scope" [@@bs.get] 
    
    
end
 module ServiceWorkerContainer = struct
    include EventTarget
    
    external controller : serviceWorkerContainer:(_) serviceWorkerContainer_like -> serviceWorker option = "controller" [@@bs.get] [@@bs.return null_to_opt]
    external register : serviceWorkerContainer:(_) serviceWorkerContainer_like -> scriptURL:string -> ?options:(_) registrationOptions_like Js.undefined -> serviceWorkerRegistration Js.Promise.t = "register" [@@bs.send] 
    
    let register ~serviceWorkerContainer ~scriptURL ?options () =
      let conv_options = Js_undefined.from_opt in
      let options = conv_options options in
      register ~serviceWorkerContainer ~scriptURL ~options
    
end
 module ErrorEvent = struct
    include Event
    
    external message : errorEvent:(_) errorEvent_like -> string = "message" [@@bs.get] 
    external filename : errorEvent:(_) errorEvent_like -> string = "filename" [@@bs.get] 
    external lineno : errorEvent:(_) errorEvent_like -> int = "lineno" [@@bs.get] 
    external colno : errorEvent:(_) errorEvent_like -> int = "colno" [@@bs.get] 
    external error : errorEvent:(_) errorEvent_like -> 'a484 = "error" [@@bs.get] 
    
    
end
 module PermissionStatus = struct
    include EventTarget
    
    external state : permissionStatus:(_) permissionStatus_like -> string = "state" [@@bs.get] 
    external onchange : permissionStatus:(_) permissionStatus_like -> (event -> 'a485 [@bs]) option = "onchange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnchange : permissionStatus:(_) permissionStatus_like -> onchange:(event -> 'a486 [@bs]) Js.null -> unit = "onchange" [@@bs.set]
    
    
end
 module MessageEvent = struct
    include Event
    
    external data : messageEvent:(_) messageEvent_like -> 'a487 = "data" [@@bs.get] 
    external origin : messageEvent:(_) messageEvent_like -> string = "origin" [@@bs.get] 
    external lastEventId : messageEvent:(_) messageEvent_like -> string = "lastEventId" [@@bs.get] 
    
    
end
 module BeforeUnloadEvent = struct
    include Event
    
    external returnValue : beforeUnloadEvent:(_) beforeUnloadEvent_like -> string = "returnValue" [@@bs.get] 
    external setReturnValue : beforeUnloadEvent:(_) beforeUnloadEvent_like -> returnValue:string -> unit = "returnValue" [@@bs.set]
    
    
end
 module VR = struct
    include EventTarget
    
    external getDisplays : vR:(_) vR_like -> vRDisplay array Js.Promise.t = "getDisplays" [@@bs.send] 
    
    
end
 module DOMRect = struct
    include DOMRectReadOnly
    
    external x : dOMRect:(_) dOMRect_like -> float = "x" [@@bs.get] 
    external setX : dOMRect:(_) dOMRect_like -> x:float -> unit = "x" [@@bs.set]
    external y : dOMRect:(_) dOMRect_like -> float = "y" [@@bs.get] 
    external setY : dOMRect:(_) dOMRect_like -> y:float -> unit = "y" [@@bs.set]
    external width : dOMRect:(_) dOMRect_like -> float = "width" [@@bs.get] 
    external setWidth : dOMRect:(_) dOMRect_like -> width:float -> unit = "width" [@@bs.set]
    external height : dOMRect:(_) dOMRect_like -> float = "height" [@@bs.get] 
    external setHeight : dOMRect:(_) dOMRect_like -> height:float -> unit = "height" [@@bs.set]
    
    
end
 module BluetoothDevice = struct
    include EventTarget
    
    external ongattserverdisconnected : bluetoothDevice:(_) bluetoothDevice_like -> (event -> 'a488 [@bs]) option = "ongattserverdisconnected" [@@bs.get] [@@bs.return null_to_opt]
    external setOngattserverdisconnected : bluetoothDevice:(_) bluetoothDevice_like -> ongattserverdisconnected:(event -> 'a489 [@bs]) Js.null -> unit = "ongattserverdisconnected" [@@bs.set]
    external id : bluetoothDevice:(_) bluetoothDevice_like -> string = "id" [@@bs.get] 
    external name : bluetoothDevice:(_) bluetoothDevice_like -> string option = "name" [@@bs.get] [@@bs.return null_to_opt]
    external gatt : bluetoothDevice:(_) bluetoothDevice_like -> bluetoothRemoteGATTServer option = "gatt" [@@bs.get] [@@bs.return null_to_opt]
    external watchingAdvertisements : bluetoothDevice:(_) bluetoothDevice_like -> bool = "watchingAdvertisements" [@@bs.get] 
    external unwatchAdvertisements : bluetoothDevice:(_) bluetoothDevice_like -> unit = "unwatchAdvertisements" [@@bs.send] 
    external watchAdvertisements : bluetoothDevice:(_) bluetoothDevice_like -> unit Js.Promise.t = "watchAdvertisements" [@@bs.send] 
    
    
end
 module CSSImportRule = struct
    include CSSRule
    
    
    
    
end
 module RadioNodeList = struct
    include NodeList
    
    external value : radioNodeList:(_) radioNodeList_like -> string = "value" [@@bs.get] 
    external setValue : radioNodeList:(_) radioNodeList_like -> value:string -> unit = "value" [@@bs.set]
    
    
end
 module File = struct
    include Blob
    
    external name : file:(_) file_like -> string = "name" [@@bs.get] 
    external lastModified : file:(_) file_like -> int = "lastModified" [@@bs.get] 
    
    
end
 module StorageEvent = struct
    include Event
    
    external key : storageEvent:(_) storageEvent_like -> string option = "key" [@@bs.get] [@@bs.return null_to_opt]
    external oldValue : storageEvent:(_) storageEvent_like -> string option = "oldValue" [@@bs.get] [@@bs.return null_to_opt]
    external newValue : storageEvent:(_) storageEvent_like -> string option = "newValue" [@@bs.get] [@@bs.return null_to_opt]
    external url : storageEvent:(_) storageEvent_like -> string = "url" [@@bs.get] 
    external storageArea : storageEvent:(_) storageEvent_like -> storage option = "storageArea" [@@bs.get] [@@bs.return null_to_opt]
    
    
end
 module Node = struct
    include EventTarget
    
    external nodeType : node:(_) node_like -> int = "nodeType" [@@bs.get] 
    external nodeName : node:(_) node_like -> string = "nodeName" [@@bs.get] 
    external baseURI : node:(_) node_like -> string = "baseURI" [@@bs.get] 
    external ownerDocument : node:(_) node_like -> document option = "ownerDocument" [@@bs.get] [@@bs.return null_to_opt]
    external parentNode : node:(_) node_like -> node option = "parentNode" [@@bs.get] [@@bs.return null_to_opt]
    external parentElement : node:(_) node_like -> element option = "parentElement" [@@bs.get] [@@bs.return null_to_opt]
    external childNodes : node:(_) node_like -> nodeList = "childNodes" [@@bs.get] 
    external firstChild : node:(_) node_like -> node option = "firstChild" [@@bs.get] [@@bs.return null_to_opt]
    external lastChild : node:(_) node_like -> node option = "lastChild" [@@bs.get] [@@bs.return null_to_opt]
    external previousSibling : node:(_) node_like -> node option = "previousSibling" [@@bs.get] [@@bs.return null_to_opt]
    external nextSibling : node:(_) node_like -> node option = "nextSibling" [@@bs.get] [@@bs.return null_to_opt]
    external nodeValue : node:(_) node_like -> string option = "nodeValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNodeValue : node:(_) node_like -> nodeValue:string Js.null -> unit = "nodeValue" [@@bs.set]
    external textContent : node:(_) node_like -> string option = "textContent" [@@bs.get] [@@bs.return null_to_opt]
    external setTextContent : node:(_) node_like -> textContent:string Js.null -> unit = "textContent" [@@bs.set]
    external appendChild : node:(_) node_like -> node:(_) node_like -> node = "appendChild" [@@bs.send] 
    external cloneNode : node:(_) node_like -> ?deep:Js.boolean Js.undefined -> node = "cloneNode" [@@bs.send] 
    external compareDocumentPosition : node:(_) node_like -> other:(_) node_like -> int = "compareDocumentPosition" [@@bs.send] 
    external contains : node:(_) node_like -> other:(_) node_like Js.null -> bool = "contains" [@@bs.send] 
    external getRootNode : node:(_) node_like -> node = "getRootNode" [@@bs.send] 
    external hasChildNodes : node:(_) node_like -> bool = "hasChildNodes" [@@bs.send] 
    external insertBefore : node:(_) node_like -> node:(_) node_like -> child:(_) node_like Js.null -> node = "insertBefore" [@@bs.send] 
    external isDefaultNamespace : node:(_) node_like -> namespace:string Js.null -> bool = "isDefaultNamespace" [@@bs.send] 
    external isEqualNode : node:(_) node_like -> node:(_) node_like Js.null -> bool = "isEqualNode" [@@bs.send] 
    external isSameNode : node:(_) node_like -> otherNode:(_) node_like Js.null -> bool = "isSameNode" [@@bs.send] 
    external lookupNamespaceURI : node:(_) node_like -> prefix:string Js.null -> string option = "lookupNamespaceURI" [@@bs.send] [@@bs.return null_to_opt]
    external lookupPrefix : node:(_) node_like -> namespace:string Js.null -> string option = "lookupPrefix" [@@bs.send] [@@bs.return null_to_opt]
    external normalize : node:(_) node_like -> unit = "normalize" [@@bs.send] 
    external removeChild : node:(_) node_like -> child:(_) node_like -> node = "removeChild" [@@bs.send] 
    external replaceChild : node:(_) node_like -> node:(_) node_like -> child:(_) node_like -> node = "replaceChild" [@@bs.send] 
    
    let element_node  =
      
      1
    
    let attribute_node  =
      
      2
    
    let text_node  =
      
      3
    
    let cdata_section_node  =
      
      4
    
    let entity_reference_node  =
      
      5
    
    let entity_node  =
      
      6
    
    let processing_instruction_node  =
      
      7
    
    let comment_node  =
      
      8
    
    let document_node  =
      
      9
    
    let document_type_node  =
      
      10
    
    let document_fragment_node  =
      
      11
    
    let notation_node  =
      
      12
    
    let document_position_disconnected  =
      
      1
    
    let document_position_preceding  =
      
      2
    
    let document_position_following  =
      
      4
    
    let document_position_contains  =
      
      8
    
    let document_position_contained_by  =
      
      16
    
    let document_position_implementation_specific  =
      
      32
    
    let cloneNode ~node ?deep () =
      let conv_deep = Js_undefined.from_opt in
      let deep = conv_deep deep in
      cloneNode ~node ~deep
    
end
 module VRDisplayEvent = struct
    include Event
    
    external display : vRDisplayEvent:(_) vRDisplayEvent_like -> vRDisplay = "display" [@@bs.get] 
    external reason : vRDisplayEvent:(_) vRDisplayEvent_like -> string option = "reason" [@@bs.get] [@@bs.return null_to_opt]
    
    
end
 module PopStateEvent = struct
    include Event
    
    external state : popStateEvent:(_) popStateEvent_like -> 'a490 = "state" [@@bs.get] 
    
    
end
 module VRDisplay = struct
    include EventTarget
    
    external isConnected : vRDisplay:(_) vRDisplay_like -> bool = "isConnected" [@@bs.get] 
    external isPresenting : vRDisplay:(_) vRDisplay_like -> bool = "isPresenting" [@@bs.get] 
    external capabilities : vRDisplay:(_) vRDisplay_like -> vRDisplayCapabilities = "capabilities" [@@bs.get] 
    external stageParameters : vRDisplay:(_) vRDisplay_like -> vRStageParameters option = "stageParameters" [@@bs.get] [@@bs.return null_to_opt]
    external displayId : vRDisplay:(_) vRDisplay_like -> int = "displayId" [@@bs.get] 
    external displayName : vRDisplay:(_) vRDisplay_like -> string = "displayName" [@@bs.get] 
    external depthNear : vRDisplay:(_) vRDisplay_like -> float = "depthNear" [@@bs.get] 
    external setDepthNear : vRDisplay:(_) vRDisplay_like -> depthNear:float -> unit = "depthNear" [@@bs.set]
    external depthFar : vRDisplay:(_) vRDisplay_like -> float = "depthFar" [@@bs.get] 
    external setDepthFar : vRDisplay:(_) vRDisplay_like -> depthFar:float -> unit = "depthFar" [@@bs.set]
    external cancelAnimationFrame : vRDisplay:(_) vRDisplay_like -> handle:int -> unit = "cancelAnimationFrame" [@@bs.send] 
    external exitPresent : vRDisplay:(_) vRDisplay_like -> unit Js.Promise.t = "exitPresent" [@@bs.send] 
    external getEyeParameters : vRDisplay:(_) vRDisplay_like -> whichEye:string -> vREyeParameters = "getEyeParameters" [@@bs.send] 
    external getFrameData : vRDisplay:(_) vRDisplay_like -> frameData:(_) vRFrameData_like -> bool = "getFrameData" [@@bs.send] 
    external getPose : vRDisplay:(_) vRDisplay_like -> vRPose = "getPose" [@@bs.send] 
    external requestAnimationFrame : vRDisplay:(_) vRDisplay_like -> callback:(float -> unit [@bs]) -> int = "requestAnimationFrame" [@@bs.send] 
    external requestPresent : vRDisplay:(_) vRDisplay_like -> layers:(_) vRLayer_like array -> unit Js.Promise.t = "requestPresent" [@@bs.send] 
    external resetPose : vRDisplay:(_) vRDisplay_like -> unit = "resetPose" [@@bs.send] 
    external submitFrame : vRDisplay:(_) vRDisplay_like -> unit = "submitFrame" [@@bs.send] 
    
    let getEyeParameters ~vRDisplay ~whichEye =
      let conv_whichEye = function
        | `left -> "left"
        | `right -> "right"
         in
      let whichEye = conv_whichEye whichEye in
      let return = getEyeParameters ~vRDisplay ~whichEye in
      return
    
end
 module WebGLContextEvent = struct
    include Event
    
    external statusMessage : webGLContextEvent:(_) webGLContextEvent_like -> string = "statusMessage" [@@bs.get] 
    
    
end
 module WebGLProgram = struct
    include WebGLObject
    
    
    
    
end
 module BluetoothRemoteGATTCharacteristic = struct
    include EventTarget
    
    external oncharacteristicvaluechanged : bluetoothRemoteGATTCharacteristic:(_) bluetoothRemoteGATTCharacteristic_like -> (event -> 'a491 [@bs]) option = "oncharacteristicvaluechanged" [@@bs.get] [@@bs.return null_to_opt]
    external setOncharacteristicvaluechanged : bluetoothRemoteGATTCharacteristic:(_) bluetoothRemoteGATTCharacteristic_like -> oncharacteristicvaluechanged:(event -> 'a492 [@bs]) Js.null -> unit = "oncharacteristicvaluechanged" [@@bs.set]
    external service : bluetoothRemoteGATTCharacteristic:(_) bluetoothRemoteGATTCharacteristic_like -> bluetoothRemoteGATTService = "service" [@@bs.get] 
    external uuid : bluetoothRemoteGATTCharacteristic:(_) bluetoothRemoteGATTCharacteristic_like -> string = "uuid" [@@bs.get] 
    external properties : bluetoothRemoteGATTCharacteristic:(_) bluetoothRemoteGATTCharacteristic_like -> bluetoothCharacteristicProperties = "properties" [@@bs.get] 
    external value : bluetoothRemoteGATTCharacteristic:(_) bluetoothRemoteGATTCharacteristic_like -> string option = "value" [@@bs.get] [@@bs.return null_to_opt]
    external getDescriptor : bluetoothRemoteGATTCharacteristic:(_) bluetoothRemoteGATTCharacteristic_like -> descriptor:'a493 -> bluetoothRemoteGATTDescriptor Js.Promise.t = "getDescriptor" [@@bs.send] 
    external getDescriptors : bluetoothRemoteGATTCharacteristic:(_) bluetoothRemoteGATTCharacteristic_like -> ?descriptor:'a494 Js.undefined -> bluetoothRemoteGATTDescriptor array Js.Promise.t = "getDescriptors" [@@bs.send] 
    external readValue : bluetoothRemoteGATTCharacteristic:(_) bluetoothRemoteGATTCharacteristic_like -> string Js.Promise.t = "readValue" [@@bs.send] 
    external startNotifications : bluetoothRemoteGATTCharacteristic:(_) bluetoothRemoteGATTCharacteristic_like -> bluetoothRemoteGATTCharacteristic Js.Promise.t = "startNotifications" [@@bs.send] 
    external stopNotifications : bluetoothRemoteGATTCharacteristic:(_) bluetoothRemoteGATTCharacteristic_like -> bluetoothRemoteGATTCharacteristic Js.Promise.t = "stopNotifications" [@@bs.send] 
    external writeValue : bluetoothRemoteGATTCharacteristic:(_) bluetoothRemoteGATTCharacteristic_like -> value:int array -> unit Js.Promise.t = "writeValue" [@@bs.send] 
    
    let getDescriptor ~bluetoothRemoteGATTCharacteristic ~descriptor =
      let conv_descriptor = function
        | `String (x: string) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let descriptor = conv_descriptor descriptor in
      let return = getDescriptor ~bluetoothRemoteGATTCharacteristic ~descriptor in
      return
    
    let getDescriptors ~bluetoothRemoteGATTCharacteristic ~descriptor =
      let conv_descriptor = function
        | `String (x: string) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let conv_descriptor = access_undef conv_descriptor in
      let descriptor = conv_descriptor descriptor in
      let return = getDescriptors ~bluetoothRemoteGATTCharacteristic ~descriptor in
      return
    
    let getDescriptors ~bluetoothRemoteGATTCharacteristic ?descriptor () =
      let conv_descriptor = Js_undefined.from_opt in
      let descriptor = conv_descriptor descriptor in
      getDescriptors ~bluetoothRemoteGATTCharacteristic ~descriptor
    
end
 module CSSKeyframeRule = struct
    include CSSRule
    
    external style : cSSKeyframeRule:(_) cSSKeyframeRule_like -> cSSStyleDeclaration = "style" [@@bs.get] 
    
    
end
 module WebGLVertexArrayObjectOES = struct
    include WebGLObject
    
    
    
    
end
 module WebGLShader = struct
    include WebGLObject
    
    
    
    
end
 module GlobalScope = struct
    include EventTarget
    
    
    
    
end
 module TestBindingProxy = struct
    include TestBinding
    
    external length : testBindingProxy:(_) testBindingProxy_like -> int = "length" [@@bs.get] 
    external getItem : testBindingProxy:(_) testBindingProxy_like -> index:int -> string = "getItem" [@@bs.send] 
    external getNamedItem : testBindingProxy:(_) testBindingProxy_like -> item_name:string -> string = "getNamedItem" [@@bs.send] 
    external removeItem : testBindingProxy:(_) testBindingProxy_like -> name:string -> unit = "removeItem" [@@bs.send] 
    external setItem : testBindingProxy:(_) testBindingProxy_like -> index:int -> value:string -> unit = "setItem" [@@bs.send] 
    external setNamedItem : testBindingProxy:(_) testBindingProxy_like -> item_name:string -> value:string -> unit = "setNamedItem" [@@bs.send] 
    external toString : testBindingProxy:(_) testBindingProxy_like -> string = "toString" [@@bs.send] 
    
    
end
 module HTMLFormControlsCollection = struct
    include HTMLCollection
    
    external namedItem : hTMLFormControlsCollection:(_) hTMLFormControlsCollection_like -> name:string -> 'a495 = "namedItem" [@@bs.send] 
    
    
end
 module CustomEvent = struct
    include Event
    
    external detail : customEvent:(_) customEvent_like -> 'a496 = "detail" [@@bs.get] 
    external initCustomEvent : customEvent:(_) customEvent_like -> type_:string -> bubbles:Js.boolean -> cancelable:Js.boolean -> detail:'a497 -> unit = "initCustomEvent" [@@bs.send] 
    
    
end
 module DOMPoint = struct
    include DOMPointReadOnly
    
    external x : dOMPoint:(_) dOMPoint_like -> float = "x" [@@bs.get] 
    external setX : dOMPoint:(_) dOMPoint_like -> x:float -> unit = "x" [@@bs.set]
    external y : dOMPoint:(_) dOMPoint_like -> float = "y" [@@bs.get] 
    external setY : dOMPoint:(_) dOMPoint_like -> y:float -> unit = "y" [@@bs.set]
    external z : dOMPoint:(_) dOMPoint_like -> float = "z" [@@bs.get] 
    external setZ : dOMPoint:(_) dOMPoint_like -> z:float -> unit = "z" [@@bs.set]
    external w : dOMPoint:(_) dOMPoint_like -> float = "w" [@@bs.get] 
    external setW : dOMPoint:(_) dOMPoint_like -> w:float -> unit = "w" [@@bs.set]
    
    
end
 module PageTransitionEvent = struct
    include Event
    
    external persisted : pageTransitionEvent:(_) pageTransitionEvent_like -> bool = "persisted" [@@bs.get] 
    
    
end
 module ServiceWorker = struct
    include EventTarget
    
    external onerror : serviceWorker:(_) serviceWorker_like -> (event -> 'a498 [@bs]) option = "onerror" [@@bs.get] [@@bs.return null_to_opt]
    external setOnerror : serviceWorker:(_) serviceWorker_like -> onerror:(event -> 'a499 [@bs]) Js.null -> unit = "onerror" [@@bs.set]
    external scriptURL : serviceWorker:(_) serviceWorker_like -> string = "scriptURL" [@@bs.get] 
    external state : serviceWorker:(_) serviceWorker_like -> string = "state" [@@bs.get] 
    external onstatechange : serviceWorker:(_) serviceWorker_like -> (event -> 'a500 [@bs]) option = "onstatechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnstatechange : serviceWorker:(_) serviceWorker_like -> onstatechange:(event -> 'a501 [@bs]) Js.null -> unit = "onstatechange" [@@bs.set]
    external postMessage : serviceWorker:(_) serviceWorker_like -> message:'a502 -> unit = "postMessage" [@@bs.send] 
    
    
end
 module CloseEvent = struct
    include Event
    
    external wasClean : closeEvent:(_) closeEvent_like -> bool = "wasClean" [@@bs.get] 
    external code : closeEvent:(_) closeEvent_like -> int = "code" [@@bs.get] 
    external reason : closeEvent:(_) closeEvent_like -> string = "reason" [@@bs.get] 
    
    
end
 module WebSocket = struct
    include EventTarget
    
    external url : webSocket:(_) webSocket_like -> string = "url" [@@bs.get] 
    external readyState : webSocket:(_) webSocket_like -> int = "readyState" [@@bs.get] 
    external bufferedAmount : webSocket:(_) webSocket_like -> int = "bufferedAmount" [@@bs.get] 
    external onopen : webSocket:(_) webSocket_like -> (event -> 'a503 [@bs]) option = "onopen" [@@bs.get] [@@bs.return null_to_opt]
    external setOnopen : webSocket:(_) webSocket_like -> onopen:(event -> 'a504 [@bs]) Js.null -> unit = "onopen" [@@bs.set]
    external onerror : webSocket:(_) webSocket_like -> (event -> 'a505 [@bs]) option = "onerror" [@@bs.get] [@@bs.return null_to_opt]
    external setOnerror : webSocket:(_) webSocket_like -> onerror:(event -> 'a506 [@bs]) Js.null -> unit = "onerror" [@@bs.set]
    external onclose : webSocket:(_) webSocket_like -> (event -> 'a507 [@bs]) option = "onclose" [@@bs.get] [@@bs.return null_to_opt]
    external setOnclose : webSocket:(_) webSocket_like -> onclose:(event -> 'a508 [@bs]) Js.null -> unit = "onclose" [@@bs.set]
    external protocol : webSocket:(_) webSocket_like -> string = "protocol" [@@bs.get] 
    external onmessage : webSocket:(_) webSocket_like -> (event -> 'a509 [@bs]) option = "onmessage" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmessage : webSocket:(_) webSocket_like -> onmessage:(event -> 'a510 [@bs]) Js.null -> unit = "onmessage" [@@bs.set]
    external binaryType : webSocket:(_) webSocket_like -> string = "binaryType" [@@bs.get] 
    external setBinaryType : webSocket:(_) webSocket_like -> binaryType:string -> unit = "binaryType" [@@bs.set]
    external close : webSocket:(_) webSocket_like -> ?code:int Js.undefined -> ?reason:string Js.undefined -> unit = "close" [@@bs.send] 
    external send : webSocket:(_) webSocket_like -> data:'a511 -> unit = "send" [@@bs.send] 
    
    let connecting  =
      
      0
    
    let open_  =
      
      1
    
    let closing  =
      
      2
    
    let closed_  =
      
      3
    
    let close ~webSocket ?code ?reason () =
      let conv_code = Js_undefined.from_opt in
      let code = conv_code code in
      let conv_reason = Js_undefined.from_opt in
      let reason = conv_reason reason in
      close ~webSocket ~code ~reason
    
    let send ~webSocket ~data =
      let conv_data = function
        | `String (x: string) -> Obj.magic x
        | `Blob (x: (_) blob_like) -> Obj.magic x
         in
      let data = conv_data data in
      let return = send ~webSocket ~data in
      return
    
end
 module MediaQueryListEvent = struct
    include Event
    
    external media : mediaQueryListEvent:(_) mediaQueryListEvent_like -> string = "media" [@@bs.get] 
    external matches : mediaQueryListEvent:(_) mediaQueryListEvent_like -> bool = "matches" [@@bs.get] 
    
    
end
 module WebGLBuffer = struct
    include WebGLObject
    
    
    
    
end
 module CSSViewportRule = struct
    include CSSRule
    
    
    
    
end
 module ExtendableEvent = struct
    include Event
    
    external waitUntil : extendableEvent:(_) extendableEvent_like -> f:'a512 -> unit = "waitUntil" [@@bs.send] 
    
    
end
 module ProgressEvent = struct
    include Event
    
    external lengthComputable : progressEvent:(_) progressEvent_like -> bool = "lengthComputable" [@@bs.get] 
    external loaded : progressEvent:(_) progressEvent_like -> int = "loaded" [@@bs.get] 
    external total : progressEvent:(_) progressEvent_like -> int = "total" [@@bs.get] 
    
    
end
 module WebGLRenderbuffer = struct
    include WebGLObject
    
    
    
    
end
 module Bluetooth = struct
    include EventTarget
    
    external onavailabilitychanged : bluetooth:(_) bluetooth_like -> (event -> 'a513 [@bs]) option = "onavailabilitychanged" [@@bs.get] [@@bs.return null_to_opt]
    external setOnavailabilitychanged : bluetooth:(_) bluetooth_like -> onavailabilitychanged:(event -> 'a514 [@bs]) Js.null -> unit = "onavailabilitychanged" [@@bs.set]
    external getAvailability : bluetooth:(_) bluetooth_like -> Js.boolean Js.Promise.t = "getAvailability" [@@bs.send] 
    external requestDevice : bluetooth:(_) bluetooth_like -> ?options:(_) requestDeviceOptions_like Js.undefined -> bluetoothDevice Js.Promise.t = "requestDevice" [@@bs.send] 
    
    let requestDevice ~bluetooth ?options () =
      let conv_options = Js_undefined.from_opt in
      let options = conv_options options in
      requestDevice ~bluetooth ~options
    
end
 module Worker = struct
    include EventTarget
    
    external onerror : worker:(_) worker_like -> (event -> 'a515 [@bs]) option = "onerror" [@@bs.get] [@@bs.return null_to_opt]
    external setOnerror : worker:(_) worker_like -> onerror:(event -> 'a516 [@bs]) Js.null -> unit = "onerror" [@@bs.set]
    external onmessage : worker:(_) worker_like -> (event -> 'a517 [@bs]) option = "onmessage" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmessage : worker:(_) worker_like -> onmessage:(event -> 'a518 [@bs]) Js.null -> unit = "onmessage" [@@bs.set]
    external postMessage : worker:(_) worker_like -> message:'a519 -> unit = "postMessage" [@@bs.send] 
    external terminate : worker:(_) worker_like -> unit = "terminate" [@@bs.send] 
    
    
end
 module TransitionEvent = struct
    include Event
    
    external propertyName : transitionEvent:(_) transitionEvent_like -> string = "propertyName" [@@bs.get] 
    external elapsedTime : transitionEvent:(_) transitionEvent_like -> float = "elapsedTime" [@@bs.get] 
    external pseudoElement : transitionEvent:(_) transitionEvent_like -> string = "pseudoElement" [@@bs.get] 
    
    
end
 module MediaQueryList = struct
    include EventTarget
    
    external media : mediaQueryList:(_) mediaQueryList_like -> string = "media" [@@bs.get] 
    external matches : mediaQueryList:(_) mediaQueryList_like -> bool = "matches" [@@bs.get] 
    external onchange : mediaQueryList:(_) mediaQueryList_like -> (event -> 'a520 [@bs]) option = "onchange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnchange : mediaQueryList:(_) mediaQueryList_like -> onchange:(event -> 'a521 [@bs]) Js.null -> unit = "onchange" [@@bs.set]
    external addListener : mediaQueryList:(_) mediaQueryList_like -> listener:(_) eventListener_like Js.null -> unit = "addListener" [@@bs.send] 
    external removeListener : mediaQueryList:(_) mediaQueryList_like -> listener:(_) eventListener_like Js.null -> unit = "removeListener" [@@bs.send] 
    
    
end
 module XMLHttpRequestEventTarget = struct
    include EventTarget
    
    external onloadstart : xMLHttpRequestEventTarget:(_) xMLHttpRequestEventTarget_like -> (event -> 'a522 [@bs]) option = "onloadstart" [@@bs.get] [@@bs.return null_to_opt]
    external setOnloadstart : xMLHttpRequestEventTarget:(_) xMLHttpRequestEventTarget_like -> onloadstart:(event -> 'a523 [@bs]) Js.null -> unit = "onloadstart" [@@bs.set]
    external onprogress : xMLHttpRequestEventTarget:(_) xMLHttpRequestEventTarget_like -> (event -> 'a524 [@bs]) option = "onprogress" [@@bs.get] [@@bs.return null_to_opt]
    external setOnprogress : xMLHttpRequestEventTarget:(_) xMLHttpRequestEventTarget_like -> onprogress:(event -> 'a525 [@bs]) Js.null -> unit = "onprogress" [@@bs.set]
    external onabort : xMLHttpRequestEventTarget:(_) xMLHttpRequestEventTarget_like -> (event -> 'a526 [@bs]) option = "onabort" [@@bs.get] [@@bs.return null_to_opt]
    external setOnabort : xMLHttpRequestEventTarget:(_) xMLHttpRequestEventTarget_like -> onabort:(event -> 'a527 [@bs]) Js.null -> unit = "onabort" [@@bs.set]
    external onerror : xMLHttpRequestEventTarget:(_) xMLHttpRequestEventTarget_like -> (event -> 'a528 [@bs]) option = "onerror" [@@bs.get] [@@bs.return null_to_opt]
    external setOnerror : xMLHttpRequestEventTarget:(_) xMLHttpRequestEventTarget_like -> onerror:(event -> 'a529 [@bs]) Js.null -> unit = "onerror" [@@bs.set]
    external onload : xMLHttpRequestEventTarget:(_) xMLHttpRequestEventTarget_like -> (event -> 'a530 [@bs]) option = "onload" [@@bs.get] [@@bs.return null_to_opt]
    external setOnload : xMLHttpRequestEventTarget:(_) xMLHttpRequestEventTarget_like -> onload:(event -> 'a531 [@bs]) Js.null -> unit = "onload" [@@bs.set]
    external ontimeout : xMLHttpRequestEventTarget:(_) xMLHttpRequestEventTarget_like -> (event -> 'a532 [@bs]) option = "ontimeout" [@@bs.get] [@@bs.return null_to_opt]
    external setOntimeout : xMLHttpRequestEventTarget:(_) xMLHttpRequestEventTarget_like -> ontimeout:(event -> 'a533 [@bs]) Js.null -> unit = "ontimeout" [@@bs.set]
    external onloadend : xMLHttpRequestEventTarget:(_) xMLHttpRequestEventTarget_like -> (event -> 'a534 [@bs]) option = "onloadend" [@@bs.get] [@@bs.return null_to_opt]
    external setOnloadend : xMLHttpRequestEventTarget:(_) xMLHttpRequestEventTarget_like -> onloadend:(event -> 'a535 [@bs]) Js.null -> unit = "onloadend" [@@bs.set]
    
    
end
 module CSSKeyframesRule = struct
    include CSSRule
    
    external name : cSSKeyframesRule:(_) cSSKeyframesRule_like -> string = "name" [@@bs.get] 
    external setName : cSSKeyframesRule:(_) cSSKeyframesRule_like -> name:string -> unit = "name" [@@bs.set]
    external cssRules : cSSKeyframesRule:(_) cSSKeyframesRule_like -> cSSRuleList = "cssRules" [@@bs.get] 
    external appendRule : cSSKeyframesRule:(_) cSSKeyframesRule_like -> rule:string -> unit = "appendRule" [@@bs.send] 
    external deleteRule : cSSKeyframesRule:(_) cSSKeyframesRule_like -> select:string -> unit = "deleteRule" [@@bs.send] 
    external findRule : cSSKeyframesRule:(_) cSSKeyframesRule_like -> select:string -> cSSKeyframeRule option = "findRule" [@@bs.send] [@@bs.return null_to_opt]
    
    
end
 module BluetoothAdvertisingEvent = struct
    include Event
    
    external device : bluetoothAdvertisingEvent:(_) bluetoothAdvertisingEvent_like -> bluetoothDevice = "device" [@@bs.get] 
    external name : bluetoothAdvertisingEvent:(_) bluetoothAdvertisingEvent_like -> string option = "name" [@@bs.get] [@@bs.return null_to_opt]
    external appearance : bluetoothAdvertisingEvent:(_) bluetoothAdvertisingEvent_like -> int option = "appearance" [@@bs.get] [@@bs.return null_to_opt]
    external txPower : bluetoothAdvertisingEvent:(_) bluetoothAdvertisingEvent_like -> int option = "txPower" [@@bs.get] [@@bs.return null_to_opt]
    external rssi : bluetoothAdvertisingEvent:(_) bluetoothAdvertisingEvent_like -> int option = "rssi" [@@bs.get] [@@bs.return null_to_opt]
    
    
end
 module CSSNamespaceRule = struct
    include CSSRule
    
    external namespaceURI : cSSNamespaceRule:(_) cSSNamespaceRule_like -> string = "namespaceURI" [@@bs.get] 
    external prefix : cSSNamespaceRule:(_) cSSNamespaceRule_like -> string = "prefix" [@@bs.get] 
    
    
end
 module HashChangeEvent = struct
    include Event
    
    external oldURL : hashChangeEvent:(_) hashChangeEvent_like -> string = "oldURL" [@@bs.get] 
    external newURL : hashChangeEvent:(_) hashChangeEvent_like -> string = "newURL" [@@bs.get] 
    
    
end
 module CSSGroupingRule = struct
    include CSSRule
    
    external cssRules : cSSGroupingRule:(_) cSSGroupingRule_like -> cSSRuleList = "cssRules" [@@bs.get] 
    external deleteRule : cSSGroupingRule:(_) cSSGroupingRule_like -> index:int -> unit = "deleteRule" [@@bs.send] 
    external insertRule : cSSGroupingRule:(_) cSSGroupingRule_like -> rule:string -> index:int -> int = "insertRule" [@@bs.send] 
    
    
end
 module BluetoothRemoteGATTService = struct
    include EventTarget
    
    external onserviceadded : bluetoothRemoteGATTService:(_) bluetoothRemoteGATTService_like -> (event -> 'a536 [@bs]) option = "onserviceadded" [@@bs.get] [@@bs.return null_to_opt]
    external setOnserviceadded : bluetoothRemoteGATTService:(_) bluetoothRemoteGATTService_like -> onserviceadded:(event -> 'a537 [@bs]) Js.null -> unit = "onserviceadded" [@@bs.set]
    external onservicechanged : bluetoothRemoteGATTService:(_) bluetoothRemoteGATTService_like -> (event -> 'a538 [@bs]) option = "onservicechanged" [@@bs.get] [@@bs.return null_to_opt]
    external setOnservicechanged : bluetoothRemoteGATTService:(_) bluetoothRemoteGATTService_like -> onservicechanged:(event -> 'a539 [@bs]) Js.null -> unit = "onservicechanged" [@@bs.set]
    external onserviceremoved : bluetoothRemoteGATTService:(_) bluetoothRemoteGATTService_like -> (event -> 'a540 [@bs]) option = "onserviceremoved" [@@bs.get] [@@bs.return null_to_opt]
    external setOnserviceremoved : bluetoothRemoteGATTService:(_) bluetoothRemoteGATTService_like -> onserviceremoved:(event -> 'a541 [@bs]) Js.null -> unit = "onserviceremoved" [@@bs.set]
    external device : bluetoothRemoteGATTService:(_) bluetoothRemoteGATTService_like -> bluetoothDevice = "device" [@@bs.get] 
    external uuid : bluetoothRemoteGATTService:(_) bluetoothRemoteGATTService_like -> string = "uuid" [@@bs.get] 
    external isPrimary : bluetoothRemoteGATTService:(_) bluetoothRemoteGATTService_like -> bool = "isPrimary" [@@bs.get] 
    external getCharacteristic : bluetoothRemoteGATTService:(_) bluetoothRemoteGATTService_like -> characteristic:'a542 -> bluetoothRemoteGATTCharacteristic Js.Promise.t = "getCharacteristic" [@@bs.send] 
    external getCharacteristics : bluetoothRemoteGATTService:(_) bluetoothRemoteGATTService_like -> ?characteristic:'a543 Js.undefined -> bluetoothRemoteGATTCharacteristic array Js.Promise.t = "getCharacteristics" [@@bs.send] 
    external getIncludedService : bluetoothRemoteGATTService:(_) bluetoothRemoteGATTService_like -> service:'a544 -> bluetoothRemoteGATTService Js.Promise.t = "getIncludedService" [@@bs.send] 
    external getIncludedServices : bluetoothRemoteGATTService:(_) bluetoothRemoteGATTService_like -> ?service:'a545 Js.undefined -> bluetoothRemoteGATTService array Js.Promise.t = "getIncludedServices" [@@bs.send] 
    
    let getCharacteristic ~bluetoothRemoteGATTService ~characteristic =
      let conv_characteristic = function
        | `String (x: string) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let characteristic = conv_characteristic characteristic in
      let return = getCharacteristic ~bluetoothRemoteGATTService ~characteristic in
      return
    
    let getCharacteristics ~bluetoothRemoteGATTService ~characteristic =
      let conv_characteristic = function
        | `String (x: string) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let conv_characteristic = access_undef conv_characteristic in
      let characteristic = conv_characteristic characteristic in
      let return = getCharacteristics ~bluetoothRemoteGATTService ~characteristic in
      return
    
    let getCharacteristics ~bluetoothRemoteGATTService ?characteristic () =
      let conv_characteristic = Js_undefined.from_opt in
      let characteristic = conv_characteristic characteristic in
      getCharacteristics ~bluetoothRemoteGATTService ~characteristic
    
    let getIncludedService ~bluetoothRemoteGATTService ~service =
      let conv_service = function
        | `String (x: string) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let service = conv_service service in
      let return = getIncludedService ~bluetoothRemoteGATTService ~service in
      return
    
    let getIncludedServices ~bluetoothRemoteGATTService ~service =
      let conv_service = function
        | `String (x: string) -> Obj.magic x
        | `Int (x: int) -> Obj.magic x
         in
      let conv_service = access_undef conv_service in
      let service = conv_service service in
      let return = getIncludedServices ~bluetoothRemoteGATTService ~service in
      return
    
    let getIncludedServices ~bluetoothRemoteGATTService ?service () =
      let conv_service = Js_undefined.from_opt in
      let service = conv_service service in
      getIncludedServices ~bluetoothRemoteGATTService ~service
    
end
 module WebGLTexture = struct
    include WebGLObject
    
    
    
    
end
 module FileReader = struct
    include EventTarget
    
    external readyState : fileReader:(_) fileReader_like -> int = "readyState" [@@bs.get] 
    external result : fileReader:(_) fileReader_like -> 'a546 option = "result" [@@bs.get] [@@bs.return null_to_opt]
    external error : fileReader:(_) fileReader_like -> 'a547 option = "error" [@@bs.get] [@@bs.return null_to_opt]
    external onloadstart : fileReader:(_) fileReader_like -> (event -> 'a548 [@bs]) option = "onloadstart" [@@bs.get] [@@bs.return null_to_opt]
    external setOnloadstart : fileReader:(_) fileReader_like -> onloadstart:(event -> 'a549 [@bs]) Js.null -> unit = "onloadstart" [@@bs.set]
    external onprogress : fileReader:(_) fileReader_like -> (event -> 'a550 [@bs]) option = "onprogress" [@@bs.get] [@@bs.return null_to_opt]
    external setOnprogress : fileReader:(_) fileReader_like -> onprogress:(event -> 'a551 [@bs]) Js.null -> unit = "onprogress" [@@bs.set]
    external onload : fileReader:(_) fileReader_like -> (event -> 'a552 [@bs]) option = "onload" [@@bs.get] [@@bs.return null_to_opt]
    external setOnload : fileReader:(_) fileReader_like -> onload:(event -> 'a553 [@bs]) Js.null -> unit = "onload" [@@bs.set]
    external onabort : fileReader:(_) fileReader_like -> (event -> 'a554 [@bs]) option = "onabort" [@@bs.get] [@@bs.return null_to_opt]
    external setOnabort : fileReader:(_) fileReader_like -> onabort:(event -> 'a555 [@bs]) Js.null -> unit = "onabort" [@@bs.set]
    external onerror : fileReader:(_) fileReader_like -> (event -> 'a556 [@bs]) option = "onerror" [@@bs.get] [@@bs.return null_to_opt]
    external setOnerror : fileReader:(_) fileReader_like -> onerror:(event -> 'a557 [@bs]) Js.null -> unit = "onerror" [@@bs.set]
    external onloadend : fileReader:(_) fileReader_like -> (event -> 'a558 [@bs]) option = "onloadend" [@@bs.get] [@@bs.return null_to_opt]
    external setOnloadend : fileReader:(_) fileReader_like -> onloadend:(event -> 'a559 [@bs]) Js.null -> unit = "onloadend" [@@bs.set]
    external abort : fileReader:(_) fileReader_like -> unit = "abort" [@@bs.send] 
    external readAsArrayBuffer : fileReader:(_) fileReader_like -> blob:(_) blob_like -> unit = "readAsArrayBuffer" [@@bs.send] 
    external readAsDataURL : fileReader:(_) fileReader_like -> blob:(_) blob_like -> unit = "readAsDataURL" [@@bs.send] 
    external readAsText : fileReader:(_) fileReader_like -> blob:(_) blob_like -> ?label:string Js.undefined -> unit = "readAsText" [@@bs.send] 
    
    let empty  =
      
      0
    
    let loading  =
      
      1
    
    let done_  =
      
      2
    
    let readAsText ~fileReader ~blob ?label () =
      let conv_label = Js_undefined.from_opt in
      let label = conv_label label in
      readAsText ~fileReader ~blob ~label
    
end
 module CSSStyleSheet = struct
    include StyleSheet
    
    external cssRules : cSSStyleSheet:(_) cSSStyleSheet_like -> cSSRuleList = "cssRules" [@@bs.get] 
    external deleteRule : cSSStyleSheet:(_) cSSStyleSheet_like -> index:int -> unit = "deleteRule" [@@bs.send] 
    external insertRule : cSSStyleSheet:(_) cSSStyleSheet_like -> rule:string -> index:int -> int = "insertRule" [@@bs.send] 
    
    
end
 module UIEventInit = struct
    include EventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?view:(_) window_like Js.null -> ?detail:int -> unit -> uIEventInit = "" [@@bs.obj]
    external view : uIEventInit:(_) uIEventInit_like -> window option = "view" [@@bs.get] [@@bs.return null_to_opt]
    external setView : uIEventInit:(_) uIEventInit_like -> view:window Js.null -> unit = "view" [@@bs.set]
    external detail : uIEventInit:(_) uIEventInit_like -> int = "detail" [@@bs.get] 
    external setDetail : uIEventInit:(_) uIEventInit_like -> detail:int -> unit = "detail" [@@bs.set]
    
    
end
 module GamepadEventInit = struct
    include EventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> gamepad:(_) gamepad_like -> unit -> gamepadEventInit = "" [@@bs.obj]
    external gamepad : gamepadEventInit:(_) gamepadEventInit_like -> gamepad = "gamepad" [@@bs.get] 
    external setGamepad : gamepadEventInit:(_) gamepadEventInit_like -> gamepad:gamepad -> unit = "gamepad" [@@bs.set]
    
    
end
 module BluetoothPermissionDescriptor = struct
    include PermissionDescriptor
    
    external make : name:string -> ?deviceId:string -> ?filters:(_) bluetoothLEScanFilterInit_like array -> ?optionalServices:'a560 array -> ?acceptAllDevices:Js.boolean -> unit -> bluetoothPermissionDescriptor = "" [@@bs.obj]
    external deviceId : bluetoothPermissionDescriptor:(_) bluetoothPermissionDescriptor_like -> string = "deviceId" [@@bs.get] 
    external setDeviceId : bluetoothPermissionDescriptor:(_) bluetoothPermissionDescriptor_like -> deviceId:string -> unit = "deviceId" [@@bs.set]
    external filters : bluetoothPermissionDescriptor:(_) bluetoothPermissionDescriptor_like -> bluetoothLEScanFilterInit array = "filters" [@@bs.get] 
    external setFilters : bluetoothPermissionDescriptor:(_) bluetoothPermissionDescriptor_like -> filters:bluetoothLEScanFilterInit array -> unit = "filters" [@@bs.set]
    external optionalServices : bluetoothPermissionDescriptor:(_) bluetoothPermissionDescriptor_like -> 'a561 array = "optionalServices" [@@bs.get] 
    external setOptionalServices : bluetoothPermissionDescriptor:(_) bluetoothPermissionDescriptor_like -> optionalServices:'a562 array -> unit = "optionalServices" [@@bs.set]
    external acceptAllDevices : bluetoothPermissionDescriptor:(_) bluetoothPermissionDescriptor_like -> bool = "acceptAllDevices" [@@bs.get] 
    external setAcceptAllDevices : bluetoothPermissionDescriptor:(_) bluetoothPermissionDescriptor_like -> acceptAllDevices:Js.boolean -> unit = "acceptAllDevices" [@@bs.set]
    
    
end
 module ErrorEventInit = struct
    include EventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?message:string -> ?filename:string -> ?lineno:int -> ?colno:int -> ?error:'a563 -> unit -> errorEventInit = "" [@@bs.obj]
    external message : errorEventInit:(_) errorEventInit_like -> string = "message" [@@bs.get] 
    external setMessage : errorEventInit:(_) errorEventInit_like -> message:string -> unit = "message" [@@bs.set]
    external filename : errorEventInit:(_) errorEventInit_like -> string = "filename" [@@bs.get] 
    external setFilename : errorEventInit:(_) errorEventInit_like -> filename:string -> unit = "filename" [@@bs.set]
    external lineno : errorEventInit:(_) errorEventInit_like -> int = "lineno" [@@bs.get] 
    external setLineno : errorEventInit:(_) errorEventInit_like -> lineno:int -> unit = "lineno" [@@bs.set]
    external colno : errorEventInit:(_) errorEventInit_like -> int = "colno" [@@bs.get] 
    external setColno : errorEventInit:(_) errorEventInit_like -> colno:int -> unit = "colno" [@@bs.set]
    external error : errorEventInit:(_) errorEventInit_like -> 'a564 = "error" [@@bs.get] 
    external setError : errorEventInit:(_) errorEventInit_like -> error:'a565 -> unit = "error" [@@bs.set]
    
    
end
 module PushPermissionDescriptor = struct
    include PermissionDescriptor
    
    external make : name:string -> ?userVisibleOnly:Js.boolean -> unit -> pushPermissionDescriptor = "" [@@bs.obj]
    external userVisibleOnly : pushPermissionDescriptor:(_) pushPermissionDescriptor_like -> bool = "userVisibleOnly" [@@bs.get] 
    external setUserVisibleOnly : pushPermissionDescriptor:(_) pushPermissionDescriptor_like -> userVisibleOnly:Js.boolean -> unit = "userVisibleOnly" [@@bs.set]
    
    
end
 module MidiPermissionDescriptor = struct
    include PermissionDescriptor
    
    external make : name:string -> ?sysex:Js.boolean -> unit -> midiPermissionDescriptor = "" [@@bs.obj]
    external sysex : midiPermissionDescriptor:(_) midiPermissionDescriptor_like -> bool = "sysex" [@@bs.get] 
    external setSysex : midiPermissionDescriptor:(_) midiPermissionDescriptor_like -> sysex:Js.boolean -> unit = "sysex" [@@bs.set]
    
    
end
 module DevicePermissionDescriptor = struct
    include PermissionDescriptor
    
    external make : name:string -> ?deviceId:string -> unit -> devicePermissionDescriptor = "" [@@bs.obj]
    external deviceId : devicePermissionDescriptor:(_) devicePermissionDescriptor_like -> string = "deviceId" [@@bs.get] 
    external setDeviceId : devicePermissionDescriptor:(_) devicePermissionDescriptor_like -> deviceId:string -> unit = "deviceId" [@@bs.set]
    
    
end
 module MessageEventInit = struct
    include EventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?data:'a566 -> ?origin:string -> ?lastEventId:string -> unit -> messageEventInit = "" [@@bs.obj]
    external data : messageEventInit:(_) messageEventInit_like -> 'a567 = "data" [@@bs.get] 
    external setData : messageEventInit:(_) messageEventInit_like -> data:'a568 -> unit = "data" [@@bs.set]
    external origin : messageEventInit:(_) messageEventInit_like -> string = "origin" [@@bs.get] 
    external setOrigin : messageEventInit:(_) messageEventInit_like -> origin:string -> unit = "origin" [@@bs.set]
    external lastEventId : messageEventInit:(_) messageEventInit_like -> string = "lastEventId" [@@bs.get] 
    external setLastEventId : messageEventInit:(_) messageEventInit_like -> lastEventId:string -> unit = "lastEventId" [@@bs.set]
    
    
end
 module FilePropertyBag = struct
    include BlobPropertyBag
    
    external make : ?type_:string -> ?lastModified:int -> unit -> filePropertyBag = "" [@@bs.obj]
    external lastModified : filePropertyBag:(_) filePropertyBag_like -> int = "lastModified" [@@bs.get] 
    external setLastModified : filePropertyBag:(_) filePropertyBag_like -> lastModified:int -> unit = "lastModified" [@@bs.set]
    
    
end
 module StorageEventInit = struct
    include EventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?key:string Js.null -> ?oldValue:string Js.null -> ?newValue:string Js.null -> ?url:string -> ?storageArea:(_) storage_like Js.null -> unit -> storageEventInit = "" [@@bs.obj]
    external key : storageEventInit:(_) storageEventInit_like -> string option = "key" [@@bs.get] [@@bs.return null_to_opt]
    external setKey : storageEventInit:(_) storageEventInit_like -> key:string Js.null -> unit = "key" [@@bs.set]
    external oldValue : storageEventInit:(_) storageEventInit_like -> string option = "oldValue" [@@bs.get] [@@bs.return null_to_opt]
    external setOldValue : storageEventInit:(_) storageEventInit_like -> oldValue:string Js.null -> unit = "oldValue" [@@bs.set]
    external newValue : storageEventInit:(_) storageEventInit_like -> string option = "newValue" [@@bs.get] [@@bs.return null_to_opt]
    external setNewValue : storageEventInit:(_) storageEventInit_like -> newValue:string Js.null -> unit = "newValue" [@@bs.set]
    external url : storageEventInit:(_) storageEventInit_like -> string = "url" [@@bs.get] 
    external setUrl : storageEventInit:(_) storageEventInit_like -> url:string -> unit = "url" [@@bs.set]
    external storageArea : storageEventInit:(_) storageEventInit_like -> storage option = "storageArea" [@@bs.get] [@@bs.return null_to_opt]
    external setStorageArea : storageEventInit:(_) storageEventInit_like -> storageArea:storage Js.null -> unit = "storageArea" [@@bs.set]
    
    
end
 module VRDisplayEventInit = struct
    include EventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> display:(_) vRDisplay_like -> ?reason:string -> unit -> vRDisplayEventInit = "" [@@bs.obj]
    external display : vRDisplayEventInit:(_) vRDisplayEventInit_like -> vRDisplay = "display" [@@bs.get] 
    external setDisplay : vRDisplayEventInit:(_) vRDisplayEventInit_like -> display:vRDisplay -> unit = "display" [@@bs.set]
    external reason : vRDisplayEventInit:(_) vRDisplayEventInit_like -> string = "reason" [@@bs.get] 
    external setReason : vRDisplayEventInit:(_) vRDisplayEventInit_like -> reason:string -> unit = "reason" [@@bs.set]
    
    
end
 module PopStateEventInit = struct
    include EventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?state:'a569 -> unit -> popStateEventInit = "" [@@bs.obj]
    external state : popStateEventInit:(_) popStateEventInit_like -> 'a570 = "state" [@@bs.get] 
    external setState : popStateEventInit:(_) popStateEventInit_like -> state:'a571 -> unit = "state" [@@bs.set]
    
    
end
 module WebGLContextEventInit = struct
    include EventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?statusMessage:string -> unit -> webGLContextEventInit = "" [@@bs.obj]
    external statusMessage : webGLContextEventInit:(_) webGLContextEventInit_like -> string = "statusMessage" [@@bs.get] 
    external setStatusMessage : webGLContextEventInit:(_) webGLContextEventInit_like -> statusMessage:string -> unit = "statusMessage" [@@bs.set]
    
    
end
 module CustomEventInit = struct
    include EventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?detail:'a572 -> unit -> customEventInit = "" [@@bs.obj]
    external detail : customEventInit:(_) customEventInit_like -> 'a573 = "detail" [@@bs.get] 
    external setDetail : customEventInit:(_) customEventInit_like -> detail:'a574 -> unit = "detail" [@@bs.set]
    
    
end
 module PageTransitionEventInit = struct
    include EventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?persisted:Js.boolean -> unit -> pageTransitionEventInit = "" [@@bs.obj]
    external persisted : pageTransitionEventInit:(_) pageTransitionEventInit_like -> bool = "persisted" [@@bs.get] 
    external setPersisted : pageTransitionEventInit:(_) pageTransitionEventInit_like -> persisted:Js.boolean -> unit = "persisted" [@@bs.set]
    
    
end
 module CloseEventInit = struct
    include EventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?wasClean:Js.boolean -> ?code:int -> ?reason:string -> unit -> closeEventInit = "" [@@bs.obj]
    external wasClean : closeEventInit:(_) closeEventInit_like -> bool = "wasClean" [@@bs.get] 
    external setWasClean : closeEventInit:(_) closeEventInit_like -> wasClean:Js.boolean -> unit = "wasClean" [@@bs.set]
    external code : closeEventInit:(_) closeEventInit_like -> int = "code" [@@bs.get] 
    external setCode : closeEventInit:(_) closeEventInit_like -> code:int -> unit = "code" [@@bs.set]
    external reason : closeEventInit:(_) closeEventInit_like -> string = "reason" [@@bs.get] 
    external setReason : closeEventInit:(_) closeEventInit_like -> reason:string -> unit = "reason" [@@bs.set]
    
    
end
 module MediaQueryListEventInit = struct
    include EventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?media:string -> ?matches:Js.boolean -> unit -> mediaQueryListEventInit = "" [@@bs.obj]
    external media : mediaQueryListEventInit:(_) mediaQueryListEventInit_like -> string = "media" [@@bs.get] 
    external setMedia : mediaQueryListEventInit:(_) mediaQueryListEventInit_like -> media:string -> unit = "media" [@@bs.set]
    external matches : mediaQueryListEventInit:(_) mediaQueryListEventInit_like -> bool = "matches" [@@bs.get] 
    external setMatches : mediaQueryListEventInit:(_) mediaQueryListEventInit_like -> matches:Js.boolean -> unit = "matches" [@@bs.set]
    
    
end
 module ExtendableEventInit = struct
    include EventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> unit -> extendableEventInit = "" [@@bs.obj]
    
    
end
 module ProgressEventInit = struct
    include EventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?lengthComputable:Js.boolean -> ?loaded:int -> ?total:int -> unit -> progressEventInit = "" [@@bs.obj]
    external lengthComputable : progressEventInit:(_) progressEventInit_like -> bool = "lengthComputable" [@@bs.get] 
    external setLengthComputable : progressEventInit:(_) progressEventInit_like -> lengthComputable:Js.boolean -> unit = "lengthComputable" [@@bs.set]
    external loaded : progressEventInit:(_) progressEventInit_like -> int = "loaded" [@@bs.get] 
    external setLoaded : progressEventInit:(_) progressEventInit_like -> loaded:int -> unit = "loaded" [@@bs.set]
    external total : progressEventInit:(_) progressEventInit_like -> int = "total" [@@bs.get] 
    external setTotal : progressEventInit:(_) progressEventInit_like -> total:int -> unit = "total" [@@bs.set]
    
    
end
 module TransitionEventInit = struct
    include EventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?propertyName:string -> ?elapsedTime:float -> ?pseudoElement:string -> unit -> transitionEventInit = "" [@@bs.obj]
    external propertyName : transitionEventInit:(_) transitionEventInit_like -> string = "propertyName" [@@bs.get] 
    external setPropertyName : transitionEventInit:(_) transitionEventInit_like -> propertyName:string -> unit = "propertyName" [@@bs.set]
    external elapsedTime : transitionEventInit:(_) transitionEventInit_like -> float = "elapsedTime" [@@bs.get] 
    external setElapsedTime : transitionEventInit:(_) transitionEventInit_like -> elapsedTime:float -> unit = "elapsedTime" [@@bs.set]
    external pseudoElement : transitionEventInit:(_) transitionEventInit_like -> string = "pseudoElement" [@@bs.get] 
    external setPseudoElement : transitionEventInit:(_) transitionEventInit_like -> pseudoElement:string -> unit = "pseudoElement" [@@bs.set]
    
    
end
 module BluetoothAdvertisingEventInit = struct
    include EventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> device:(_) bluetoothDevice_like -> ?name:string -> ?appearance:int -> ?txPower:int -> ?rssi:int -> unit -> bluetoothAdvertisingEventInit = "" [@@bs.obj]
    external device : bluetoothAdvertisingEventInit:(_) bluetoothAdvertisingEventInit_like -> bluetoothDevice = "device" [@@bs.get] 
    external setDevice : bluetoothAdvertisingEventInit:(_) bluetoothAdvertisingEventInit_like -> device:bluetoothDevice -> unit = "device" [@@bs.set]
    external name : bluetoothAdvertisingEventInit:(_) bluetoothAdvertisingEventInit_like -> string = "name" [@@bs.get] 
    external setName : bluetoothAdvertisingEventInit:(_) bluetoothAdvertisingEventInit_like -> name:string -> unit = "name" [@@bs.set]
    external appearance : bluetoothAdvertisingEventInit:(_) bluetoothAdvertisingEventInit_like -> int = "appearance" [@@bs.get] 
    external setAppearance : bluetoothAdvertisingEventInit:(_) bluetoothAdvertisingEventInit_like -> appearance:int -> unit = "appearance" [@@bs.set]
    external txPower : bluetoothAdvertisingEventInit:(_) bluetoothAdvertisingEventInit_like -> int = "txPower" [@@bs.get] 
    external setTxPower : bluetoothAdvertisingEventInit:(_) bluetoothAdvertisingEventInit_like -> txPower:int -> unit = "txPower" [@@bs.set]
    external rssi : bluetoothAdvertisingEventInit:(_) bluetoothAdvertisingEventInit_like -> int = "rssi" [@@bs.get] 
    external setRssi : bluetoothAdvertisingEventInit:(_) bluetoothAdvertisingEventInit_like -> rssi:int -> unit = "rssi" [@@bs.set]
    
    
end
 module HashChangeEventInit = struct
    include EventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?oldURL:string -> ?newURL:string -> unit -> hashChangeEventInit = "" [@@bs.obj]
    external oldURL : hashChangeEventInit:(_) hashChangeEventInit_like -> string = "oldURL" [@@bs.get] 
    external setOldURL : hashChangeEventInit:(_) hashChangeEventInit_like -> oldURL:string -> unit = "oldURL" [@@bs.set]
    external newURL : hashChangeEventInit:(_) hashChangeEventInit_like -> string = "newURL" [@@bs.get] 
    external setNewURL : hashChangeEventInit:(_) hashChangeEventInit_like -> newURL:string -> unit = "newURL" [@@bs.set]
    
    
end
 module ScrollToOptions = struct
    include ScrollOptions
    
    external make : ?behavior:string -> ?left:float -> ?top:float -> unit -> scrollToOptions = "" [@@bs.obj]
    external left : scrollToOptions:(_) scrollToOptions_like -> float = "left" [@@bs.get] 
    external setLeft : scrollToOptions:(_) scrollToOptions_like -> left:float -> unit = "left" [@@bs.set]
    external top : scrollToOptions:(_) scrollToOptions_like -> float = "top" [@@bs.get] 
    external setTop : scrollToOptions:(_) scrollToOptions_like -> top:float -> unit = "top" [@@bs.set]
    
    
end
 module XMLHttpRequestUpload = struct
    include XMLHttpRequestEventTarget
    
    
    
    
end
 module XMLHttpRequest = struct
    include XMLHttpRequestEventTarget
    
    external onreadystatechange : xMLHttpRequest:(_) xMLHttpRequest_like -> (event -> 'a575 [@bs]) option = "onreadystatechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnreadystatechange : xMLHttpRequest:(_) xMLHttpRequest_like -> onreadystatechange:(event -> 'a576 [@bs]) Js.null -> unit = "onreadystatechange" [@@bs.set]
    external readyState : xMLHttpRequest:(_) xMLHttpRequest_like -> int = "readyState" [@@bs.get] 
    external timeout : xMLHttpRequest:(_) xMLHttpRequest_like -> int = "timeout" [@@bs.get] 
    external setTimeout : xMLHttpRequest:(_) xMLHttpRequest_like -> timeout:int -> unit = "timeout" [@@bs.set]
    external withCredentials : xMLHttpRequest:(_) xMLHttpRequest_like -> bool = "withCredentials" [@@bs.get] 
    external setWithCredentials : xMLHttpRequest:(_) xMLHttpRequest_like -> withCredentials:Js.boolean -> unit = "withCredentials" [@@bs.set]
    external upload : xMLHttpRequest:(_) xMLHttpRequest_like -> xMLHttpRequestUpload = "upload" [@@bs.get] 
    external responseURL : xMLHttpRequest:(_) xMLHttpRequest_like -> string = "responseURL" [@@bs.get] 
    external status : xMLHttpRequest:(_) xMLHttpRequest_like -> int = "status" [@@bs.get] 
    external statusText : xMLHttpRequest:(_) xMLHttpRequest_like -> string = "statusText" [@@bs.get] 
    external responseType : xMLHttpRequest:(_) xMLHttpRequest_like -> string = "responseType" [@@bs.get] 
    external setResponseType : xMLHttpRequest:(_) xMLHttpRequest_like -> responseType:string -> unit = "responseType" [@@bs.set]
    external response : xMLHttpRequest:(_) xMLHttpRequest_like -> 'a577 = "response" [@@bs.get] 
    external responseText : xMLHttpRequest:(_) xMLHttpRequest_like -> string = "responseText" [@@bs.get] 
    external responseXML : xMLHttpRequest:(_) xMLHttpRequest_like -> document option = "responseXML" [@@bs.get] [@@bs.return null_to_opt]
    external abort : xMLHttpRequest:(_) xMLHttpRequest_like -> unit = "abort" [@@bs.send] 
    external getAllResponseHeaders : xMLHttpRequest:(_) xMLHttpRequest_like -> string = "getAllResponseHeaders" [@@bs.send] 
    external getResponseHeader : xMLHttpRequest:(_) xMLHttpRequest_like -> name:string -> string option = "getResponseHeader" [@@bs.send] [@@bs.return null_to_opt]
    external open_ : xMLHttpRequest:(_) xMLHttpRequest_like -> method_:string -> url:string -> unit = "open" [@@bs.send] 
    external overrideMimeType : xMLHttpRequest:(_) xMLHttpRequest_like -> mime:string -> unit = "overrideMimeType" [@@bs.send] 
    external send : xMLHttpRequest:(_) xMLHttpRequest_like -> ?data:'a578 Js.undefined -> unit = "send" [@@bs.send] 
    external setRequestHeader : xMLHttpRequest:(_) xMLHttpRequest_like -> name:string -> value:string -> unit = "setRequestHeader" [@@bs.send] 
    
    let unsent  =
      
      0
    
    let opened  =
      
      1
    
    let headers_received  =
      
      2
    
    let loading  =
      
      3
    
    let done_  =
      
      4
    
    let send ~xMLHttpRequest ~data =
      let conv_data = function
        | `Document_Null (x: (_) document_like Js.null) -> Obj.magic x
        | `Any_Null (x: 'a579 Js.null) -> Obj.magic x
         in
      let conv_data = access_undef conv_data in
      let data = conv_data data in
      let return = send ~xMLHttpRequest ~data in
      return
    
    let send ~xMLHttpRequest ?data () =
      let conv_data = Js_undefined.from_opt in
      let data = conv_data data in
      send ~xMLHttpRequest ~data
    
end
 module BluetoothPermissionResult = struct
    include PermissionStatus
    
    external devices : bluetoothPermissionResult:(_) bluetoothPermissionResult_like -> bluetoothDevice array = "devices" [@@bs.send] 
    
    
end
 module ForceTouchEvent = struct
    include UIEvent
    
    external sERVO_FORCE_AT_MOUSE_DOWN : forceTouchEvent:(_) forceTouchEvent_like -> float = "SERVO_FORCE_AT_MOUSE_DOWN" [@@bs.get] 
    external sERVO_FORCE_AT_FORCE_MOUSE_DOWN : forceTouchEvent:(_) forceTouchEvent_like -> float = "SERVO_FORCE_AT_FORCE_MOUSE_DOWN" [@@bs.get] 
    external servoForce : forceTouchEvent:(_) forceTouchEvent_like -> float = "servoForce" [@@bs.get] 
    
    
end
 module DissimilarOriginWindow = struct
    include GlobalScope
    
    external window : dissimilarOriginWindow:(_) dissimilarOriginWindow_like -> windowProxy = "window" [@@bs.get] 
    external self : dissimilarOriginWindow:(_) dissimilarOriginWindow_like -> windowProxy = "self" [@@bs.get] 
    external parent : dissimilarOriginWindow:(_) dissimilarOriginWindow_like -> windowProxy option = "parent" [@@bs.get] [@@bs.return null_to_opt]
    external top : dissimilarOriginWindow:(_) dissimilarOriginWindow_like -> windowProxy option = "top" [@@bs.get] [@@bs.return null_to_opt]
    external frames : dissimilarOriginWindow:(_) dissimilarOriginWindow_like -> windowProxy = "frames" [@@bs.get] 
    external length : dissimilarOriginWindow:(_) dissimilarOriginWindow_like -> int = "length" [@@bs.get] 
    external location : dissimilarOriginWindow:(_) dissimilarOriginWindow_like -> dissimilarOriginLocation = "location" [@@bs.get] 
    external closed_ : dissimilarOriginWindow:(_) dissimilarOriginWindow_like -> bool = "closed" [@@bs.get] 
    external opener : dissimilarOriginWindow:(_) dissimilarOriginWindow_like -> 'a580 = "opener" [@@bs.get] 
    external setOpener : dissimilarOriginWindow:(_) dissimilarOriginWindow_like -> opener:'a581 -> unit = "opener" [@@bs.set]
    external blur : dissimilarOriginWindow:(_) dissimilarOriginWindow_like -> unit = "blur" [@@bs.send] 
    external close : dissimilarOriginWindow:(_) dissimilarOriginWindow_like -> unit = "close" [@@bs.send] 
    external focus : dissimilarOriginWindow:(_) dissimilarOriginWindow_like -> unit = "focus" [@@bs.send] 
    external postMessage : dissimilarOriginWindow:(_) dissimilarOriginWindow_like -> message:'a582 -> targetOrigin:string -> unit = "postMessage" [@@bs.send] 
    
    
end
 module KeyboardEvent = struct
    include UIEvent
    
    external key : keyboardEvent:(_) keyboardEvent_like -> string = "key" [@@bs.get] 
    external code : keyboardEvent:(_) keyboardEvent_like -> string = "code" [@@bs.get] 
    external location : keyboardEvent:(_) keyboardEvent_like -> int = "location" [@@bs.get] 
    external ctrlKey : keyboardEvent:(_) keyboardEvent_like -> bool = "ctrlKey" [@@bs.get] 
    external shiftKey : keyboardEvent:(_) keyboardEvent_like -> bool = "shiftKey" [@@bs.get] 
    external altKey : keyboardEvent:(_) keyboardEvent_like -> bool = "altKey" [@@bs.get] 
    external metaKey : keyboardEvent:(_) keyboardEvent_like -> bool = "metaKey" [@@bs.get] 
    external repeat : keyboardEvent:(_) keyboardEvent_like -> bool = "repeat" [@@bs.get] 
    external isComposing : keyboardEvent:(_) keyboardEvent_like -> bool = "isComposing" [@@bs.get] 
    external charCode : keyboardEvent:(_) keyboardEvent_like -> int = "charCode" [@@bs.get] 
    external keyCode : keyboardEvent:(_) keyboardEvent_like -> int = "keyCode" [@@bs.get] 
    external which : keyboardEvent:(_) keyboardEvent_like -> int = "which" [@@bs.get] 
    external getModifierState : keyboardEvent:(_) keyboardEvent_like -> keyArg:string -> bool = "getModifierState" [@@bs.send] 
    external initKeyboardEvent : keyboardEvent:(_) keyboardEvent_like -> typeArg:string -> bubblesArg:Js.boolean -> cancelableArg:Js.boolean -> viewArg:(_) window_like Js.null -> keyArg:string -> locationArg:int -> modifiersListArg:string -> repeat:Js.boolean -> locale:string -> unit = "initKeyboardEvent" [@@bs.send] 
    
    let dom_key_location_standard  =
      
      0
    
    let dom_key_location_left  =
      
      1
    
    let dom_key_location_right  =
      
      2
    
    let dom_key_location_numpad  =
      
      3
    
end
 module TouchEvent = struct
    include UIEvent
    
    external touches : touchEvent:(_) touchEvent_like -> touchList = "touches" [@@bs.get] 
    external targetTouches : touchEvent:(_) touchEvent_like -> touchList = "targetTouches" [@@bs.get] 
    external changedTouches : touchEvent:(_) touchEvent_like -> touchList = "changedTouches" [@@bs.get] 
    external altKey : touchEvent:(_) touchEvent_like -> bool = "altKey" [@@bs.get] 
    external metaKey : touchEvent:(_) touchEvent_like -> bool = "metaKey" [@@bs.get] 
    external ctrlKey : touchEvent:(_) touchEvent_like -> bool = "ctrlKey" [@@bs.get] 
    external shiftKey : touchEvent:(_) touchEvent_like -> bool = "shiftKey" [@@bs.get] 
    
    
end
 module DocumentFragment = struct
    include Node
    
    external children : documentFragment:(_) documentFragment_like -> hTMLCollection = "children" [@@bs.get] 
    external firstElementChild : documentFragment:(_) documentFragment_like -> element option = "firstElementChild" [@@bs.get] [@@bs.return null_to_opt]
    external lastElementChild : documentFragment:(_) documentFragment_like -> element option = "lastElementChild" [@@bs.get] [@@bs.return null_to_opt]
    external childElementCount : documentFragment:(_) documentFragment_like -> int = "childElementCount" [@@bs.get] 
    external append : documentFragment:(_) documentFragment_like -> ((_) documentFragment_like, unit, ('a583)) variadic_func = "append" [@@bs.get]
    external getElementById : documentFragment:(_) documentFragment_like -> elementId:string -> element option = "getElementById" [@@bs.send] [@@bs.return null_to_opt]
    external prepend : documentFragment:(_) documentFragment_like -> ((_) documentFragment_like, unit, ('a584)) variadic_func = "prepend" [@@bs.get]
    external querySelector : documentFragment:(_) documentFragment_like -> selectors:string -> element option = "querySelector" [@@bs.send] [@@bs.return null_to_opt]
    external querySelectorAll : documentFragment:(_) documentFragment_like -> selectors:string -> nodeList = "querySelectorAll" [@@bs.send] 
    
    let append ~documentFragment ~nodes =
      let func = append documentFragment in
      let args = to_arg nodes in
      apply func documentFragment args
    
    let append ~documentFragment ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = append ~documentFragment ~nodes in
      return
    
    let prepend ~documentFragment ~nodes =
      let func = prepend documentFragment in
      let args = to_arg nodes in
      apply func documentFragment args
    
    let prepend ~documentFragment ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = prepend ~documentFragment ~nodes in
      return
    
end
 module ExtendableMessageEvent = struct
    include ExtendableEvent
    
    external data : extendableMessageEvent:(_) extendableMessageEvent_like -> 'a585 = "data" [@@bs.get] 
    external origin : extendableMessageEvent:(_) extendableMessageEvent_like -> string = "origin" [@@bs.get] 
    external lastEventId : extendableMessageEvent:(_) extendableMessageEvent_like -> string = "lastEventId" [@@bs.get] 
    
    
end
 module CSSConditionRule = struct
    include CSSGroupingRule
    
    external conditionText : cSSConditionRule:(_) cSSConditionRule_like -> string = "conditionText" [@@bs.get] 
    external setConditionText : cSSConditionRule:(_) cSSConditionRule_like -> conditionText:string -> unit = "conditionText" [@@bs.set]
    
    
end
 module DocumentType = struct
    include Node
    
    external name : documentType:(_) documentType_like -> string = "name" [@@bs.get] 
    external publicId : documentType:(_) documentType_like -> string = "publicId" [@@bs.get] 
    external systemId : documentType:(_) documentType_like -> string = "systemId" [@@bs.get] 
    external after : documentType:(_) documentType_like -> ((_) documentType_like, unit, ('a586)) variadic_func = "after" [@@bs.get]
    external before : documentType:(_) documentType_like -> ((_) documentType_like, unit, ('a587)) variadic_func = "before" [@@bs.get]
    external remove : documentType:(_) documentType_like -> unit = "remove" [@@bs.send] 
    external replaceWith : documentType:(_) documentType_like -> ((_) documentType_like, unit, ('a588)) variadic_func = "replaceWith" [@@bs.get]
    
    let after ~documentType ~nodes =
      let func = after documentType in
      let args = to_arg nodes in
      apply func documentType args
    
    let after ~documentType ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = after ~documentType ~nodes in
      return
    
    let before ~documentType ~nodes =
      let func = before documentType in
      let args = to_arg nodes in
      apply func documentType args
    
    let before ~documentType ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = before ~documentType ~nodes in
      return
    
    let replaceWith ~documentType ~nodes =
      let func = replaceWith documentType in
      let args = to_arg nodes in
      apply func documentType args
    
    let replaceWith ~documentType ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = replaceWith ~documentType ~nodes in
      return
    
end
 module Document = struct
    include Node
    
    external oncopy : document:(_) document_like -> (event -> 'a589 [@bs]) option = "oncopy" [@@bs.get] [@@bs.return null_to_opt]
    external setOncopy : document:(_) document_like -> oncopy:(event -> 'a590 [@bs]) Js.null -> unit = "oncopy" [@@bs.set]
    external oncut : document:(_) document_like -> (event -> 'a591 [@bs]) option = "oncut" [@@bs.get] [@@bs.return null_to_opt]
    external setOncut : document:(_) document_like -> oncut:(event -> 'a592 [@bs]) Js.null -> unit = "oncut" [@@bs.set]
    external onpaste : document:(_) document_like -> (event -> 'a593 [@bs]) option = "onpaste" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpaste : document:(_) document_like -> onpaste:(event -> 'a594 [@bs]) Js.null -> unit = "onpaste" [@@bs.set]
    external onabort : document:(_) document_like -> (event -> 'a595 [@bs]) option = "onabort" [@@bs.get] [@@bs.return null_to_opt]
    external setOnabort : document:(_) document_like -> onabort:(event -> 'a596 [@bs]) Js.null -> unit = "onabort" [@@bs.set]
    external onblur : document:(_) document_like -> (event -> 'a597 [@bs]) option = "onblur" [@@bs.get] [@@bs.return null_to_opt]
    external setOnblur : document:(_) document_like -> onblur:(event -> 'a598 [@bs]) Js.null -> unit = "onblur" [@@bs.set]
    external oncancel : document:(_) document_like -> (event -> 'a599 [@bs]) option = "oncancel" [@@bs.get] [@@bs.return null_to_opt]
    external setOncancel : document:(_) document_like -> oncancel:(event -> 'a600 [@bs]) Js.null -> unit = "oncancel" [@@bs.set]
    external oncanplay : document:(_) document_like -> (event -> 'a601 [@bs]) option = "oncanplay" [@@bs.get] [@@bs.return null_to_opt]
    external setOncanplay : document:(_) document_like -> oncanplay:(event -> 'a602 [@bs]) Js.null -> unit = "oncanplay" [@@bs.set]
    external oncanplaythrough : document:(_) document_like -> (event -> 'a603 [@bs]) option = "oncanplaythrough" [@@bs.get] [@@bs.return null_to_opt]
    external setOncanplaythrough : document:(_) document_like -> oncanplaythrough:(event -> 'a604 [@bs]) Js.null -> unit = "oncanplaythrough" [@@bs.set]
    external onchange : document:(_) document_like -> (event -> 'a605 [@bs]) option = "onchange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnchange : document:(_) document_like -> onchange:(event -> 'a606 [@bs]) Js.null -> unit = "onchange" [@@bs.set]
    external onclick : document:(_) document_like -> (event -> 'a607 [@bs]) option = "onclick" [@@bs.get] [@@bs.return null_to_opt]
    external setOnclick : document:(_) document_like -> onclick:(event -> 'a608 [@bs]) Js.null -> unit = "onclick" [@@bs.set]
    external onclose : document:(_) document_like -> (event -> 'a609 [@bs]) option = "onclose" [@@bs.get] [@@bs.return null_to_opt]
    external setOnclose : document:(_) document_like -> onclose:(event -> 'a610 [@bs]) Js.null -> unit = "onclose" [@@bs.set]
    external oncontextmenu : document:(_) document_like -> (event -> 'a611 [@bs]) option = "oncontextmenu" [@@bs.get] [@@bs.return null_to_opt]
    external setOncontextmenu : document:(_) document_like -> oncontextmenu:(event -> 'a612 [@bs]) Js.null -> unit = "oncontextmenu" [@@bs.set]
    external oncuechange : document:(_) document_like -> (event -> 'a613 [@bs]) option = "oncuechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOncuechange : document:(_) document_like -> oncuechange:(event -> 'a614 [@bs]) Js.null -> unit = "oncuechange" [@@bs.set]
    external ondblclick : document:(_) document_like -> (event -> 'a615 [@bs]) option = "ondblclick" [@@bs.get] [@@bs.return null_to_opt]
    external setOndblclick : document:(_) document_like -> ondblclick:(event -> 'a616 [@bs]) Js.null -> unit = "ondblclick" [@@bs.set]
    external ondrag : document:(_) document_like -> (event -> 'a617 [@bs]) option = "ondrag" [@@bs.get] [@@bs.return null_to_opt]
    external setOndrag : document:(_) document_like -> ondrag:(event -> 'a618 [@bs]) Js.null -> unit = "ondrag" [@@bs.set]
    external ondragend : document:(_) document_like -> (event -> 'a619 [@bs]) option = "ondragend" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragend : document:(_) document_like -> ondragend:(event -> 'a620 [@bs]) Js.null -> unit = "ondragend" [@@bs.set]
    external ondragenter : document:(_) document_like -> (event -> 'a621 [@bs]) option = "ondragenter" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragenter : document:(_) document_like -> ondragenter:(event -> 'a622 [@bs]) Js.null -> unit = "ondragenter" [@@bs.set]
    external ondragexit : document:(_) document_like -> (event -> 'a623 [@bs]) option = "ondragexit" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragexit : document:(_) document_like -> ondragexit:(event -> 'a624 [@bs]) Js.null -> unit = "ondragexit" [@@bs.set]
    external ondragleave : document:(_) document_like -> (event -> 'a625 [@bs]) option = "ondragleave" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragleave : document:(_) document_like -> ondragleave:(event -> 'a626 [@bs]) Js.null -> unit = "ondragleave" [@@bs.set]
    external ondragover : document:(_) document_like -> (event -> 'a627 [@bs]) option = "ondragover" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragover : document:(_) document_like -> ondragover:(event -> 'a628 [@bs]) Js.null -> unit = "ondragover" [@@bs.set]
    external ondragstart : document:(_) document_like -> (event -> 'a629 [@bs]) option = "ondragstart" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragstart : document:(_) document_like -> ondragstart:(event -> 'a630 [@bs]) Js.null -> unit = "ondragstart" [@@bs.set]
    external ondrop : document:(_) document_like -> (event -> 'a631 [@bs]) option = "ondrop" [@@bs.get] [@@bs.return null_to_opt]
    external setOndrop : document:(_) document_like -> ondrop:(event -> 'a632 [@bs]) Js.null -> unit = "ondrop" [@@bs.set]
    external ondurationchange : document:(_) document_like -> (event -> 'a633 [@bs]) option = "ondurationchange" [@@bs.get] [@@bs.return null_to_opt]
    external setOndurationchange : document:(_) document_like -> ondurationchange:(event -> 'a634 [@bs]) Js.null -> unit = "ondurationchange" [@@bs.set]
    external onemptied : document:(_) document_like -> (event -> 'a635 [@bs]) option = "onemptied" [@@bs.get] [@@bs.return null_to_opt]
    external setOnemptied : document:(_) document_like -> onemptied:(event -> 'a636 [@bs]) Js.null -> unit = "onemptied" [@@bs.set]
    external onended : document:(_) document_like -> (event -> 'a637 [@bs]) option = "onended" [@@bs.get] [@@bs.return null_to_opt]
    external setOnended : document:(_) document_like -> onended:(event -> 'a638 [@bs]) Js.null -> unit = "onended" [@@bs.set]
    external onerror : document:(_) document_like -> ('a639 -> string -> int -> int -> 'a640 -> 'a641 [@bs]) option = "onerror" [@@bs.get] [@@bs.return null_to_opt]
    external setOnerror : document:(_) document_like -> onerror:('a642 -> string -> int -> int -> 'a643 -> 'a644 [@bs]) Js.null -> unit = "onerror" [@@bs.set]
    external onfocus : document:(_) document_like -> (event -> 'a645 [@bs]) option = "onfocus" [@@bs.get] [@@bs.return null_to_opt]
    external setOnfocus : document:(_) document_like -> onfocus:(event -> 'a646 [@bs]) Js.null -> unit = "onfocus" [@@bs.set]
    external oninput : document:(_) document_like -> (event -> 'a647 [@bs]) option = "oninput" [@@bs.get] [@@bs.return null_to_opt]
    external setOninput : document:(_) document_like -> oninput:(event -> 'a648 [@bs]) Js.null -> unit = "oninput" [@@bs.set]
    external oninvalid : document:(_) document_like -> (event -> 'a649 [@bs]) option = "oninvalid" [@@bs.get] [@@bs.return null_to_opt]
    external setOninvalid : document:(_) document_like -> oninvalid:(event -> 'a650 [@bs]) Js.null -> unit = "oninvalid" [@@bs.set]
    external onkeydown : document:(_) document_like -> (event -> 'a651 [@bs]) option = "onkeydown" [@@bs.get] [@@bs.return null_to_opt]
    external setOnkeydown : document:(_) document_like -> onkeydown:(event -> 'a652 [@bs]) Js.null -> unit = "onkeydown" [@@bs.set]
    external onkeypress : document:(_) document_like -> (event -> 'a653 [@bs]) option = "onkeypress" [@@bs.get] [@@bs.return null_to_opt]
    external setOnkeypress : document:(_) document_like -> onkeypress:(event -> 'a654 [@bs]) Js.null -> unit = "onkeypress" [@@bs.set]
    external onkeyup : document:(_) document_like -> (event -> 'a655 [@bs]) option = "onkeyup" [@@bs.get] [@@bs.return null_to_opt]
    external setOnkeyup : document:(_) document_like -> onkeyup:(event -> 'a656 [@bs]) Js.null -> unit = "onkeyup" [@@bs.set]
    external onload : document:(_) document_like -> (event -> 'a657 [@bs]) option = "onload" [@@bs.get] [@@bs.return null_to_opt]
    external setOnload : document:(_) document_like -> onload:(event -> 'a658 [@bs]) Js.null -> unit = "onload" [@@bs.set]
    external onloadeddata : document:(_) document_like -> (event -> 'a659 [@bs]) option = "onloadeddata" [@@bs.get] [@@bs.return null_to_opt]
    external setOnloadeddata : document:(_) document_like -> onloadeddata:(event -> 'a660 [@bs]) Js.null -> unit = "onloadeddata" [@@bs.set]
    external onloadedmetadata : document:(_) document_like -> (event -> 'a661 [@bs]) option = "onloadedmetadata" [@@bs.get] [@@bs.return null_to_opt]
    external setOnloadedmetadata : document:(_) document_like -> onloadedmetadata:(event -> 'a662 [@bs]) Js.null -> unit = "onloadedmetadata" [@@bs.set]
    external onloadstart : document:(_) document_like -> (event -> 'a663 [@bs]) option = "onloadstart" [@@bs.get] [@@bs.return null_to_opt]
    external setOnloadstart : document:(_) document_like -> onloadstart:(event -> 'a664 [@bs]) Js.null -> unit = "onloadstart" [@@bs.set]
    external onmousedown : document:(_) document_like -> (event -> 'a665 [@bs]) option = "onmousedown" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmousedown : document:(_) document_like -> onmousedown:(event -> 'a666 [@bs]) Js.null -> unit = "onmousedown" [@@bs.set]
    external onmouseenter : document:(_) document_like -> (event -> 'a667 [@bs]) option = "onmouseenter" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseenter : document:(_) document_like -> onmouseenter:(event -> 'a668 [@bs]) Js.null -> unit = "onmouseenter" [@@bs.set]
    external onmouseleave : document:(_) document_like -> (event -> 'a669 [@bs]) option = "onmouseleave" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseleave : document:(_) document_like -> onmouseleave:(event -> 'a670 [@bs]) Js.null -> unit = "onmouseleave" [@@bs.set]
    external onmousemove : document:(_) document_like -> (event -> 'a671 [@bs]) option = "onmousemove" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmousemove : document:(_) document_like -> onmousemove:(event -> 'a672 [@bs]) Js.null -> unit = "onmousemove" [@@bs.set]
    external onmouseout : document:(_) document_like -> (event -> 'a673 [@bs]) option = "onmouseout" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseout : document:(_) document_like -> onmouseout:(event -> 'a674 [@bs]) Js.null -> unit = "onmouseout" [@@bs.set]
    external onmouseover : document:(_) document_like -> (event -> 'a675 [@bs]) option = "onmouseover" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseover : document:(_) document_like -> onmouseover:(event -> 'a676 [@bs]) Js.null -> unit = "onmouseover" [@@bs.set]
    external onmouseup : document:(_) document_like -> (event -> 'a677 [@bs]) option = "onmouseup" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseup : document:(_) document_like -> onmouseup:(event -> 'a678 [@bs]) Js.null -> unit = "onmouseup" [@@bs.set]
    external onwheel : document:(_) document_like -> (event -> 'a679 [@bs]) option = "onwheel" [@@bs.get] [@@bs.return null_to_opt]
    external setOnwheel : document:(_) document_like -> onwheel:(event -> 'a680 [@bs]) Js.null -> unit = "onwheel" [@@bs.set]
    external onpause : document:(_) document_like -> (event -> 'a681 [@bs]) option = "onpause" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpause : document:(_) document_like -> onpause:(event -> 'a682 [@bs]) Js.null -> unit = "onpause" [@@bs.set]
    external onplay : document:(_) document_like -> (event -> 'a683 [@bs]) option = "onplay" [@@bs.get] [@@bs.return null_to_opt]
    external setOnplay : document:(_) document_like -> onplay:(event -> 'a684 [@bs]) Js.null -> unit = "onplay" [@@bs.set]
    external onplaying : document:(_) document_like -> (event -> 'a685 [@bs]) option = "onplaying" [@@bs.get] [@@bs.return null_to_opt]
    external setOnplaying : document:(_) document_like -> onplaying:(event -> 'a686 [@bs]) Js.null -> unit = "onplaying" [@@bs.set]
    external onprogress : document:(_) document_like -> (event -> 'a687 [@bs]) option = "onprogress" [@@bs.get] [@@bs.return null_to_opt]
    external setOnprogress : document:(_) document_like -> onprogress:(event -> 'a688 [@bs]) Js.null -> unit = "onprogress" [@@bs.set]
    external onratechange : document:(_) document_like -> (event -> 'a689 [@bs]) option = "onratechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnratechange : document:(_) document_like -> onratechange:(event -> 'a690 [@bs]) Js.null -> unit = "onratechange" [@@bs.set]
    external onreset : document:(_) document_like -> (event -> 'a691 [@bs]) option = "onreset" [@@bs.get] [@@bs.return null_to_opt]
    external setOnreset : document:(_) document_like -> onreset:(event -> 'a692 [@bs]) Js.null -> unit = "onreset" [@@bs.set]
    external onresize : document:(_) document_like -> (event -> 'a693 [@bs]) option = "onresize" [@@bs.get] [@@bs.return null_to_opt]
    external setOnresize : document:(_) document_like -> onresize:(event -> 'a694 [@bs]) Js.null -> unit = "onresize" [@@bs.set]
    external onscroll : document:(_) document_like -> (event -> 'a695 [@bs]) option = "onscroll" [@@bs.get] [@@bs.return null_to_opt]
    external setOnscroll : document:(_) document_like -> onscroll:(event -> 'a696 [@bs]) Js.null -> unit = "onscroll" [@@bs.set]
    external onseeked : document:(_) document_like -> (event -> 'a697 [@bs]) option = "onseeked" [@@bs.get] [@@bs.return null_to_opt]
    external setOnseeked : document:(_) document_like -> onseeked:(event -> 'a698 [@bs]) Js.null -> unit = "onseeked" [@@bs.set]
    external onseeking : document:(_) document_like -> (event -> 'a699 [@bs]) option = "onseeking" [@@bs.get] [@@bs.return null_to_opt]
    external setOnseeking : document:(_) document_like -> onseeking:(event -> 'a700 [@bs]) Js.null -> unit = "onseeking" [@@bs.set]
    external onselect : document:(_) document_like -> (event -> 'a701 [@bs]) option = "onselect" [@@bs.get] [@@bs.return null_to_opt]
    external setOnselect : document:(_) document_like -> onselect:(event -> 'a702 [@bs]) Js.null -> unit = "onselect" [@@bs.set]
    external onshow : document:(_) document_like -> (event -> 'a703 [@bs]) option = "onshow" [@@bs.get] [@@bs.return null_to_opt]
    external setOnshow : document:(_) document_like -> onshow:(event -> 'a704 [@bs]) Js.null -> unit = "onshow" [@@bs.set]
    external onstalled : document:(_) document_like -> (event -> 'a705 [@bs]) option = "onstalled" [@@bs.get] [@@bs.return null_to_opt]
    external setOnstalled : document:(_) document_like -> onstalled:(event -> 'a706 [@bs]) Js.null -> unit = "onstalled" [@@bs.set]
    external onsubmit : document:(_) document_like -> (event -> 'a707 [@bs]) option = "onsubmit" [@@bs.get] [@@bs.return null_to_opt]
    external setOnsubmit : document:(_) document_like -> onsubmit:(event -> 'a708 [@bs]) Js.null -> unit = "onsubmit" [@@bs.set]
    external onsuspend : document:(_) document_like -> (event -> 'a709 [@bs]) option = "onsuspend" [@@bs.get] [@@bs.return null_to_opt]
    external setOnsuspend : document:(_) document_like -> onsuspend:(event -> 'a710 [@bs]) Js.null -> unit = "onsuspend" [@@bs.set]
    external ontimeupdate : document:(_) document_like -> (event -> 'a711 [@bs]) option = "ontimeupdate" [@@bs.get] [@@bs.return null_to_opt]
    external setOntimeupdate : document:(_) document_like -> ontimeupdate:(event -> 'a712 [@bs]) Js.null -> unit = "ontimeupdate" [@@bs.set]
    external ontoggle : document:(_) document_like -> (event -> 'a713 [@bs]) option = "ontoggle" [@@bs.get] [@@bs.return null_to_opt]
    external setOntoggle : document:(_) document_like -> ontoggle:(event -> 'a714 [@bs]) Js.null -> unit = "ontoggle" [@@bs.set]
    external onvolumechange : document:(_) document_like -> (event -> 'a715 [@bs]) option = "onvolumechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnvolumechange : document:(_) document_like -> onvolumechange:(event -> 'a716 [@bs]) Js.null -> unit = "onvolumechange" [@@bs.set]
    external onwaiting : document:(_) document_like -> (event -> 'a717 [@bs]) option = "onwaiting" [@@bs.get] [@@bs.return null_to_opt]
    external setOnwaiting : document:(_) document_like -> onwaiting:(event -> 'a718 [@bs]) Js.null -> unit = "onwaiting" [@@bs.set]
    external ontransitionend : document:(_) document_like -> (event -> 'a719 [@bs]) option = "ontransitionend" [@@bs.get] [@@bs.return null_to_opt]
    external setOntransitionend : document:(_) document_like -> ontransitionend:(event -> 'a720 [@bs]) Js.null -> unit = "ontransitionend" [@@bs.set]
    external children : document:(_) document_like -> hTMLCollection = "children" [@@bs.get] 
    external firstElementChild : document:(_) document_like -> element option = "firstElementChild" [@@bs.get] [@@bs.return null_to_opt]
    external lastElementChild : document:(_) document_like -> element option = "lastElementChild" [@@bs.get] [@@bs.return null_to_opt]
    external childElementCount : document:(_) document_like -> int = "childElementCount" [@@bs.get] 
    external implementation : document:(_) document_like -> dOMImplementation = "implementation" [@@bs.get] 
    external uRL : document:(_) document_like -> string = "URL" [@@bs.get] 
    external documentURI : document:(_) document_like -> string = "documentURI" [@@bs.get] 
    external compatMode : document:(_) document_like -> string = "compatMode" [@@bs.get] 
    external characterSet : document:(_) document_like -> string = "characterSet" [@@bs.get] 
    external charset : document:(_) document_like -> string = "charset" [@@bs.get] 
    external inputEncoding : document:(_) document_like -> string = "inputEncoding" [@@bs.get] 
    external contentType : document:(_) document_like -> string = "contentType" [@@bs.get] 
    external doctype : document:(_) document_like -> documentType option = "doctype" [@@bs.get] [@@bs.return null_to_opt]
    external documentElement : document:(_) document_like -> element option = "documentElement" [@@bs.get] [@@bs.return null_to_opt]
    external location : document:(_) document_like -> location option = "location" [@@bs.get] [@@bs.return null_to_opt]
    external domain : document:(_) document_like -> string = "domain" [@@bs.get] 
    external setDomain : document:(_) document_like -> domain:string -> unit = "domain" [@@bs.set]
    external referrer : document:(_) document_like -> string = "referrer" [@@bs.get] 
    external cookie : document:(_) document_like -> string = "cookie" [@@bs.get] 
    external setCookie : document:(_) document_like -> cookie:string -> unit = "cookie" [@@bs.set]
    external lastModified : document:(_) document_like -> string = "lastModified" [@@bs.get] 
    external readyState : document:(_) document_like -> string = "readyState" [@@bs.get] 
    external title : document:(_) document_like -> string = "title" [@@bs.get] 
    external setTitle : document:(_) document_like -> title:string -> unit = "title" [@@bs.set]
    external body : document:(_) document_like -> hTMLElement option = "body" [@@bs.get] [@@bs.return null_to_opt]
    external setBody : document:(_) document_like -> body:hTMLElement Js.null -> unit = "body" [@@bs.set]
    external head : document:(_) document_like -> hTMLHeadElement option = "head" [@@bs.get] [@@bs.return null_to_opt]
    external images : document:(_) document_like -> hTMLCollection = "images" [@@bs.get] 
    external embeds : document:(_) document_like -> hTMLCollection = "embeds" [@@bs.get] 
    external plugins : document:(_) document_like -> hTMLCollection = "plugins" [@@bs.get] 
    external links : document:(_) document_like -> hTMLCollection = "links" [@@bs.get] 
    external forms : document:(_) document_like -> hTMLCollection = "forms" [@@bs.get] 
    external scripts : document:(_) document_like -> hTMLCollection = "scripts" [@@bs.get] 
    external currentScript : document:(_) document_like -> hTMLScriptElement option = "currentScript" [@@bs.get] [@@bs.return null_to_opt]
    external defaultView : document:(_) document_like -> window option = "defaultView" [@@bs.get] [@@bs.return null_to_opt]
    external activeElement : document:(_) document_like -> element option = "activeElement" [@@bs.get] [@@bs.return null_to_opt]
    external onreadystatechange : document:(_) document_like -> (event -> 'a721 [@bs]) option = "onreadystatechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnreadystatechange : document:(_) document_like -> onreadystatechange:(event -> 'a722 [@bs]) Js.null -> unit = "onreadystatechange" [@@bs.set]
    external fgColor : document:(_) document_like -> string = "fgColor" [@@bs.get] 
    external setFgColor : document:(_) document_like -> fgColor:string -> unit = "fgColor" [@@bs.set]
    external bgColor : document:(_) document_like -> string = "bgColor" [@@bs.get] 
    external setBgColor : document:(_) document_like -> bgColor:string -> unit = "bgColor" [@@bs.set]
    external anchors : document:(_) document_like -> hTMLCollection = "anchors" [@@bs.get] 
    external applets : document:(_) document_like -> hTMLCollection = "applets" [@@bs.get] 
    external styleSheets : document:(_) document_like -> styleSheetList = "styleSheets" [@@bs.get] 
    external fullscreenEnabled : document:(_) document_like -> bool = "fullscreenEnabled" [@@bs.get] 
    external fullscreenElement : document:(_) document_like -> element option = "fullscreenElement" [@@bs.get] [@@bs.return null_to_opt]
    external fullscreen : document:(_) document_like -> bool = "fullscreen" [@@bs.get] 
    external onfullscreenchange : document:(_) document_like -> (event -> 'a723 [@bs]) option = "onfullscreenchange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnfullscreenchange : document:(_) document_like -> onfullscreenchange:(event -> 'a724 [@bs]) Js.null -> unit = "onfullscreenchange" [@@bs.set]
    external onfullscreenerror : document:(_) document_like -> (event -> 'a725 [@bs]) option = "onfullscreenerror" [@@bs.get] [@@bs.return null_to_opt]
    external setOnfullscreenerror : document:(_) document_like -> onfullscreenerror:(event -> 'a726 [@bs]) Js.null -> unit = "onfullscreenerror" [@@bs.set]
    external none : document:(_) document_like -> name:string -> 'a727 = "" [@@bs.get_index] 
    external adoptNode : document:(_) document_like -> node:(_) node_like -> node = "adoptNode" [@@bs.send] 
    external append : document:(_) document_like -> ((_) document_like, unit, ('a728)) variadic_func = "append" [@@bs.get]
    external captureEvents : document:(_) document_like -> unit = "captureEvents" [@@bs.send] 
    external clear : document:(_) document_like -> unit = "clear" [@@bs.send] 
    external close : document:(_) document_like -> unit = "close" [@@bs.send] 
    external createAttribute : document:(_) document_like -> localName:string -> attr = "createAttribute" [@@bs.send] 
    external createAttributeNS : document:(_) document_like -> namespace:string Js.null -> qualifiedName:string -> attr = "createAttributeNS" [@@bs.send] 
    external createComment : document:(_) document_like -> data:string -> comment = "createComment" [@@bs.send] 
    external createDocumentFragment : document:(_) document_like -> documentFragment = "createDocumentFragment" [@@bs.send] 
    external createElement : document:(_) document_like -> localName:string -> ?options:(_) elementCreationOptions_like Js.undefined -> element = "createElement" [@@bs.send] 
    external createElementNS : document:(_) document_like -> namespace:string Js.null -> qualifiedName:string -> ?options:(_) elementCreationOptions_like Js.undefined -> element = "createElementNS" [@@bs.send] 
    external createEvent : document:(_) document_like -> interface_:string -> event = "createEvent" [@@bs.send] 
    external createNodeIterator : document:(_) document_like -> root:(_) node_like -> ?whatToShow:int Js.undefined -> ?filter:(_) nodeFilter_like Js.null Js.undefined -> nodeIterator = "createNodeIterator" [@@bs.send] 
    external createProcessingInstruction : document:(_) document_like -> target:string -> data:string -> processingInstruction = "createProcessingInstruction" [@@bs.send] 
    external createRange : document:(_) document_like -> range = "createRange" [@@bs.send] 
    external createTextNode : document:(_) document_like -> data:string -> text = "createTextNode" [@@bs.send] 
    external createTouch : document:(_) document_like -> view:(_) window_like -> target:(_) eventTarget_like -> identifier:int -> pageX:float -> pageY:float -> screenX:float -> screenY:float -> touch = "createTouch" [@@bs.send] 
    external createTouchList : document:(_) document_like -> ((_) document_like, touchList, ((_) touch_like)) variadic_func = "createTouchList" [@@bs.get]
    external createTreeWalker : document:(_) document_like -> root:(_) node_like -> ?whatToShow:int Js.undefined -> ?filter:(_) nodeFilter_like Js.null Js.undefined -> treeWalker = "createTreeWalker" [@@bs.send] 
    external elementFromPoint : document:(_) document_like -> x:float -> y:float -> element option = "elementFromPoint" [@@bs.send] [@@bs.return null_to_opt]
    external elementsFromPoint : document:(_) document_like -> x:float -> y:float -> element array = "elementsFromPoint" [@@bs.send] 
    external exitFullscreen : document:(_) document_like -> unit Js.Promise.t = "exitFullscreen" [@@bs.send] 
    external getElementById : document:(_) document_like -> elementId:string -> element option = "getElementById" [@@bs.send] [@@bs.return null_to_opt]
    external getElementsByClassName : document:(_) document_like -> classNames:string -> hTMLCollection = "getElementsByClassName" [@@bs.send] 
    external getElementsByName : document:(_) document_like -> elementName:string -> nodeList = "getElementsByName" [@@bs.send] 
    external getElementsByTagName : document:(_) document_like -> qualifiedName:string -> hTMLCollection = "getElementsByTagName" [@@bs.send] 
    external getElementsByTagNameNS : document:(_) document_like -> namespace:string Js.null -> qualifiedName:string -> hTMLCollection = "getElementsByTagNameNS" [@@bs.send] 
    external hasFocus : document:(_) document_like -> bool = "hasFocus" [@@bs.send] 
    external importNode : document:(_) document_like -> node:(_) node_like -> ?deep:Js.boolean Js.undefined -> node = "importNode" [@@bs.send] 
    external open_ : document:(_) document_like -> ?type_:string Js.undefined -> ?replace:string Js.undefined -> document = "open" [@@bs.send] 
    external prepend : document:(_) document_like -> ((_) document_like, unit, ('a729)) variadic_func = "prepend" [@@bs.get]
    external querySelector : document:(_) document_like -> selectors:string -> element option = "querySelector" [@@bs.send] [@@bs.return null_to_opt]
    external querySelectorAll : document:(_) document_like -> selectors:string -> nodeList = "querySelectorAll" [@@bs.send] 
    external releaseEvents : document:(_) document_like -> unit = "releaseEvents" [@@bs.send] 
    external write : document:(_) document_like -> ((_) document_like, unit, (string)) variadic_func = "write" [@@bs.get]
    external writeln : document:(_) document_like -> ((_) document_like, unit, (string)) variadic_func = "writeln" [@@bs.get]
    
    let append ~document ~nodes =
      let func = append document in
      let args = to_arg nodes in
      apply func document args
    
    let append ~document ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = append ~document ~nodes in
      return
    
    let createElement ~document ~localName ?options () =
      let conv_options = Js_undefined.from_opt in
      let options = conv_options options in
      createElement ~document ~localName ~options
    
    let createElementNS ~document ~namespace ~qualifiedName ?options () =
      let conv_options = Js_undefined.from_opt in
      let options = conv_options options in
      createElementNS ~document ~namespace ~qualifiedName ~options
    
    let createNodeIterator ~document ~root ?whatToShow ?filter () =
      let conv_whatToShow = Js_undefined.from_opt in
      let whatToShow = conv_whatToShow whatToShow in
      let conv_filter = Js_undefined.from_opt in
      let filter = conv_filter filter in
      createNodeIterator ~document ~root ~whatToShow ~filter
    
    let createTouchList ~document ~touches =
      let func = createTouchList document in
      let args = to_arg touches in
      apply func document args
    
    let createTreeWalker ~document ~root ?whatToShow ?filter () =
      let conv_whatToShow = Js_undefined.from_opt in
      let whatToShow = conv_whatToShow whatToShow in
      let conv_filter = Js_undefined.from_opt in
      let filter = conv_filter filter in
      createTreeWalker ~document ~root ~whatToShow ~filter
    
    let importNode ~document ~node ?deep () =
      let conv_deep = Js_undefined.from_opt in
      let deep = conv_deep deep in
      importNode ~document ~node ~deep
    
    let open_ ~document ?type_ ?replace () =
      let conv_type = Js_undefined.from_opt in
      let type_ = conv_type type_ in
      let conv_replace = Js_undefined.from_opt in
      let replace = conv_replace replace in
      open_ ~document ~type_ ~replace
    
    let prepend ~document ~nodes =
      let func = prepend document in
      let args = to_arg nodes in
      apply func document args
    
    let prepend ~document ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = prepend ~document ~nodes in
      return
    
    let write ~document ~text =
      let func = write document in
      let args = to_arg text in
      apply func document args
    
    let writeln ~document ~text =
      let func = writeln document in
      let args = to_arg text in
      apply func document args
    
end
 module CharacterData = struct
    include Node
    
    external previousElementSibling : characterData:(_) characterData_like -> element option = "previousElementSibling" [@@bs.get] [@@bs.return null_to_opt]
    external nextElementSibling : characterData:(_) characterData_like -> element option = "nextElementSibling" [@@bs.get] [@@bs.return null_to_opt]
    external data : characterData:(_) characterData_like -> string = "data" [@@bs.get] 
    external setData : characterData:(_) characterData_like -> data:string -> unit = "data" [@@bs.set]
    external length : characterData:(_) characterData_like -> int = "length" [@@bs.get] 
    external after : characterData:(_) characterData_like -> ((_) characterData_like, unit, ('a730)) variadic_func = "after" [@@bs.get]
    external appendData : characterData:(_) characterData_like -> data:string -> unit = "appendData" [@@bs.send] 
    external before : characterData:(_) characterData_like -> ((_) characterData_like, unit, ('a731)) variadic_func = "before" [@@bs.get]
    external deleteData : characterData:(_) characterData_like -> offset:int -> count:int -> unit = "deleteData" [@@bs.send] 
    external insertData : characterData:(_) characterData_like -> offset:int -> data:string -> unit = "insertData" [@@bs.send] 
    external remove : characterData:(_) characterData_like -> unit = "remove" [@@bs.send] 
    external replaceData : characterData:(_) characterData_like -> offset:int -> count:int -> data:string -> unit = "replaceData" [@@bs.send] 
    external replaceWith : characterData:(_) characterData_like -> ((_) characterData_like, unit, ('a732)) variadic_func = "replaceWith" [@@bs.get]
    external substringData : characterData:(_) characterData_like -> offset:int -> count:int -> string = "substringData" [@@bs.send] 
    
    let after ~characterData ~nodes =
      let func = after characterData in
      let args = to_arg nodes in
      apply func characterData args
    
    let after ~characterData ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = after ~characterData ~nodes in
      return
    
    let before ~characterData ~nodes =
      let func = before characterData in
      let args = to_arg nodes in
      apply func characterData args
    
    let before ~characterData ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = before ~characterData ~nodes in
      return
    
    let replaceWith ~characterData ~nodes =
      let func = replaceWith characterData in
      let args = to_arg nodes in
      apply func characterData args
    
    let replaceWith ~characterData ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = replaceWith ~characterData ~nodes in
      return
    
end
 module MouseEvent = struct
    include UIEvent
    
    external screenX : mouseEvent:(_) mouseEvent_like -> int = "screenX" [@@bs.get] 
    external screenY : mouseEvent:(_) mouseEvent_like -> int = "screenY" [@@bs.get] 
    external clientX : mouseEvent:(_) mouseEvent_like -> int = "clientX" [@@bs.get] 
    external clientY : mouseEvent:(_) mouseEvent_like -> int = "clientY" [@@bs.get] 
    external ctrlKey : mouseEvent:(_) mouseEvent_like -> bool = "ctrlKey" [@@bs.get] 
    external shiftKey : mouseEvent:(_) mouseEvent_like -> bool = "shiftKey" [@@bs.get] 
    external altKey : mouseEvent:(_) mouseEvent_like -> bool = "altKey" [@@bs.get] 
    external metaKey : mouseEvent:(_) mouseEvent_like -> bool = "metaKey" [@@bs.get] 
    external button : mouseEvent:(_) mouseEvent_like -> int = "button" [@@bs.get] 
    external relatedTarget : mouseEvent:(_) mouseEvent_like -> eventTarget option = "relatedTarget" [@@bs.get] [@@bs.return null_to_opt]
    external which : mouseEvent:(_) mouseEvent_like -> int = "which" [@@bs.get] 
    external initMouseEvent : mouseEvent:(_) mouseEvent_like -> typeArg:string -> bubblesArg:Js.boolean -> cancelableArg:Js.boolean -> viewArg:(_) window_like Js.null -> detailArg:int -> screenXArg:int -> screenYArg:int -> clientXArg:int -> clientYArg:int -> ctrlKeyArg:Js.boolean -> altKeyArg:Js.boolean -> shiftKeyArg:Js.boolean -> metaKeyArg:Js.boolean -> buttonArg:int -> relatedTargetArg:(_) eventTarget_like Js.null -> unit = "initMouseEvent" [@@bs.send] 
    
    
end
 module Element = struct
    include Node
    
    external children : element:(_) element_like -> hTMLCollection = "children" [@@bs.get] 
    external firstElementChild : element:(_) element_like -> element option = "firstElementChild" [@@bs.get] [@@bs.return null_to_opt]
    external lastElementChild : element:(_) element_like -> element option = "lastElementChild" [@@bs.get] [@@bs.return null_to_opt]
    external childElementCount : element:(_) element_like -> int = "childElementCount" [@@bs.get] 
    external previousElementSibling : element:(_) element_like -> element option = "previousElementSibling" [@@bs.get] [@@bs.return null_to_opt]
    external nextElementSibling : element:(_) element_like -> element option = "nextElementSibling" [@@bs.get] [@@bs.return null_to_opt]
    external namespaceURI : element:(_) element_like -> string option = "namespaceURI" [@@bs.get] [@@bs.return null_to_opt]
    external prefix : element:(_) element_like -> string option = "prefix" [@@bs.get] [@@bs.return null_to_opt]
    external localName : element:(_) element_like -> string = "localName" [@@bs.get] 
    external tagName : element:(_) element_like -> string = "tagName" [@@bs.get] 
    external id : element:(_) element_like -> string = "id" [@@bs.get] 
    external setId : element:(_) element_like -> id:string -> unit = "id" [@@bs.set]
    external className : element:(_) element_like -> string = "className" [@@bs.get] 
    external setClassName : element:(_) element_like -> className:string -> unit = "className" [@@bs.set]
    external classList : element:(_) element_like -> dOMTokenList = "classList" [@@bs.get] 
    external attributes : element:(_) element_like -> namedNodeMap = "attributes" [@@bs.get] 
    external scrollTop : element:(_) element_like -> float = "scrollTop" [@@bs.get] 
    external setScrollTop : element:(_) element_like -> scrollTop:float -> unit = "scrollTop" [@@bs.set]
    external scrollLeft : element:(_) element_like -> float = "scrollLeft" [@@bs.get] 
    external setScrollLeft : element:(_) element_like -> scrollLeft:float -> unit = "scrollLeft" [@@bs.set]
    external scrollWidth : element:(_) element_like -> int = "scrollWidth" [@@bs.get] 
    external scrollHeight : element:(_) element_like -> int = "scrollHeight" [@@bs.get] 
    external clientTop : element:(_) element_like -> int = "clientTop" [@@bs.get] 
    external clientLeft : element:(_) element_like -> int = "clientLeft" [@@bs.get] 
    external clientWidth : element:(_) element_like -> int = "clientWidth" [@@bs.get] 
    external clientHeight : element:(_) element_like -> int = "clientHeight" [@@bs.get] 
    external innerHTML : element:(_) element_like -> string = "innerHTML" [@@bs.get] 
    external setInnerHTML : element:(_) element_like -> innerHTML:string -> unit = "innerHTML" [@@bs.set]
    external outerHTML : element:(_) element_like -> string = "outerHTML" [@@bs.get] 
    external setOuterHTML : element:(_) element_like -> outerHTML:string -> unit = "outerHTML" [@@bs.set]
    external after : element:(_) element_like -> ((_) element_like, unit, ('a733)) variadic_func = "after" [@@bs.get]
    external append : element:(_) element_like -> ((_) element_like, unit, ('a734)) variadic_func = "append" [@@bs.get]
    external before : element:(_) element_like -> ((_) element_like, unit, ('a735)) variadic_func = "before" [@@bs.get]
    external closest : element:(_) element_like -> selectors:string -> element option = "closest" [@@bs.send] [@@bs.return null_to_opt]
    external enterFormalActivationState : element:(_) element_like -> unit = "enterFormalActivationState" [@@bs.send] 
    external exitFormalActivationState : element:(_) element_like -> unit = "exitFormalActivationState" [@@bs.send] 
    external getAttribute : element:(_) element_like -> name:string -> string option = "getAttribute" [@@bs.send] [@@bs.return null_to_opt]
    external getAttributeNS : element:(_) element_like -> namespace:string Js.null -> localName:string -> string option = "getAttributeNS" [@@bs.send] [@@bs.return null_to_opt]
    external getAttributeNames : element:(_) element_like -> string array = "getAttributeNames" [@@bs.send] 
    external getAttributeNode : element:(_) element_like -> name:string -> attr option = "getAttributeNode" [@@bs.send] [@@bs.return null_to_opt]
    external getAttributeNodeNS : element:(_) element_like -> namespace:string Js.null -> localName:string -> attr option = "getAttributeNodeNS" [@@bs.send] [@@bs.return null_to_opt]
    external getBoundingClientRect : element:(_) element_like -> dOMRect = "getBoundingClientRect" [@@bs.send] 
    external getClientRects : element:(_) element_like -> dOMRect array = "getClientRects" [@@bs.send] 
    external getElementsByClassName : element:(_) element_like -> classNames:string -> hTMLCollection = "getElementsByClassName" [@@bs.send] 
    external getElementsByTagName : element:(_) element_like -> localName:string -> hTMLCollection = "getElementsByTagName" [@@bs.send] 
    external getElementsByTagNameNS : element:(_) element_like -> namespace:string Js.null -> localName:string -> hTMLCollection = "getElementsByTagNameNS" [@@bs.send] 
    external hasAttribute : element:(_) element_like -> name:string -> bool = "hasAttribute" [@@bs.send] 
    external hasAttributeNS : element:(_) element_like -> namespace:string Js.null -> localName:string -> bool = "hasAttributeNS" [@@bs.send] 
    external hasAttributes : element:(_) element_like -> bool = "hasAttributes" [@@bs.send] 
    external insertAdjacentElement : element:(_) element_like -> where_:string -> element:(_) element_like -> element option = "insertAdjacentElement" [@@bs.send] [@@bs.return null_to_opt]
    external insertAdjacentHTML : element:(_) element_like -> position:string -> html:string -> unit = "insertAdjacentHTML" [@@bs.send] 
    external insertAdjacentText : element:(_) element_like -> where_:string -> data:string -> unit = "insertAdjacentText" [@@bs.send] 
    external matches : element:(_) element_like -> selectors:string -> bool = "matches" [@@bs.send] 
    external prepend : element:(_) element_like -> ((_) element_like, unit, ('a736)) variadic_func = "prepend" [@@bs.get]
    external querySelector : element:(_) element_like -> selectors:string -> element option = "querySelector" [@@bs.send] [@@bs.return null_to_opt]
    external querySelectorAll : element:(_) element_like -> selectors:string -> nodeList = "querySelectorAll" [@@bs.send] 
    external remove : element:(_) element_like -> unit = "remove" [@@bs.send] 
    external removeAttribute : element:(_) element_like -> name:string -> unit = "removeAttribute" [@@bs.send] 
    external removeAttributeNS : element:(_) element_like -> namespace:string Js.null -> localName:string -> unit = "removeAttributeNS" [@@bs.send] 
    external removeAttributeNode : element:(_) element_like -> oldAttr:(_) attr_like -> attr = "removeAttributeNode" [@@bs.send] 
    external replaceWith : element:(_) element_like -> ((_) element_like, unit, ('a737)) variadic_func = "replaceWith" [@@bs.get]
    external requestFullscreen : element:(_) element_like -> unit Js.Promise.t = "requestFullscreen" [@@bs.send] 
    external scroll : element:(_) element_like -> x:float -> y:float -> unit = "scroll" [@@bs.send] 
    external scrollBy : element:(_) element_like -> x:float -> y:float -> unit = "scrollBy" [@@bs.send] 
    external scrollTo : element:(_) element_like -> x:float -> y:float -> unit = "scrollTo" [@@bs.send] 
    external setAttribute : element:(_) element_like -> name:string -> value:string -> unit = "setAttribute" [@@bs.send] 
    external setAttributeNS : element:(_) element_like -> namespace:string Js.null -> name:string -> value:string -> unit = "setAttributeNS" [@@bs.send] 
    external setAttributeNode : element:(_) element_like -> attr:(_) attr_like -> attr option = "setAttributeNode" [@@bs.send] [@@bs.return null_to_opt]
    external setAttributeNodeNS : element:(_) element_like -> attr:(_) attr_like -> attr option = "setAttributeNodeNS" [@@bs.send] [@@bs.return null_to_opt]
    external webkitMatchesSelector : element:(_) element_like -> selectors:string -> bool = "webkitMatchesSelector" [@@bs.send] 
    
    let after ~element ~nodes =
      let func = after element in
      let args = to_arg nodes in
      apply func element args
    
    let after ~element ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = after ~element ~nodes in
      return
    
    let append ~element ~nodes =
      let func = append element in
      let args = to_arg nodes in
      apply func element args
    
    let append ~element ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = append ~element ~nodes in
      return
    
    let before ~element ~nodes =
      let func = before element in
      let args = to_arg nodes in
      apply func element args
    
    let before ~element ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = before ~element ~nodes in
      return
    
    let prepend ~element ~nodes =
      let func = prepend element in
      let args = to_arg nodes in
      apply func element args
    
    let prepend ~element ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = prepend ~element ~nodes in
      return
    
    let replaceWith ~element ~nodes =
      let func = replaceWith element in
      let args = to_arg nodes in
      apply func element args
    
    let replaceWith ~element ~nodes =
      let conv_nodes = function
        | `Node (x: (_) node_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let conv_nodes = access_array conv_nodes in
      let nodes = conv_nodes nodes in
      let return = replaceWith ~element ~nodes in
      return
    
end
 module FocusEvent = struct
    include UIEvent
    
    external relatedTarget : focusEvent:(_) focusEvent_like -> eventTarget option = "relatedTarget" [@@bs.get] [@@bs.return null_to_opt]
    
    
end
 module Window = struct
    include GlobalScope
    
    external localStorage : window:(_) window_like -> storage = "localStorage" [@@bs.get] 
    external sessionStorage : window:(_) window_like -> storage = "sessionStorage" [@@bs.get] 
    external onafterprint : window:(_) window_like -> (event -> 'a738 [@bs]) option = "onafterprint" [@@bs.get] [@@bs.return null_to_opt]
    external setOnafterprint : window:(_) window_like -> onafterprint:(event -> 'a739 [@bs]) Js.null -> unit = "onafterprint" [@@bs.set]
    external onbeforeprint : window:(_) window_like -> (event -> 'a740 [@bs]) option = "onbeforeprint" [@@bs.get] [@@bs.return null_to_opt]
    external setOnbeforeprint : window:(_) window_like -> onbeforeprint:(event -> 'a741 [@bs]) Js.null -> unit = "onbeforeprint" [@@bs.set]
    external onbeforeunload : window:(_) window_like -> (event -> string Js.null [@bs]) option = "onbeforeunload" [@@bs.get] [@@bs.return null_to_opt]
    external setOnbeforeunload : window:(_) window_like -> onbeforeunload:(event -> string Js.null [@bs]) Js.null -> unit = "onbeforeunload" [@@bs.set]
    external onhashchange : window:(_) window_like -> (event -> 'a742 [@bs]) option = "onhashchange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnhashchange : window:(_) window_like -> onhashchange:(event -> 'a743 [@bs]) Js.null -> unit = "onhashchange" [@@bs.set]
    external onlanguagechange : window:(_) window_like -> (event -> 'a744 [@bs]) option = "onlanguagechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnlanguagechange : window:(_) window_like -> onlanguagechange:(event -> 'a745 [@bs]) Js.null -> unit = "onlanguagechange" [@@bs.set]
    external onmessage : window:(_) window_like -> (event -> 'a746 [@bs]) option = "onmessage" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmessage : window:(_) window_like -> onmessage:(event -> 'a747 [@bs]) Js.null -> unit = "onmessage" [@@bs.set]
    external onoffline : window:(_) window_like -> (event -> 'a748 [@bs]) option = "onoffline" [@@bs.get] [@@bs.return null_to_opt]
    external setOnoffline : window:(_) window_like -> onoffline:(event -> 'a749 [@bs]) Js.null -> unit = "onoffline" [@@bs.set]
    external ononline : window:(_) window_like -> (event -> 'a750 [@bs]) option = "ononline" [@@bs.get] [@@bs.return null_to_opt]
    external setOnonline : window:(_) window_like -> ononline:(event -> 'a751 [@bs]) Js.null -> unit = "ononline" [@@bs.set]
    external onpagehide : window:(_) window_like -> (event -> 'a752 [@bs]) option = "onpagehide" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpagehide : window:(_) window_like -> onpagehide:(event -> 'a753 [@bs]) Js.null -> unit = "onpagehide" [@@bs.set]
    external onpageshow : window:(_) window_like -> (event -> 'a754 [@bs]) option = "onpageshow" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpageshow : window:(_) window_like -> onpageshow:(event -> 'a755 [@bs]) Js.null -> unit = "onpageshow" [@@bs.set]
    external onpopstate : window:(_) window_like -> (event -> 'a756 [@bs]) option = "onpopstate" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpopstate : window:(_) window_like -> onpopstate:(event -> 'a757 [@bs]) Js.null -> unit = "onpopstate" [@@bs.set]
    external onrejectionhandled : window:(_) window_like -> (event -> 'a758 [@bs]) option = "onrejectionhandled" [@@bs.get] [@@bs.return null_to_opt]
    external setOnrejectionhandled : window:(_) window_like -> onrejectionhandled:(event -> 'a759 [@bs]) Js.null -> unit = "onrejectionhandled" [@@bs.set]
    external onstorage : window:(_) window_like -> (event -> 'a760 [@bs]) option = "onstorage" [@@bs.get] [@@bs.return null_to_opt]
    external setOnstorage : window:(_) window_like -> onstorage:(event -> 'a761 [@bs]) Js.null -> unit = "onstorage" [@@bs.set]
    external onunhandledrejection : window:(_) window_like -> (event -> 'a762 [@bs]) option = "onunhandledrejection" [@@bs.get] [@@bs.return null_to_opt]
    external setOnunhandledrejection : window:(_) window_like -> onunhandledrejection:(event -> 'a763 [@bs]) Js.null -> unit = "onunhandledrejection" [@@bs.set]
    external onunload : window:(_) window_like -> (event -> 'a764 [@bs]) option = "onunload" [@@bs.get] [@@bs.return null_to_opt]
    external setOnunload : window:(_) window_like -> onunload:(event -> 'a765 [@bs]) Js.null -> unit = "onunload" [@@bs.set]
    external onabort : window:(_) window_like -> (event -> 'a766 [@bs]) option = "onabort" [@@bs.get] [@@bs.return null_to_opt]
    external setOnabort : window:(_) window_like -> onabort:(event -> 'a767 [@bs]) Js.null -> unit = "onabort" [@@bs.set]
    external onblur : window:(_) window_like -> (event -> 'a768 [@bs]) option = "onblur" [@@bs.get] [@@bs.return null_to_opt]
    external setOnblur : window:(_) window_like -> onblur:(event -> 'a769 [@bs]) Js.null -> unit = "onblur" [@@bs.set]
    external oncancel : window:(_) window_like -> (event -> 'a770 [@bs]) option = "oncancel" [@@bs.get] [@@bs.return null_to_opt]
    external setOncancel : window:(_) window_like -> oncancel:(event -> 'a771 [@bs]) Js.null -> unit = "oncancel" [@@bs.set]
    external oncanplay : window:(_) window_like -> (event -> 'a772 [@bs]) option = "oncanplay" [@@bs.get] [@@bs.return null_to_opt]
    external setOncanplay : window:(_) window_like -> oncanplay:(event -> 'a773 [@bs]) Js.null -> unit = "oncanplay" [@@bs.set]
    external oncanplaythrough : window:(_) window_like -> (event -> 'a774 [@bs]) option = "oncanplaythrough" [@@bs.get] [@@bs.return null_to_opt]
    external setOncanplaythrough : window:(_) window_like -> oncanplaythrough:(event -> 'a775 [@bs]) Js.null -> unit = "oncanplaythrough" [@@bs.set]
    external onchange : window:(_) window_like -> (event -> 'a776 [@bs]) option = "onchange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnchange : window:(_) window_like -> onchange:(event -> 'a777 [@bs]) Js.null -> unit = "onchange" [@@bs.set]
    external onclick : window:(_) window_like -> (event -> 'a778 [@bs]) option = "onclick" [@@bs.get] [@@bs.return null_to_opt]
    external setOnclick : window:(_) window_like -> onclick:(event -> 'a779 [@bs]) Js.null -> unit = "onclick" [@@bs.set]
    external onclose : window:(_) window_like -> (event -> 'a780 [@bs]) option = "onclose" [@@bs.get] [@@bs.return null_to_opt]
    external setOnclose : window:(_) window_like -> onclose:(event -> 'a781 [@bs]) Js.null -> unit = "onclose" [@@bs.set]
    external oncontextmenu : window:(_) window_like -> (event -> 'a782 [@bs]) option = "oncontextmenu" [@@bs.get] [@@bs.return null_to_opt]
    external setOncontextmenu : window:(_) window_like -> oncontextmenu:(event -> 'a783 [@bs]) Js.null -> unit = "oncontextmenu" [@@bs.set]
    external oncuechange : window:(_) window_like -> (event -> 'a784 [@bs]) option = "oncuechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOncuechange : window:(_) window_like -> oncuechange:(event -> 'a785 [@bs]) Js.null -> unit = "oncuechange" [@@bs.set]
    external ondblclick : window:(_) window_like -> (event -> 'a786 [@bs]) option = "ondblclick" [@@bs.get] [@@bs.return null_to_opt]
    external setOndblclick : window:(_) window_like -> ondblclick:(event -> 'a787 [@bs]) Js.null -> unit = "ondblclick" [@@bs.set]
    external ondrag : window:(_) window_like -> (event -> 'a788 [@bs]) option = "ondrag" [@@bs.get] [@@bs.return null_to_opt]
    external setOndrag : window:(_) window_like -> ondrag:(event -> 'a789 [@bs]) Js.null -> unit = "ondrag" [@@bs.set]
    external ondragend : window:(_) window_like -> (event -> 'a790 [@bs]) option = "ondragend" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragend : window:(_) window_like -> ondragend:(event -> 'a791 [@bs]) Js.null -> unit = "ondragend" [@@bs.set]
    external ondragenter : window:(_) window_like -> (event -> 'a792 [@bs]) option = "ondragenter" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragenter : window:(_) window_like -> ondragenter:(event -> 'a793 [@bs]) Js.null -> unit = "ondragenter" [@@bs.set]
    external ondragexit : window:(_) window_like -> (event -> 'a794 [@bs]) option = "ondragexit" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragexit : window:(_) window_like -> ondragexit:(event -> 'a795 [@bs]) Js.null -> unit = "ondragexit" [@@bs.set]
    external ondragleave : window:(_) window_like -> (event -> 'a796 [@bs]) option = "ondragleave" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragleave : window:(_) window_like -> ondragleave:(event -> 'a797 [@bs]) Js.null -> unit = "ondragleave" [@@bs.set]
    external ondragover : window:(_) window_like -> (event -> 'a798 [@bs]) option = "ondragover" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragover : window:(_) window_like -> ondragover:(event -> 'a799 [@bs]) Js.null -> unit = "ondragover" [@@bs.set]
    external ondragstart : window:(_) window_like -> (event -> 'a800 [@bs]) option = "ondragstart" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragstart : window:(_) window_like -> ondragstart:(event -> 'a801 [@bs]) Js.null -> unit = "ondragstart" [@@bs.set]
    external ondrop : window:(_) window_like -> (event -> 'a802 [@bs]) option = "ondrop" [@@bs.get] [@@bs.return null_to_opt]
    external setOndrop : window:(_) window_like -> ondrop:(event -> 'a803 [@bs]) Js.null -> unit = "ondrop" [@@bs.set]
    external ondurationchange : window:(_) window_like -> (event -> 'a804 [@bs]) option = "ondurationchange" [@@bs.get] [@@bs.return null_to_opt]
    external setOndurationchange : window:(_) window_like -> ondurationchange:(event -> 'a805 [@bs]) Js.null -> unit = "ondurationchange" [@@bs.set]
    external onemptied : window:(_) window_like -> (event -> 'a806 [@bs]) option = "onemptied" [@@bs.get] [@@bs.return null_to_opt]
    external setOnemptied : window:(_) window_like -> onemptied:(event -> 'a807 [@bs]) Js.null -> unit = "onemptied" [@@bs.set]
    external onended : window:(_) window_like -> (event -> 'a808 [@bs]) option = "onended" [@@bs.get] [@@bs.return null_to_opt]
    external setOnended : window:(_) window_like -> onended:(event -> 'a809 [@bs]) Js.null -> unit = "onended" [@@bs.set]
    external onerror : window:(_) window_like -> ('a810 -> string -> int -> int -> 'a811 -> 'a812 [@bs]) option = "onerror" [@@bs.get] [@@bs.return null_to_opt]
    external setOnerror : window:(_) window_like -> onerror:('a813 -> string -> int -> int -> 'a814 -> 'a815 [@bs]) Js.null -> unit = "onerror" [@@bs.set]
    external onfocus : window:(_) window_like -> (event -> 'a816 [@bs]) option = "onfocus" [@@bs.get] [@@bs.return null_to_opt]
    external setOnfocus : window:(_) window_like -> onfocus:(event -> 'a817 [@bs]) Js.null -> unit = "onfocus" [@@bs.set]
    external oninput : window:(_) window_like -> (event -> 'a818 [@bs]) option = "oninput" [@@bs.get] [@@bs.return null_to_opt]
    external setOninput : window:(_) window_like -> oninput:(event -> 'a819 [@bs]) Js.null -> unit = "oninput" [@@bs.set]
    external oninvalid : window:(_) window_like -> (event -> 'a820 [@bs]) option = "oninvalid" [@@bs.get] [@@bs.return null_to_opt]
    external setOninvalid : window:(_) window_like -> oninvalid:(event -> 'a821 [@bs]) Js.null -> unit = "oninvalid" [@@bs.set]
    external onkeydown : window:(_) window_like -> (event -> 'a822 [@bs]) option = "onkeydown" [@@bs.get] [@@bs.return null_to_opt]
    external setOnkeydown : window:(_) window_like -> onkeydown:(event -> 'a823 [@bs]) Js.null -> unit = "onkeydown" [@@bs.set]
    external onkeypress : window:(_) window_like -> (event -> 'a824 [@bs]) option = "onkeypress" [@@bs.get] [@@bs.return null_to_opt]
    external setOnkeypress : window:(_) window_like -> onkeypress:(event -> 'a825 [@bs]) Js.null -> unit = "onkeypress" [@@bs.set]
    external onkeyup : window:(_) window_like -> (event -> 'a826 [@bs]) option = "onkeyup" [@@bs.get] [@@bs.return null_to_opt]
    external setOnkeyup : window:(_) window_like -> onkeyup:(event -> 'a827 [@bs]) Js.null -> unit = "onkeyup" [@@bs.set]
    external onload : window:(_) window_like -> (event -> 'a828 [@bs]) option = "onload" [@@bs.get] [@@bs.return null_to_opt]
    external setOnload : window:(_) window_like -> onload:(event -> 'a829 [@bs]) Js.null -> unit = "onload" [@@bs.set]
    external onloadeddata : window:(_) window_like -> (event -> 'a830 [@bs]) option = "onloadeddata" [@@bs.get] [@@bs.return null_to_opt]
    external setOnloadeddata : window:(_) window_like -> onloadeddata:(event -> 'a831 [@bs]) Js.null -> unit = "onloadeddata" [@@bs.set]
    external onloadedmetadata : window:(_) window_like -> (event -> 'a832 [@bs]) option = "onloadedmetadata" [@@bs.get] [@@bs.return null_to_opt]
    external setOnloadedmetadata : window:(_) window_like -> onloadedmetadata:(event -> 'a833 [@bs]) Js.null -> unit = "onloadedmetadata" [@@bs.set]
    external onloadstart : window:(_) window_like -> (event -> 'a834 [@bs]) option = "onloadstart" [@@bs.get] [@@bs.return null_to_opt]
    external setOnloadstart : window:(_) window_like -> onloadstart:(event -> 'a835 [@bs]) Js.null -> unit = "onloadstart" [@@bs.set]
    external onmousedown : window:(_) window_like -> (event -> 'a836 [@bs]) option = "onmousedown" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmousedown : window:(_) window_like -> onmousedown:(event -> 'a837 [@bs]) Js.null -> unit = "onmousedown" [@@bs.set]
    external onmouseenter : window:(_) window_like -> (event -> 'a838 [@bs]) option = "onmouseenter" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseenter : window:(_) window_like -> onmouseenter:(event -> 'a839 [@bs]) Js.null -> unit = "onmouseenter" [@@bs.set]
    external onmouseleave : window:(_) window_like -> (event -> 'a840 [@bs]) option = "onmouseleave" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseleave : window:(_) window_like -> onmouseleave:(event -> 'a841 [@bs]) Js.null -> unit = "onmouseleave" [@@bs.set]
    external onmousemove : window:(_) window_like -> (event -> 'a842 [@bs]) option = "onmousemove" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmousemove : window:(_) window_like -> onmousemove:(event -> 'a843 [@bs]) Js.null -> unit = "onmousemove" [@@bs.set]
    external onmouseout : window:(_) window_like -> (event -> 'a844 [@bs]) option = "onmouseout" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseout : window:(_) window_like -> onmouseout:(event -> 'a845 [@bs]) Js.null -> unit = "onmouseout" [@@bs.set]
    external onmouseover : window:(_) window_like -> (event -> 'a846 [@bs]) option = "onmouseover" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseover : window:(_) window_like -> onmouseover:(event -> 'a847 [@bs]) Js.null -> unit = "onmouseover" [@@bs.set]
    external onmouseup : window:(_) window_like -> (event -> 'a848 [@bs]) option = "onmouseup" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseup : window:(_) window_like -> onmouseup:(event -> 'a849 [@bs]) Js.null -> unit = "onmouseup" [@@bs.set]
    external onwheel : window:(_) window_like -> (event -> 'a850 [@bs]) option = "onwheel" [@@bs.get] [@@bs.return null_to_opt]
    external setOnwheel : window:(_) window_like -> onwheel:(event -> 'a851 [@bs]) Js.null -> unit = "onwheel" [@@bs.set]
    external onpause : window:(_) window_like -> (event -> 'a852 [@bs]) option = "onpause" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpause : window:(_) window_like -> onpause:(event -> 'a853 [@bs]) Js.null -> unit = "onpause" [@@bs.set]
    external onplay : window:(_) window_like -> (event -> 'a854 [@bs]) option = "onplay" [@@bs.get] [@@bs.return null_to_opt]
    external setOnplay : window:(_) window_like -> onplay:(event -> 'a855 [@bs]) Js.null -> unit = "onplay" [@@bs.set]
    external onplaying : window:(_) window_like -> (event -> 'a856 [@bs]) option = "onplaying" [@@bs.get] [@@bs.return null_to_opt]
    external setOnplaying : window:(_) window_like -> onplaying:(event -> 'a857 [@bs]) Js.null -> unit = "onplaying" [@@bs.set]
    external onprogress : window:(_) window_like -> (event -> 'a858 [@bs]) option = "onprogress" [@@bs.get] [@@bs.return null_to_opt]
    external setOnprogress : window:(_) window_like -> onprogress:(event -> 'a859 [@bs]) Js.null -> unit = "onprogress" [@@bs.set]
    external onratechange : window:(_) window_like -> (event -> 'a860 [@bs]) option = "onratechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnratechange : window:(_) window_like -> onratechange:(event -> 'a861 [@bs]) Js.null -> unit = "onratechange" [@@bs.set]
    external onreset : window:(_) window_like -> (event -> 'a862 [@bs]) option = "onreset" [@@bs.get] [@@bs.return null_to_opt]
    external setOnreset : window:(_) window_like -> onreset:(event -> 'a863 [@bs]) Js.null -> unit = "onreset" [@@bs.set]
    external onresize : window:(_) window_like -> (event -> 'a864 [@bs]) option = "onresize" [@@bs.get] [@@bs.return null_to_opt]
    external setOnresize : window:(_) window_like -> onresize:(event -> 'a865 [@bs]) Js.null -> unit = "onresize" [@@bs.set]
    external onscroll : window:(_) window_like -> (event -> 'a866 [@bs]) option = "onscroll" [@@bs.get] [@@bs.return null_to_opt]
    external setOnscroll : window:(_) window_like -> onscroll:(event -> 'a867 [@bs]) Js.null -> unit = "onscroll" [@@bs.set]
    external onseeked : window:(_) window_like -> (event -> 'a868 [@bs]) option = "onseeked" [@@bs.get] [@@bs.return null_to_opt]
    external setOnseeked : window:(_) window_like -> onseeked:(event -> 'a869 [@bs]) Js.null -> unit = "onseeked" [@@bs.set]
    external onseeking : window:(_) window_like -> (event -> 'a870 [@bs]) option = "onseeking" [@@bs.get] [@@bs.return null_to_opt]
    external setOnseeking : window:(_) window_like -> onseeking:(event -> 'a871 [@bs]) Js.null -> unit = "onseeking" [@@bs.set]
    external onselect : window:(_) window_like -> (event -> 'a872 [@bs]) option = "onselect" [@@bs.get] [@@bs.return null_to_opt]
    external setOnselect : window:(_) window_like -> onselect:(event -> 'a873 [@bs]) Js.null -> unit = "onselect" [@@bs.set]
    external onshow : window:(_) window_like -> (event -> 'a874 [@bs]) option = "onshow" [@@bs.get] [@@bs.return null_to_opt]
    external setOnshow : window:(_) window_like -> onshow:(event -> 'a875 [@bs]) Js.null -> unit = "onshow" [@@bs.set]
    external onstalled : window:(_) window_like -> (event -> 'a876 [@bs]) option = "onstalled" [@@bs.get] [@@bs.return null_to_opt]
    external setOnstalled : window:(_) window_like -> onstalled:(event -> 'a877 [@bs]) Js.null -> unit = "onstalled" [@@bs.set]
    external onsubmit : window:(_) window_like -> (event -> 'a878 [@bs]) option = "onsubmit" [@@bs.get] [@@bs.return null_to_opt]
    external setOnsubmit : window:(_) window_like -> onsubmit:(event -> 'a879 [@bs]) Js.null -> unit = "onsubmit" [@@bs.set]
    external onsuspend : window:(_) window_like -> (event -> 'a880 [@bs]) option = "onsuspend" [@@bs.get] [@@bs.return null_to_opt]
    external setOnsuspend : window:(_) window_like -> onsuspend:(event -> 'a881 [@bs]) Js.null -> unit = "onsuspend" [@@bs.set]
    external ontimeupdate : window:(_) window_like -> (event -> 'a882 [@bs]) option = "ontimeupdate" [@@bs.get] [@@bs.return null_to_opt]
    external setOntimeupdate : window:(_) window_like -> ontimeupdate:(event -> 'a883 [@bs]) Js.null -> unit = "ontimeupdate" [@@bs.set]
    external ontoggle : window:(_) window_like -> (event -> 'a884 [@bs]) option = "ontoggle" [@@bs.get] [@@bs.return null_to_opt]
    external setOntoggle : window:(_) window_like -> ontoggle:(event -> 'a885 [@bs]) Js.null -> unit = "ontoggle" [@@bs.set]
    external onvolumechange : window:(_) window_like -> (event -> 'a886 [@bs]) option = "onvolumechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnvolumechange : window:(_) window_like -> onvolumechange:(event -> 'a887 [@bs]) Js.null -> unit = "onvolumechange" [@@bs.set]
    external onwaiting : window:(_) window_like -> (event -> 'a888 [@bs]) option = "onwaiting" [@@bs.get] [@@bs.return null_to_opt]
    external setOnwaiting : window:(_) window_like -> onwaiting:(event -> 'a889 [@bs]) Js.null -> unit = "onwaiting" [@@bs.set]
    external ontransitionend : window:(_) window_like -> (event -> 'a890 [@bs]) option = "ontransitionend" [@@bs.get] [@@bs.return null_to_opt]
    external setOntransitionend : window:(_) window_like -> ontransitionend:(event -> 'a891 [@bs]) Js.null -> unit = "ontransitionend" [@@bs.set]
    external crypto : window:(_) window_like -> crypto = "crypto" [@@bs.get] 
    external window : window:(_) window_like -> windowProxy = "window" [@@bs.get] 
    external self : window:(_) window_like -> windowProxy = "self" [@@bs.get] 
    external document : window:(_) window_like -> document = "document" [@@bs.get] 
    external location : window:(_) window_like -> location = "location" [@@bs.get] 
    external history : window:(_) window_like -> history = "history" [@@bs.get] 
    external customElements : window:(_) window_like -> customElementRegistry = "customElements" [@@bs.get] 
    external status : window:(_) window_like -> string = "status" [@@bs.get] 
    external setStatus : window:(_) window_like -> status:string -> unit = "status" [@@bs.set]
    external closed_ : window:(_) window_like -> bool = "closed" [@@bs.get] 
    external frames : window:(_) window_like -> windowProxy = "frames" [@@bs.get] 
    external top : window:(_) window_like -> windowProxy option = "top" [@@bs.get] [@@bs.return null_to_opt]
    external parent : window:(_) window_like -> windowProxy option = "parent" [@@bs.get] [@@bs.return null_to_opt]
    external frameElement : window:(_) window_like -> element option = "frameElement" [@@bs.get] [@@bs.return null_to_opt]
    external navigator : window:(_) window_like -> navigator = "navigator" [@@bs.get] 
    external performance : window:(_) window_like -> performance = "performance" [@@bs.get] 
    external screen : window:(_) window_like -> screen = "screen" [@@bs.get] 
    external innerWidth : window:(_) window_like -> int = "innerWidth" [@@bs.get] 
    external innerHeight : window:(_) window_like -> int = "innerHeight" [@@bs.get] 
    external scrollX : window:(_) window_like -> int = "scrollX" [@@bs.get] 
    external pageXOffset : window:(_) window_like -> int = "pageXOffset" [@@bs.get] 
    external scrollY : window:(_) window_like -> int = "scrollY" [@@bs.get] 
    external pageYOffset : window:(_) window_like -> int = "pageYOffset" [@@bs.get] 
    external screenX : window:(_) window_like -> int = "screenX" [@@bs.get] 
    external screenY : window:(_) window_like -> int = "screenY" [@@bs.get] 
    external outerWidth : window:(_) window_like -> int = "outerWidth" [@@bs.get] 
    external outerHeight : window:(_) window_like -> int = "outerHeight" [@@bs.get] 
    external devicePixelRatio : window:(_) window_like -> float = "devicePixelRatio" [@@bs.get] 
    external testRunner : window:(_) window_like -> testRunner = "testRunner" [@@bs.get] 
    external paintWorklet : window:(_) window_like -> worklet = "paintWorklet" [@@bs.get] 
    external alert : window:(_) window_like -> message:string -> unit = "alert" [@@bs.send] 
    external atob : window:(_) window_like -> atob:string -> string = "atob" [@@bs.send] 
    external btoa : window:(_) window_like -> btoa:string -> string = "btoa" [@@bs.send] 
    external cancelAnimationFrame : window:(_) window_like -> handle:int -> unit = "cancelAnimationFrame" [@@bs.send] 
    external captureEvents : window:(_) window_like -> unit = "captureEvents" [@@bs.send] 
    external clearInterval : window:(_) window_like -> ?handle:int Js.undefined -> unit = "clearInterval" [@@bs.send] 
    external clearTimeout : window:(_) window_like -> ?handle:int Js.undefined -> unit = "clearTimeout" [@@bs.send] 
    external close : window:(_) window_like -> unit = "close" [@@bs.send] 
    external debug : window:(_) window_like -> arg:string -> unit = "debug" [@@bs.send] 
    external fetch : window:(_) window_like -> input:'a892 -> ?init:(_) requestInit_like Js.undefined -> response Js.Promise.t = "fetch" [@@bs.send] 
    external gc : window:(_) window_like -> unit = "gc" [@@bs.send] 
    external getComputedStyle : window:(_) window_like -> elt:(_) element_like -> ?pseudoElt:string Js.undefined -> cSSStyleDeclaration = "getComputedStyle" [@@bs.send] 
    external matchMedia : window:(_) window_like -> query:string -> mediaQueryList = "matchMedia" [@@bs.send] 
    external moveBy : window:(_) window_like -> x:int -> y:int -> unit = "moveBy" [@@bs.send] 
    external moveTo : window:(_) window_like -> x:int -> y:int -> unit = "moveTo" [@@bs.send] 
    external openURLInDefaultBrowser : window:(_) window_like -> href:string -> unit = "openURLInDefaultBrowser" [@@bs.send] 
    external postMessage : window:(_) window_like -> message:'a893 -> targetOrigin:string -> unit = "postMessage" [@@bs.send] 
    external releaseEvents : window:(_) window_like -> unit = "releaseEvents" [@@bs.send] 
    external requestAnimationFrame : window:(_) window_like -> callback:(float -> unit [@bs]) -> int = "requestAnimationFrame" [@@bs.send] 
    external resizeBy : window:(_) window_like -> x:int -> y:int -> unit = "resizeBy" [@@bs.send] 
    external resizeTo : window:(_) window_like -> x:int -> y:int -> unit = "resizeTo" [@@bs.send] 
    external scroll : window:(_) window_like -> x:float -> y:float -> unit = "scroll" [@@bs.send] 
    external scrollBy : window:(_) window_like -> x:float -> y:float -> unit = "scrollBy" [@@bs.send] 
    external scrollTo : window:(_) window_like -> x:float -> y:float -> unit = "scrollTo" [@@bs.send] 
    external setInterval : window:(_) window_like -> ((_) window_like, int, ('a894*(int Js.undefined*('a895)))) variadic_func = "setInterval" [@@bs.get]
    external setTimeout : window:(_) window_like -> ((_) window_like, int, ('a896*(int Js.undefined*('a897)))) variadic_func = "setTimeout" [@@bs.get]
    external trap : window:(_) window_like -> unit = "trap" [@@bs.send] 
    external webdriverCallback : window:(_) window_like -> ?result:'a898 Js.undefined -> unit = "webdriverCallback" [@@bs.send] 
    external webdriverTimeout : window:(_) window_like -> unit = "webdriverTimeout" [@@bs.send] 
    
    let clearInterval ~window ?handle () =
      let conv_handle = Js_undefined.from_opt in
      let handle = conv_handle handle in
      clearInterval ~window ~handle
    
    let clearTimeout ~window ?handle () =
      let conv_handle = Js_undefined.from_opt in
      let handle = conv_handle handle in
      clearTimeout ~window ~handle
    
    let fetch ~window ~input ~init =
      let conv_input = function
        | `Request (x: (_) request_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let input = conv_input input in
      let return = fetch ~window ~input ~init in
      return
    
    let fetch ~window ~input ?init () =
      let conv_init = Js_undefined.from_opt in
      let init = conv_init init in
      fetch ~window ~input ~init
    
    let getComputedStyle ~window ~elt ?pseudoElt () =
      let conv_pseudoElt = Js_undefined.from_opt in
      let pseudoElt = conv_pseudoElt pseudoElt in
      getComputedStyle ~window ~elt ~pseudoElt
    
    let setInterval ~window ~handler ~timeout ~arguments =
      let func = setInterval window in
      let args = to_arg arguments in
      let args = unsafe_add args timeout in
      let args = unsafe_add args handler in
      apply func window args
    
    let setInterval ~window ~handler ~timeout ~arguments =
      let conv_handler = function
        | `Callback (x: ('a899 -> 'a900 [@bs])) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let handler = conv_handler handler in
      let return = setInterval ~window ~handler ~timeout ~arguments in
      return
    
    let setInterval ~window ~handler ?timeout ~arguments () =
      let conv_timeout = Js_undefined.from_opt in
      let timeout = conv_timeout timeout in
      setInterval ~window ~handler ~timeout ~arguments
    
    let setTimeout ~window ~handler ~timeout ~arguments =
      let func = setTimeout window in
      let args = to_arg arguments in
      let args = unsafe_add args timeout in
      let args = unsafe_add args handler in
      apply func window args
    
    let setTimeout ~window ~handler ~timeout ~arguments =
      let conv_handler = function
        | `Callback (x: ('a901 -> 'a902 [@bs])) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let handler = conv_handler handler in
      let return = setTimeout ~window ~handler ~timeout ~arguments in
      return
    
    let setTimeout ~window ~handler ?timeout ~arguments () =
      let conv_timeout = Js_undefined.from_opt in
      let timeout = conv_timeout timeout in
      setTimeout ~window ~handler ~timeout ~arguments
    
    let webdriverCallback ~window ?result () =
      let conv_result = Js_undefined.from_opt in
      let result = conv_result result in
      webdriverCallback ~window ~result
    
end
 module WorkerGlobalScope = struct
    include GlobalScope
    
    external crypto : workerGlobalScope:(_) workerGlobalScope_like -> crypto = "crypto" [@@bs.get] 
    external self : workerGlobalScope:(_) workerGlobalScope_like -> workerGlobalScope = "self" [@@bs.get] 
    external location : workerGlobalScope:(_) workerGlobalScope_like -> workerLocation = "location" [@@bs.get] 
    external onerror : workerGlobalScope:(_) workerGlobalScope_like -> ('a903 -> string -> int -> int -> 'a904 -> 'a905 [@bs]) option = "onerror" [@@bs.get] [@@bs.return null_to_opt]
    external setOnerror : workerGlobalScope:(_) workerGlobalScope_like -> onerror:('a906 -> string -> int -> int -> 'a907 -> 'a908 [@bs]) Js.null -> unit = "onerror" [@@bs.set]
    external navigator : workerGlobalScope:(_) workerGlobalScope_like -> workerNavigator = "navigator" [@@bs.get] 
    external atob : workerGlobalScope:(_) workerGlobalScope_like -> atob:string -> string = "atob" [@@bs.send] 
    external btoa : workerGlobalScope:(_) workerGlobalScope_like -> btoa:string -> string = "btoa" [@@bs.send] 
    external clearInterval : workerGlobalScope:(_) workerGlobalScope_like -> ?handle:int Js.undefined -> unit = "clearInterval" [@@bs.send] 
    external clearTimeout : workerGlobalScope:(_) workerGlobalScope_like -> ?handle:int Js.undefined -> unit = "clearTimeout" [@@bs.send] 
    external fetch : workerGlobalScope:(_) workerGlobalScope_like -> input:'a909 -> ?init:(_) requestInit_like Js.undefined -> response Js.Promise.t = "fetch" [@@bs.send] 
    external importScripts : workerGlobalScope:(_) workerGlobalScope_like -> ((_) workerGlobalScope_like, unit, (string)) variadic_func = "importScripts" [@@bs.get]
    external setInterval : workerGlobalScope:(_) workerGlobalScope_like -> ((_) workerGlobalScope_like, int, ('a910*(int Js.undefined*('a911)))) variadic_func = "setInterval" [@@bs.get]
    external setTimeout : workerGlobalScope:(_) workerGlobalScope_like -> ((_) workerGlobalScope_like, int, ('a912*(int Js.undefined*('a913)))) variadic_func = "setTimeout" [@@bs.get]
    
    let clearInterval ~workerGlobalScope ?handle () =
      let conv_handle = Js_undefined.from_opt in
      let handle = conv_handle handle in
      clearInterval ~workerGlobalScope ~handle
    
    let clearTimeout ~workerGlobalScope ?handle () =
      let conv_handle = Js_undefined.from_opt in
      let handle = conv_handle handle in
      clearTimeout ~workerGlobalScope ~handle
    
    let fetch ~workerGlobalScope ~input ~init =
      let conv_input = function
        | `Request (x: (_) request_like) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let input = conv_input input in
      let return = fetch ~workerGlobalScope ~input ~init in
      return
    
    let fetch ~workerGlobalScope ~input ?init () =
      let conv_init = Js_undefined.from_opt in
      let init = conv_init init in
      fetch ~workerGlobalScope ~input ~init
    
    let importScripts ~workerGlobalScope ~urls =
      let func = importScripts workerGlobalScope in
      let args = to_arg urls in
      apply func workerGlobalScope args
    
    let setInterval ~workerGlobalScope ~handler ~timeout ~arguments =
      let func = setInterval workerGlobalScope in
      let args = to_arg arguments in
      let args = unsafe_add args timeout in
      let args = unsafe_add args handler in
      apply func workerGlobalScope args
    
    let setInterval ~workerGlobalScope ~handler ~timeout ~arguments =
      let conv_handler = function
        | `Callback (x: ('a914 -> 'a915 [@bs])) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let handler = conv_handler handler in
      let return = setInterval ~workerGlobalScope ~handler ~timeout ~arguments in
      return
    
    let setInterval ~workerGlobalScope ~handler ?timeout ~arguments () =
      let conv_timeout = Js_undefined.from_opt in
      let timeout = conv_timeout timeout in
      setInterval ~workerGlobalScope ~handler ~timeout ~arguments
    
    let setTimeout ~workerGlobalScope ~handler ~timeout ~arguments =
      let func = setTimeout workerGlobalScope in
      let args = to_arg arguments in
      let args = unsafe_add args timeout in
      let args = unsafe_add args handler in
      apply func workerGlobalScope args
    
    let setTimeout ~workerGlobalScope ~handler ~timeout ~arguments =
      let conv_handler = function
        | `Callback (x: ('a916 -> 'a917 [@bs])) -> Obj.magic x
        | `String (x: string) -> Obj.magic x
         in
      let handler = conv_handler handler in
      let return = setTimeout ~workerGlobalScope ~handler ~timeout ~arguments in
      return
    
    let setTimeout ~workerGlobalScope ~handler ?timeout ~arguments () =
      let conv_timeout = Js_undefined.from_opt in
      let timeout = conv_timeout timeout in
      setTimeout ~workerGlobalScope ~handler ~timeout ~arguments
    
end
 module WorkletGlobalScope = struct
    include GlobalScope
    
    
    
    
end
 module ExtendableMessageEventInit = struct
    include ExtendableEventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?data:'a918 -> ?origin:string -> ?lastEventId:string -> unit -> extendableMessageEventInit = "" [@@bs.obj]
    external data : extendableMessageEventInit:(_) extendableMessageEventInit_like -> 'a919 = "data" [@@bs.get] 
    external setData : extendableMessageEventInit:(_) extendableMessageEventInit_like -> data:'a920 -> unit = "data" [@@bs.set]
    external origin : extendableMessageEventInit:(_) extendableMessageEventInit_like -> string = "origin" [@@bs.get] 
    external setOrigin : extendableMessageEventInit:(_) extendableMessageEventInit_like -> origin:string -> unit = "origin" [@@bs.set]
    external lastEventId : extendableMessageEventInit:(_) extendableMessageEventInit_like -> string = "lastEventId" [@@bs.get] 
    external setLastEventId : extendableMessageEventInit:(_) extendableMessageEventInit_like -> lastEventId:string -> unit = "lastEventId" [@@bs.set]
    
    
end
 module EventModifierInit = struct
    include UIEventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?view:(_) window_like Js.null -> ?detail:int -> ?ctrlKey:Js.boolean -> ?shiftKey:Js.boolean -> ?altKey:Js.boolean -> ?metaKey:Js.boolean -> ?keyModifierStateAltGraph:Js.boolean -> ?keyModifierStateCapsLock:Js.boolean -> ?keyModifierStateFn:Js.boolean -> ?keyModifierStateFnLock:Js.boolean -> ?keyModifierStateHyper:Js.boolean -> ?keyModifierStateNumLock:Js.boolean -> ?keyModifierStateOS:Js.boolean -> ?keyModifierStateScrollLock:Js.boolean -> ?keyModifierStateSuper:Js.boolean -> ?keyModifierStateSymbol:Js.boolean -> ?keyModifierStateSymbolLock:Js.boolean -> unit -> eventModifierInit = "" [@@bs.obj]
    external ctrlKey : eventModifierInit:(_) eventModifierInit_like -> bool = "ctrlKey" [@@bs.get] 
    external setCtrlKey : eventModifierInit:(_) eventModifierInit_like -> ctrlKey:Js.boolean -> unit = "ctrlKey" [@@bs.set]
    external shiftKey : eventModifierInit:(_) eventModifierInit_like -> bool = "shiftKey" [@@bs.get] 
    external setShiftKey : eventModifierInit:(_) eventModifierInit_like -> shiftKey:Js.boolean -> unit = "shiftKey" [@@bs.set]
    external altKey : eventModifierInit:(_) eventModifierInit_like -> bool = "altKey" [@@bs.get] 
    external setAltKey : eventModifierInit:(_) eventModifierInit_like -> altKey:Js.boolean -> unit = "altKey" [@@bs.set]
    external metaKey : eventModifierInit:(_) eventModifierInit_like -> bool = "metaKey" [@@bs.get] 
    external setMetaKey : eventModifierInit:(_) eventModifierInit_like -> metaKey:Js.boolean -> unit = "metaKey" [@@bs.set]
    external keyModifierStateAltGraph : eventModifierInit:(_) eventModifierInit_like -> bool = "keyModifierStateAltGraph" [@@bs.get] 
    external setKeyModifierStateAltGraph : eventModifierInit:(_) eventModifierInit_like -> keyModifierStateAltGraph:Js.boolean -> unit = "keyModifierStateAltGraph" [@@bs.set]
    external keyModifierStateCapsLock : eventModifierInit:(_) eventModifierInit_like -> bool = "keyModifierStateCapsLock" [@@bs.get] 
    external setKeyModifierStateCapsLock : eventModifierInit:(_) eventModifierInit_like -> keyModifierStateCapsLock:Js.boolean -> unit = "keyModifierStateCapsLock" [@@bs.set]
    external keyModifierStateFn : eventModifierInit:(_) eventModifierInit_like -> bool = "keyModifierStateFn" [@@bs.get] 
    external setKeyModifierStateFn : eventModifierInit:(_) eventModifierInit_like -> keyModifierStateFn:Js.boolean -> unit = "keyModifierStateFn" [@@bs.set]
    external keyModifierStateFnLock : eventModifierInit:(_) eventModifierInit_like -> bool = "keyModifierStateFnLock" [@@bs.get] 
    external setKeyModifierStateFnLock : eventModifierInit:(_) eventModifierInit_like -> keyModifierStateFnLock:Js.boolean -> unit = "keyModifierStateFnLock" [@@bs.set]
    external keyModifierStateHyper : eventModifierInit:(_) eventModifierInit_like -> bool = "keyModifierStateHyper" [@@bs.get] 
    external setKeyModifierStateHyper : eventModifierInit:(_) eventModifierInit_like -> keyModifierStateHyper:Js.boolean -> unit = "keyModifierStateHyper" [@@bs.set]
    external keyModifierStateNumLock : eventModifierInit:(_) eventModifierInit_like -> bool = "keyModifierStateNumLock" [@@bs.get] 
    external setKeyModifierStateNumLock : eventModifierInit:(_) eventModifierInit_like -> keyModifierStateNumLock:Js.boolean -> unit = "keyModifierStateNumLock" [@@bs.set]
    external keyModifierStateOS : eventModifierInit:(_) eventModifierInit_like -> bool = "keyModifierStateOS" [@@bs.get] 
    external setKeyModifierStateOS : eventModifierInit:(_) eventModifierInit_like -> keyModifierStateOS:Js.boolean -> unit = "keyModifierStateOS" [@@bs.set]
    external keyModifierStateScrollLock : eventModifierInit:(_) eventModifierInit_like -> bool = "keyModifierStateScrollLock" [@@bs.get] 
    external setKeyModifierStateScrollLock : eventModifierInit:(_) eventModifierInit_like -> keyModifierStateScrollLock:Js.boolean -> unit = "keyModifierStateScrollLock" [@@bs.set]
    external keyModifierStateSuper : eventModifierInit:(_) eventModifierInit_like -> bool = "keyModifierStateSuper" [@@bs.get] 
    external setKeyModifierStateSuper : eventModifierInit:(_) eventModifierInit_like -> keyModifierStateSuper:Js.boolean -> unit = "keyModifierStateSuper" [@@bs.set]
    external keyModifierStateSymbol : eventModifierInit:(_) eventModifierInit_like -> bool = "keyModifierStateSymbol" [@@bs.get] 
    external setKeyModifierStateSymbol : eventModifierInit:(_) eventModifierInit_like -> keyModifierStateSymbol:Js.boolean -> unit = "keyModifierStateSymbol" [@@bs.set]
    external keyModifierStateSymbolLock : eventModifierInit:(_) eventModifierInit_like -> bool = "keyModifierStateSymbolLock" [@@bs.get] 
    external setKeyModifierStateSymbolLock : eventModifierInit:(_) eventModifierInit_like -> keyModifierStateSymbolLock:Js.boolean -> unit = "keyModifierStateSymbolLock" [@@bs.set]
    
    
end
 module FocusEventInit = struct
    include UIEventInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?view:(_) window_like Js.null -> ?detail:int -> ?relatedTarget:(_) eventTarget_like Js.null -> unit -> focusEventInit = "" [@@bs.obj]
    external relatedTarget : focusEventInit:(_) focusEventInit_like -> eventTarget option = "relatedTarget" [@@bs.get] [@@bs.return null_to_opt]
    external setRelatedTarget : focusEventInit:(_) focusEventInit_like -> relatedTarget:eventTarget Js.null -> unit = "relatedTarget" [@@bs.set]
    
    
end
 module Comment = struct
    include CharacterData
    
    
    
    
end
 module HTMLElement = struct
    include Element
    
    external style : hTMLElement:(_) hTMLElement_like -> cSSStyleDeclaration = "style" [@@bs.get] 
    external oncopy : hTMLElement:(_) hTMLElement_like -> (event -> 'a921 [@bs]) option = "oncopy" [@@bs.get] [@@bs.return null_to_opt]
    external setOncopy : hTMLElement:(_) hTMLElement_like -> oncopy:(event -> 'a922 [@bs]) Js.null -> unit = "oncopy" [@@bs.set]
    external oncut : hTMLElement:(_) hTMLElement_like -> (event -> 'a923 [@bs]) option = "oncut" [@@bs.get] [@@bs.return null_to_opt]
    external setOncut : hTMLElement:(_) hTMLElement_like -> oncut:(event -> 'a924 [@bs]) Js.null -> unit = "oncut" [@@bs.set]
    external onpaste : hTMLElement:(_) hTMLElement_like -> (event -> 'a925 [@bs]) option = "onpaste" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpaste : hTMLElement:(_) hTMLElement_like -> onpaste:(event -> 'a926 [@bs]) Js.null -> unit = "onpaste" [@@bs.set]
    external onabort : hTMLElement:(_) hTMLElement_like -> (event -> 'a927 [@bs]) option = "onabort" [@@bs.get] [@@bs.return null_to_opt]
    external setOnabort : hTMLElement:(_) hTMLElement_like -> onabort:(event -> 'a928 [@bs]) Js.null -> unit = "onabort" [@@bs.set]
    external onblur : hTMLElement:(_) hTMLElement_like -> (event -> 'a929 [@bs]) option = "onblur" [@@bs.get] [@@bs.return null_to_opt]
    external setOnblur : hTMLElement:(_) hTMLElement_like -> onblur:(event -> 'a930 [@bs]) Js.null -> unit = "onblur" [@@bs.set]
    external oncancel : hTMLElement:(_) hTMLElement_like -> (event -> 'a931 [@bs]) option = "oncancel" [@@bs.get] [@@bs.return null_to_opt]
    external setOncancel : hTMLElement:(_) hTMLElement_like -> oncancel:(event -> 'a932 [@bs]) Js.null -> unit = "oncancel" [@@bs.set]
    external oncanplay : hTMLElement:(_) hTMLElement_like -> (event -> 'a933 [@bs]) option = "oncanplay" [@@bs.get] [@@bs.return null_to_opt]
    external setOncanplay : hTMLElement:(_) hTMLElement_like -> oncanplay:(event -> 'a934 [@bs]) Js.null -> unit = "oncanplay" [@@bs.set]
    external oncanplaythrough : hTMLElement:(_) hTMLElement_like -> (event -> 'a935 [@bs]) option = "oncanplaythrough" [@@bs.get] [@@bs.return null_to_opt]
    external setOncanplaythrough : hTMLElement:(_) hTMLElement_like -> oncanplaythrough:(event -> 'a936 [@bs]) Js.null -> unit = "oncanplaythrough" [@@bs.set]
    external onchange : hTMLElement:(_) hTMLElement_like -> (event -> 'a937 [@bs]) option = "onchange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnchange : hTMLElement:(_) hTMLElement_like -> onchange:(event -> 'a938 [@bs]) Js.null -> unit = "onchange" [@@bs.set]
    external onclick : hTMLElement:(_) hTMLElement_like -> (event -> 'a939 [@bs]) option = "onclick" [@@bs.get] [@@bs.return null_to_opt]
    external setOnclick : hTMLElement:(_) hTMLElement_like -> onclick:(event -> 'a940 [@bs]) Js.null -> unit = "onclick" [@@bs.set]
    external onclose : hTMLElement:(_) hTMLElement_like -> (event -> 'a941 [@bs]) option = "onclose" [@@bs.get] [@@bs.return null_to_opt]
    external setOnclose : hTMLElement:(_) hTMLElement_like -> onclose:(event -> 'a942 [@bs]) Js.null -> unit = "onclose" [@@bs.set]
    external oncontextmenu : hTMLElement:(_) hTMLElement_like -> (event -> 'a943 [@bs]) option = "oncontextmenu" [@@bs.get] [@@bs.return null_to_opt]
    external setOncontextmenu : hTMLElement:(_) hTMLElement_like -> oncontextmenu:(event -> 'a944 [@bs]) Js.null -> unit = "oncontextmenu" [@@bs.set]
    external oncuechange : hTMLElement:(_) hTMLElement_like -> (event -> 'a945 [@bs]) option = "oncuechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOncuechange : hTMLElement:(_) hTMLElement_like -> oncuechange:(event -> 'a946 [@bs]) Js.null -> unit = "oncuechange" [@@bs.set]
    external ondblclick : hTMLElement:(_) hTMLElement_like -> (event -> 'a947 [@bs]) option = "ondblclick" [@@bs.get] [@@bs.return null_to_opt]
    external setOndblclick : hTMLElement:(_) hTMLElement_like -> ondblclick:(event -> 'a948 [@bs]) Js.null -> unit = "ondblclick" [@@bs.set]
    external ondrag : hTMLElement:(_) hTMLElement_like -> (event -> 'a949 [@bs]) option = "ondrag" [@@bs.get] [@@bs.return null_to_opt]
    external setOndrag : hTMLElement:(_) hTMLElement_like -> ondrag:(event -> 'a950 [@bs]) Js.null -> unit = "ondrag" [@@bs.set]
    external ondragend : hTMLElement:(_) hTMLElement_like -> (event -> 'a951 [@bs]) option = "ondragend" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragend : hTMLElement:(_) hTMLElement_like -> ondragend:(event -> 'a952 [@bs]) Js.null -> unit = "ondragend" [@@bs.set]
    external ondragenter : hTMLElement:(_) hTMLElement_like -> (event -> 'a953 [@bs]) option = "ondragenter" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragenter : hTMLElement:(_) hTMLElement_like -> ondragenter:(event -> 'a954 [@bs]) Js.null -> unit = "ondragenter" [@@bs.set]
    external ondragexit : hTMLElement:(_) hTMLElement_like -> (event -> 'a955 [@bs]) option = "ondragexit" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragexit : hTMLElement:(_) hTMLElement_like -> ondragexit:(event -> 'a956 [@bs]) Js.null -> unit = "ondragexit" [@@bs.set]
    external ondragleave : hTMLElement:(_) hTMLElement_like -> (event -> 'a957 [@bs]) option = "ondragleave" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragleave : hTMLElement:(_) hTMLElement_like -> ondragleave:(event -> 'a958 [@bs]) Js.null -> unit = "ondragleave" [@@bs.set]
    external ondragover : hTMLElement:(_) hTMLElement_like -> (event -> 'a959 [@bs]) option = "ondragover" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragover : hTMLElement:(_) hTMLElement_like -> ondragover:(event -> 'a960 [@bs]) Js.null -> unit = "ondragover" [@@bs.set]
    external ondragstart : hTMLElement:(_) hTMLElement_like -> (event -> 'a961 [@bs]) option = "ondragstart" [@@bs.get] [@@bs.return null_to_opt]
    external setOndragstart : hTMLElement:(_) hTMLElement_like -> ondragstart:(event -> 'a962 [@bs]) Js.null -> unit = "ondragstart" [@@bs.set]
    external ondrop : hTMLElement:(_) hTMLElement_like -> (event -> 'a963 [@bs]) option = "ondrop" [@@bs.get] [@@bs.return null_to_opt]
    external setOndrop : hTMLElement:(_) hTMLElement_like -> ondrop:(event -> 'a964 [@bs]) Js.null -> unit = "ondrop" [@@bs.set]
    external ondurationchange : hTMLElement:(_) hTMLElement_like -> (event -> 'a965 [@bs]) option = "ondurationchange" [@@bs.get] [@@bs.return null_to_opt]
    external setOndurationchange : hTMLElement:(_) hTMLElement_like -> ondurationchange:(event -> 'a966 [@bs]) Js.null -> unit = "ondurationchange" [@@bs.set]
    external onemptied : hTMLElement:(_) hTMLElement_like -> (event -> 'a967 [@bs]) option = "onemptied" [@@bs.get] [@@bs.return null_to_opt]
    external setOnemptied : hTMLElement:(_) hTMLElement_like -> onemptied:(event -> 'a968 [@bs]) Js.null -> unit = "onemptied" [@@bs.set]
    external onended : hTMLElement:(_) hTMLElement_like -> (event -> 'a969 [@bs]) option = "onended" [@@bs.get] [@@bs.return null_to_opt]
    external setOnended : hTMLElement:(_) hTMLElement_like -> onended:(event -> 'a970 [@bs]) Js.null -> unit = "onended" [@@bs.set]
    external onerror : hTMLElement:(_) hTMLElement_like -> ('a971 -> string -> int -> int -> 'a972 -> 'a973 [@bs]) option = "onerror" [@@bs.get] [@@bs.return null_to_opt]
    external setOnerror : hTMLElement:(_) hTMLElement_like -> onerror:('a974 -> string -> int -> int -> 'a975 -> 'a976 [@bs]) Js.null -> unit = "onerror" [@@bs.set]
    external onfocus : hTMLElement:(_) hTMLElement_like -> (event -> 'a977 [@bs]) option = "onfocus" [@@bs.get] [@@bs.return null_to_opt]
    external setOnfocus : hTMLElement:(_) hTMLElement_like -> onfocus:(event -> 'a978 [@bs]) Js.null -> unit = "onfocus" [@@bs.set]
    external oninput : hTMLElement:(_) hTMLElement_like -> (event -> 'a979 [@bs]) option = "oninput" [@@bs.get] [@@bs.return null_to_opt]
    external setOninput : hTMLElement:(_) hTMLElement_like -> oninput:(event -> 'a980 [@bs]) Js.null -> unit = "oninput" [@@bs.set]
    external oninvalid : hTMLElement:(_) hTMLElement_like -> (event -> 'a981 [@bs]) option = "oninvalid" [@@bs.get] [@@bs.return null_to_opt]
    external setOninvalid : hTMLElement:(_) hTMLElement_like -> oninvalid:(event -> 'a982 [@bs]) Js.null -> unit = "oninvalid" [@@bs.set]
    external onkeydown : hTMLElement:(_) hTMLElement_like -> (event -> 'a983 [@bs]) option = "onkeydown" [@@bs.get] [@@bs.return null_to_opt]
    external setOnkeydown : hTMLElement:(_) hTMLElement_like -> onkeydown:(event -> 'a984 [@bs]) Js.null -> unit = "onkeydown" [@@bs.set]
    external onkeypress : hTMLElement:(_) hTMLElement_like -> (event -> 'a985 [@bs]) option = "onkeypress" [@@bs.get] [@@bs.return null_to_opt]
    external setOnkeypress : hTMLElement:(_) hTMLElement_like -> onkeypress:(event -> 'a986 [@bs]) Js.null -> unit = "onkeypress" [@@bs.set]
    external onkeyup : hTMLElement:(_) hTMLElement_like -> (event -> 'a987 [@bs]) option = "onkeyup" [@@bs.get] [@@bs.return null_to_opt]
    external setOnkeyup : hTMLElement:(_) hTMLElement_like -> onkeyup:(event -> 'a988 [@bs]) Js.null -> unit = "onkeyup" [@@bs.set]
    external onload : hTMLElement:(_) hTMLElement_like -> (event -> 'a989 [@bs]) option = "onload" [@@bs.get] [@@bs.return null_to_opt]
    external setOnload : hTMLElement:(_) hTMLElement_like -> onload:(event -> 'a990 [@bs]) Js.null -> unit = "onload" [@@bs.set]
    external onloadeddata : hTMLElement:(_) hTMLElement_like -> (event -> 'a991 [@bs]) option = "onloadeddata" [@@bs.get] [@@bs.return null_to_opt]
    external setOnloadeddata : hTMLElement:(_) hTMLElement_like -> onloadeddata:(event -> 'a992 [@bs]) Js.null -> unit = "onloadeddata" [@@bs.set]
    external onloadedmetadata : hTMLElement:(_) hTMLElement_like -> (event -> 'a993 [@bs]) option = "onloadedmetadata" [@@bs.get] [@@bs.return null_to_opt]
    external setOnloadedmetadata : hTMLElement:(_) hTMLElement_like -> onloadedmetadata:(event -> 'a994 [@bs]) Js.null -> unit = "onloadedmetadata" [@@bs.set]
    external onloadstart : hTMLElement:(_) hTMLElement_like -> (event -> 'a995 [@bs]) option = "onloadstart" [@@bs.get] [@@bs.return null_to_opt]
    external setOnloadstart : hTMLElement:(_) hTMLElement_like -> onloadstart:(event -> 'a996 [@bs]) Js.null -> unit = "onloadstart" [@@bs.set]
    external onmousedown : hTMLElement:(_) hTMLElement_like -> (event -> 'a997 [@bs]) option = "onmousedown" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmousedown : hTMLElement:(_) hTMLElement_like -> onmousedown:(event -> 'a998 [@bs]) Js.null -> unit = "onmousedown" [@@bs.set]
    external onmouseenter : hTMLElement:(_) hTMLElement_like -> (event -> 'a999 [@bs]) option = "onmouseenter" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseenter : hTMLElement:(_) hTMLElement_like -> onmouseenter:(event -> 'a1000 [@bs]) Js.null -> unit = "onmouseenter" [@@bs.set]
    external onmouseleave : hTMLElement:(_) hTMLElement_like -> (event -> 'a1001 [@bs]) option = "onmouseleave" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseleave : hTMLElement:(_) hTMLElement_like -> onmouseleave:(event -> 'a1002 [@bs]) Js.null -> unit = "onmouseleave" [@@bs.set]
    external onmousemove : hTMLElement:(_) hTMLElement_like -> (event -> 'a1003 [@bs]) option = "onmousemove" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmousemove : hTMLElement:(_) hTMLElement_like -> onmousemove:(event -> 'a1004 [@bs]) Js.null -> unit = "onmousemove" [@@bs.set]
    external onmouseout : hTMLElement:(_) hTMLElement_like -> (event -> 'a1005 [@bs]) option = "onmouseout" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseout : hTMLElement:(_) hTMLElement_like -> onmouseout:(event -> 'a1006 [@bs]) Js.null -> unit = "onmouseout" [@@bs.set]
    external onmouseover : hTMLElement:(_) hTMLElement_like -> (event -> 'a1007 [@bs]) option = "onmouseover" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseover : hTMLElement:(_) hTMLElement_like -> onmouseover:(event -> 'a1008 [@bs]) Js.null -> unit = "onmouseover" [@@bs.set]
    external onmouseup : hTMLElement:(_) hTMLElement_like -> (event -> 'a1009 [@bs]) option = "onmouseup" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmouseup : hTMLElement:(_) hTMLElement_like -> onmouseup:(event -> 'a1010 [@bs]) Js.null -> unit = "onmouseup" [@@bs.set]
    external onwheel : hTMLElement:(_) hTMLElement_like -> (event -> 'a1011 [@bs]) option = "onwheel" [@@bs.get] [@@bs.return null_to_opt]
    external setOnwheel : hTMLElement:(_) hTMLElement_like -> onwheel:(event -> 'a1012 [@bs]) Js.null -> unit = "onwheel" [@@bs.set]
    external onpause : hTMLElement:(_) hTMLElement_like -> (event -> 'a1013 [@bs]) option = "onpause" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpause : hTMLElement:(_) hTMLElement_like -> onpause:(event -> 'a1014 [@bs]) Js.null -> unit = "onpause" [@@bs.set]
    external onplay : hTMLElement:(_) hTMLElement_like -> (event -> 'a1015 [@bs]) option = "onplay" [@@bs.get] [@@bs.return null_to_opt]
    external setOnplay : hTMLElement:(_) hTMLElement_like -> onplay:(event -> 'a1016 [@bs]) Js.null -> unit = "onplay" [@@bs.set]
    external onplaying : hTMLElement:(_) hTMLElement_like -> (event -> 'a1017 [@bs]) option = "onplaying" [@@bs.get] [@@bs.return null_to_opt]
    external setOnplaying : hTMLElement:(_) hTMLElement_like -> onplaying:(event -> 'a1018 [@bs]) Js.null -> unit = "onplaying" [@@bs.set]
    external onprogress : hTMLElement:(_) hTMLElement_like -> (event -> 'a1019 [@bs]) option = "onprogress" [@@bs.get] [@@bs.return null_to_opt]
    external setOnprogress : hTMLElement:(_) hTMLElement_like -> onprogress:(event -> 'a1020 [@bs]) Js.null -> unit = "onprogress" [@@bs.set]
    external onratechange : hTMLElement:(_) hTMLElement_like -> (event -> 'a1021 [@bs]) option = "onratechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnratechange : hTMLElement:(_) hTMLElement_like -> onratechange:(event -> 'a1022 [@bs]) Js.null -> unit = "onratechange" [@@bs.set]
    external onreset : hTMLElement:(_) hTMLElement_like -> (event -> 'a1023 [@bs]) option = "onreset" [@@bs.get] [@@bs.return null_to_opt]
    external setOnreset : hTMLElement:(_) hTMLElement_like -> onreset:(event -> 'a1024 [@bs]) Js.null -> unit = "onreset" [@@bs.set]
    external onresize : hTMLElement:(_) hTMLElement_like -> (event -> 'a1025 [@bs]) option = "onresize" [@@bs.get] [@@bs.return null_to_opt]
    external setOnresize : hTMLElement:(_) hTMLElement_like -> onresize:(event -> 'a1026 [@bs]) Js.null -> unit = "onresize" [@@bs.set]
    external onscroll : hTMLElement:(_) hTMLElement_like -> (event -> 'a1027 [@bs]) option = "onscroll" [@@bs.get] [@@bs.return null_to_opt]
    external setOnscroll : hTMLElement:(_) hTMLElement_like -> onscroll:(event -> 'a1028 [@bs]) Js.null -> unit = "onscroll" [@@bs.set]
    external onseeked : hTMLElement:(_) hTMLElement_like -> (event -> 'a1029 [@bs]) option = "onseeked" [@@bs.get] [@@bs.return null_to_opt]
    external setOnseeked : hTMLElement:(_) hTMLElement_like -> onseeked:(event -> 'a1030 [@bs]) Js.null -> unit = "onseeked" [@@bs.set]
    external onseeking : hTMLElement:(_) hTMLElement_like -> (event -> 'a1031 [@bs]) option = "onseeking" [@@bs.get] [@@bs.return null_to_opt]
    external setOnseeking : hTMLElement:(_) hTMLElement_like -> onseeking:(event -> 'a1032 [@bs]) Js.null -> unit = "onseeking" [@@bs.set]
    external onselect : hTMLElement:(_) hTMLElement_like -> (event -> 'a1033 [@bs]) option = "onselect" [@@bs.get] [@@bs.return null_to_opt]
    external setOnselect : hTMLElement:(_) hTMLElement_like -> onselect:(event -> 'a1034 [@bs]) Js.null -> unit = "onselect" [@@bs.set]
    external onshow : hTMLElement:(_) hTMLElement_like -> (event -> 'a1035 [@bs]) option = "onshow" [@@bs.get] [@@bs.return null_to_opt]
    external setOnshow : hTMLElement:(_) hTMLElement_like -> onshow:(event -> 'a1036 [@bs]) Js.null -> unit = "onshow" [@@bs.set]
    external onstalled : hTMLElement:(_) hTMLElement_like -> (event -> 'a1037 [@bs]) option = "onstalled" [@@bs.get] [@@bs.return null_to_opt]
    external setOnstalled : hTMLElement:(_) hTMLElement_like -> onstalled:(event -> 'a1038 [@bs]) Js.null -> unit = "onstalled" [@@bs.set]
    external onsubmit : hTMLElement:(_) hTMLElement_like -> (event -> 'a1039 [@bs]) option = "onsubmit" [@@bs.get] [@@bs.return null_to_opt]
    external setOnsubmit : hTMLElement:(_) hTMLElement_like -> onsubmit:(event -> 'a1040 [@bs]) Js.null -> unit = "onsubmit" [@@bs.set]
    external onsuspend : hTMLElement:(_) hTMLElement_like -> (event -> 'a1041 [@bs]) option = "onsuspend" [@@bs.get] [@@bs.return null_to_opt]
    external setOnsuspend : hTMLElement:(_) hTMLElement_like -> onsuspend:(event -> 'a1042 [@bs]) Js.null -> unit = "onsuspend" [@@bs.set]
    external ontimeupdate : hTMLElement:(_) hTMLElement_like -> (event -> 'a1043 [@bs]) option = "ontimeupdate" [@@bs.get] [@@bs.return null_to_opt]
    external setOntimeupdate : hTMLElement:(_) hTMLElement_like -> ontimeupdate:(event -> 'a1044 [@bs]) Js.null -> unit = "ontimeupdate" [@@bs.set]
    external ontoggle : hTMLElement:(_) hTMLElement_like -> (event -> 'a1045 [@bs]) option = "ontoggle" [@@bs.get] [@@bs.return null_to_opt]
    external setOntoggle : hTMLElement:(_) hTMLElement_like -> ontoggle:(event -> 'a1046 [@bs]) Js.null -> unit = "ontoggle" [@@bs.set]
    external onvolumechange : hTMLElement:(_) hTMLElement_like -> (event -> 'a1047 [@bs]) option = "onvolumechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnvolumechange : hTMLElement:(_) hTMLElement_like -> onvolumechange:(event -> 'a1048 [@bs]) Js.null -> unit = "onvolumechange" [@@bs.set]
    external onwaiting : hTMLElement:(_) hTMLElement_like -> (event -> 'a1049 [@bs]) option = "onwaiting" [@@bs.get] [@@bs.return null_to_opt]
    external setOnwaiting : hTMLElement:(_) hTMLElement_like -> onwaiting:(event -> 'a1050 [@bs]) Js.null -> unit = "onwaiting" [@@bs.set]
    external ontransitionend : hTMLElement:(_) hTMLElement_like -> (event -> 'a1051 [@bs]) option = "ontransitionend" [@@bs.get] [@@bs.return null_to_opt]
    external setOntransitionend : hTMLElement:(_) hTMLElement_like -> ontransitionend:(event -> 'a1052 [@bs]) Js.null -> unit = "ontransitionend" [@@bs.set]
    external title : hTMLElement:(_) hTMLElement_like -> string = "title" [@@bs.get] 
    external setTitle : hTMLElement:(_) hTMLElement_like -> title:string -> unit = "title" [@@bs.set]
    external lang : hTMLElement:(_) hTMLElement_like -> string = "lang" [@@bs.get] 
    external setLang : hTMLElement:(_) hTMLElement_like -> lang:string -> unit = "lang" [@@bs.set]
    external dataset : hTMLElement:(_) hTMLElement_like -> dOMStringMap = "dataset" [@@bs.get] 
    external hidden : hTMLElement:(_) hTMLElement_like -> bool = "hidden" [@@bs.get] 
    external setHidden : hTMLElement:(_) hTMLElement_like -> hidden:Js.boolean -> unit = "hidden" [@@bs.set]
    external offsetParent : hTMLElement:(_) hTMLElement_like -> element option = "offsetParent" [@@bs.get] [@@bs.return null_to_opt]
    external offsetTop : hTMLElement:(_) hTMLElement_like -> int = "offsetTop" [@@bs.get] 
    external offsetLeft : hTMLElement:(_) hTMLElement_like -> int = "offsetLeft" [@@bs.get] 
    external offsetWidth : hTMLElement:(_) hTMLElement_like -> int = "offsetWidth" [@@bs.get] 
    external offsetHeight : hTMLElement:(_) hTMLElement_like -> int = "offsetHeight" [@@bs.get] 
    external blur : hTMLElement:(_) hTMLElement_like -> unit = "blur" [@@bs.send] 
    external click : hTMLElement:(_) hTMLElement_like -> unit = "click" [@@bs.send] 
    external focus : hTMLElement:(_) hTMLElement_like -> unit = "focus" [@@bs.send] 
    
    
end
 module CSSSupportsRule = struct
    include CSSConditionRule
    
    
    
    
end
 module PaintWorkletGlobalScope = struct
    include WorkletGlobalScope
    
    external registerPaint : paintWorkletGlobalScope:(_) paintWorkletGlobalScope_like -> name:string -> paintCtor:(unit -> unit [@bs]) -> unit = "registerPaint" [@@bs.send] 
    
    
end
 module ServiceWorkerGlobalScope = struct
    include WorkerGlobalScope
    
    external onmessage : serviceWorkerGlobalScope:(_) serviceWorkerGlobalScope_like -> (event -> 'a1053 [@bs]) option = "onmessage" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmessage : serviceWorkerGlobalScope:(_) serviceWorkerGlobalScope_like -> onmessage:(event -> 'a1054 [@bs]) Js.null -> unit = "onmessage" [@@bs.set]
    
    
end
 module DedicatedWorkerGlobalScope = struct
    include WorkerGlobalScope
    
    external onmessage : dedicatedWorkerGlobalScope:(_) dedicatedWorkerGlobalScope_like -> (event -> 'a1055 [@bs]) option = "onmessage" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmessage : dedicatedWorkerGlobalScope:(_) dedicatedWorkerGlobalScope_like -> onmessage:(event -> 'a1056 [@bs]) Js.null -> unit = "onmessage" [@@bs.set]
    external close : dedicatedWorkerGlobalScope:(_) dedicatedWorkerGlobalScope_like -> unit = "close" [@@bs.send] 
    external postMessage : dedicatedWorkerGlobalScope:(_) dedicatedWorkerGlobalScope_like -> message:'a1057 -> unit = "postMessage" [@@bs.send] 
    
    
end
 module CSSMediaRule = struct
    include CSSConditionRule
    
    external media : cSSMediaRule:(_) cSSMediaRule_like -> mediaList = "media" [@@bs.get] 
    
    
end
 module ProcessingInstruction = struct
    include CharacterData
    
    external target : processingInstruction:(_) processingInstruction_like -> string = "target" [@@bs.get] 
    
    
end
 module XMLDocument = struct
    include Document
    
    
    
    
end
 module TestWorkletGlobalScope = struct
    include WorkletGlobalScope
    
    external registerKeyValue : testWorkletGlobalScope:(_) testWorkletGlobalScope_like -> key:string -> value:string -> unit = "registerKeyValue" [@@bs.send] 
    
    
end
 module SVGElement = struct
    include Element
    
    
    
    
end
 module Text = struct
    include CharacterData
    
    external wholeText : text:(_) text_like -> string = "wholeText" [@@bs.get] 
    external splitText : text:(_) text_like -> offset:int -> text = "splitText" [@@bs.send] 
    
    
end
 module KeyboardEventInit = struct
    include EventModifierInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?view:(_) window_like Js.null -> ?detail:int -> ?ctrlKey:Js.boolean -> ?shiftKey:Js.boolean -> ?altKey:Js.boolean -> ?metaKey:Js.boolean -> ?keyModifierStateAltGraph:Js.boolean -> ?keyModifierStateCapsLock:Js.boolean -> ?keyModifierStateFn:Js.boolean -> ?keyModifierStateFnLock:Js.boolean -> ?keyModifierStateHyper:Js.boolean -> ?keyModifierStateNumLock:Js.boolean -> ?keyModifierStateOS:Js.boolean -> ?keyModifierStateScrollLock:Js.boolean -> ?keyModifierStateSuper:Js.boolean -> ?keyModifierStateSymbol:Js.boolean -> ?keyModifierStateSymbolLock:Js.boolean -> ?key:string -> ?code:string -> ?location:int -> ?repeat:Js.boolean -> ?isComposing:Js.boolean -> unit -> keyboardEventInit = "" [@@bs.obj]
    external key : keyboardEventInit:(_) keyboardEventInit_like -> string = "key" [@@bs.get] 
    external setKey : keyboardEventInit:(_) keyboardEventInit_like -> key:string -> unit = "key" [@@bs.set]
    external code : keyboardEventInit:(_) keyboardEventInit_like -> string = "code" [@@bs.get] 
    external setCode : keyboardEventInit:(_) keyboardEventInit_like -> code:string -> unit = "code" [@@bs.set]
    external location : keyboardEventInit:(_) keyboardEventInit_like -> int = "location" [@@bs.get] 
    external setLocation : keyboardEventInit:(_) keyboardEventInit_like -> location:int -> unit = "location" [@@bs.set]
    external repeat : keyboardEventInit:(_) keyboardEventInit_like -> bool = "repeat" [@@bs.get] 
    external setRepeat : keyboardEventInit:(_) keyboardEventInit_like -> repeat:Js.boolean -> unit = "repeat" [@@bs.set]
    external isComposing : keyboardEventInit:(_) keyboardEventInit_like -> bool = "isComposing" [@@bs.get] 
    external setIsComposing : keyboardEventInit:(_) keyboardEventInit_like -> isComposing:Js.boolean -> unit = "isComposing" [@@bs.set]
    
    
end
 module MouseEventInit = struct
    include EventModifierInit
    
    external make : ?bubbles:Js.boolean -> ?cancelable:Js.boolean -> ?view:(_) window_like Js.null -> ?detail:int -> ?ctrlKey:Js.boolean -> ?shiftKey:Js.boolean -> ?altKey:Js.boolean -> ?metaKey:Js.boolean -> ?keyModifierStateAltGraph:Js.boolean -> ?keyModifierStateCapsLock:Js.boolean -> ?keyModifierStateFn:Js.boolean -> ?keyModifierStateFnLock:Js.boolean -> ?keyModifierStateHyper:Js.boolean -> ?keyModifierStateNumLock:Js.boolean -> ?keyModifierStateOS:Js.boolean -> ?keyModifierStateScrollLock:Js.boolean -> ?keyModifierStateSuper:Js.boolean -> ?keyModifierStateSymbol:Js.boolean -> ?keyModifierStateSymbolLock:Js.boolean -> ?screenX:int -> ?screenY:int -> ?clientX:int -> ?clientY:int -> ?button:int -> ?relatedTarget:(_) eventTarget_like Js.null -> unit -> mouseEventInit = "" [@@bs.obj]
    external screenX : mouseEventInit:(_) mouseEventInit_like -> int = "screenX" [@@bs.get] 
    external setScreenX : mouseEventInit:(_) mouseEventInit_like -> screenX:int -> unit = "screenX" [@@bs.set]
    external screenY : mouseEventInit:(_) mouseEventInit_like -> int = "screenY" [@@bs.get] 
    external setScreenY : mouseEventInit:(_) mouseEventInit_like -> screenY:int -> unit = "screenY" [@@bs.set]
    external clientX : mouseEventInit:(_) mouseEventInit_like -> int = "clientX" [@@bs.get] 
    external setClientX : mouseEventInit:(_) mouseEventInit_like -> clientX:int -> unit = "clientX" [@@bs.set]
    external clientY : mouseEventInit:(_) mouseEventInit_like -> int = "clientY" [@@bs.get] 
    external setClientY : mouseEventInit:(_) mouseEventInit_like -> clientY:int -> unit = "clientY" [@@bs.set]
    external button : mouseEventInit:(_) mouseEventInit_like -> int = "button" [@@bs.get] 
    external setButton : mouseEventInit:(_) mouseEventInit_like -> button:int -> unit = "button" [@@bs.set]
    external relatedTarget : mouseEventInit:(_) mouseEventInit_like -> eventTarget option = "relatedTarget" [@@bs.get] [@@bs.return null_to_opt]
    external setRelatedTarget : mouseEventInit:(_) mouseEventInit_like -> relatedTarget:eventTarget Js.null -> unit = "relatedTarget" [@@bs.set]
    
    
end
 module HTMLIFrameElement = struct
    include HTMLElement
    
    external src : hTMLIFrameElement:(_) hTMLIFrameElement_like -> string = "src" [@@bs.get] 
    external setSrc : hTMLIFrameElement:(_) hTMLIFrameElement_like -> src:string -> unit = "src" [@@bs.set]
    external sandbox : hTMLIFrameElement:(_) hTMLIFrameElement_like -> dOMTokenList = "sandbox" [@@bs.get] 
    external allowFullscreen : hTMLIFrameElement:(_) hTMLIFrameElement_like -> bool = "allowFullscreen" [@@bs.get] 
    external setAllowFullscreen : hTMLIFrameElement:(_) hTMLIFrameElement_like -> allowFullscreen:Js.boolean -> unit = "allowFullscreen" [@@bs.set]
    external width : hTMLIFrameElement:(_) hTMLIFrameElement_like -> string = "width" [@@bs.get] 
    external setWidth : hTMLIFrameElement:(_) hTMLIFrameElement_like -> width:string -> unit = "width" [@@bs.set]
    external height : hTMLIFrameElement:(_) hTMLIFrameElement_like -> string = "height" [@@bs.get] 
    external setHeight : hTMLIFrameElement:(_) hTMLIFrameElement_like -> height:string -> unit = "height" [@@bs.set]
    external contentDocument : hTMLIFrameElement:(_) hTMLIFrameElement_like -> document option = "contentDocument" [@@bs.get] [@@bs.return null_to_opt]
    external contentWindow : hTMLIFrameElement:(_) hTMLIFrameElement_like -> windowProxy option = "contentWindow" [@@bs.get] [@@bs.return null_to_opt]
    external frameBorder : hTMLIFrameElement:(_) hTMLIFrameElement_like -> string = "frameBorder" [@@bs.get] 
    external setFrameBorder : hTMLIFrameElement:(_) hTMLIFrameElement_like -> frameBorder:string -> unit = "frameBorder" [@@bs.set]
    external mozbrowser : hTMLIFrameElement:(_) hTMLIFrameElement_like -> bool = "mozbrowser" [@@bs.get] 
    external setMozbrowser : hTMLIFrameElement:(_) hTMLIFrameElement_like -> mozbrowser:Js.boolean -> unit = "mozbrowser" [@@bs.set]
    external mozprivatebrowsing : hTMLIFrameElement:(_) hTMLIFrameElement_like -> bool = "mozprivatebrowsing" [@@bs.get] 
    external setMozprivatebrowsing : hTMLIFrameElement:(_) hTMLIFrameElement_like -> mozprivatebrowsing:Js.boolean -> unit = "mozprivatebrowsing" [@@bs.set]
    external getVisible : hTMLIFrameElement:(_) hTMLIFrameElement_like -> bool = "getVisible" [@@bs.send] 
    external goBack : hTMLIFrameElement:(_) hTMLIFrameElement_like -> unit = "goBack" [@@bs.send] 
    external goForward : hTMLIFrameElement:(_) hTMLIFrameElement_like -> unit = "goForward" [@@bs.send] 
    external reload : hTMLIFrameElement:(_) hTMLIFrameElement_like -> ?hardReload:Js.boolean Js.undefined -> unit = "reload" [@@bs.send] 
    external setVisible : hTMLIFrameElement:(_) hTMLIFrameElement_like -> visible:Js.boolean -> unit = "setVisible" [@@bs.send] 
    external stop : hTMLIFrameElement:(_) hTMLIFrameElement_like -> unit = "stop" [@@bs.send] 
    
    let reload ~hTMLIFrameElement ?hardReload () =
      let conv_hardReload = Js_undefined.from_opt in
      let hardReload = conv_hardReload hardReload in
      reload ~hTMLIFrameElement ~hardReload
    
end
 module SVGGraphicsElement = struct
    include SVGElement
    
    
    
    
end
 module HTMLScriptElement = struct
    include HTMLElement
    
    external src : hTMLScriptElement:(_) hTMLScriptElement_like -> string = "src" [@@bs.get] 
    external setSrc : hTMLScriptElement:(_) hTMLScriptElement_like -> src:string -> unit = "src" [@@bs.set]
    external type_ : hTMLScriptElement:(_) hTMLScriptElement_like -> string = "type" [@@bs.get] 
    external setType : hTMLScriptElement:(_) hTMLScriptElement_like -> type_:string -> unit = "type" [@@bs.set]
    external charset : hTMLScriptElement:(_) hTMLScriptElement_like -> string = "charset" [@@bs.get] 
    external setCharset : hTMLScriptElement:(_) hTMLScriptElement_like -> charset:string -> unit = "charset" [@@bs.set]
    external async : hTMLScriptElement:(_) hTMLScriptElement_like -> bool = "async" [@@bs.get] 
    external setAsync : hTMLScriptElement:(_) hTMLScriptElement_like -> async:Js.boolean -> unit = "async" [@@bs.set]
    external defer : hTMLScriptElement:(_) hTMLScriptElement_like -> bool = "defer" [@@bs.get] 
    external setDefer : hTMLScriptElement:(_) hTMLScriptElement_like -> defer:Js.boolean -> unit = "defer" [@@bs.set]
    external crossOrigin : hTMLScriptElement:(_) hTMLScriptElement_like -> string option = "crossOrigin" [@@bs.get] [@@bs.return null_to_opt]
    external setCrossOrigin : hTMLScriptElement:(_) hTMLScriptElement_like -> crossOrigin:string Js.null -> unit = "crossOrigin" [@@bs.set]
    external text : hTMLScriptElement:(_) hTMLScriptElement_like -> string = "text" [@@bs.get] 
    external setText : hTMLScriptElement:(_) hTMLScriptElement_like -> text:string -> unit = "text" [@@bs.set]
    external integrity : hTMLScriptElement:(_) hTMLScriptElement_like -> string = "integrity" [@@bs.get] 
    external setIntegrity : hTMLScriptElement:(_) hTMLScriptElement_like -> integrity:string -> unit = "integrity" [@@bs.set]
    external event : hTMLScriptElement:(_) hTMLScriptElement_like -> string = "event" [@@bs.get] 
    external setEvent : hTMLScriptElement:(_) hTMLScriptElement_like -> event:string -> unit = "event" [@@bs.set]
    external htmlFor : hTMLScriptElement:(_) hTMLScriptElement_like -> string = "htmlFor" [@@bs.get] 
    external setHtmlFor : hTMLScriptElement:(_) hTMLScriptElement_like -> htmlFor:string -> unit = "htmlFor" [@@bs.set]
    
    
end
 module HTMLObjectElement = struct
    include HTMLElement
    
    external type_ : hTMLObjectElement:(_) hTMLObjectElement_like -> string = "type" [@@bs.get] 
    external setType : hTMLObjectElement:(_) hTMLObjectElement_like -> type_:string -> unit = "type" [@@bs.set]
    external form : hTMLObjectElement:(_) hTMLObjectElement_like -> hTMLFormElement option = "form" [@@bs.get] [@@bs.return null_to_opt]
    external validity : hTMLObjectElement:(_) hTMLObjectElement_like -> validityState = "validity" [@@bs.get] 
    
    
end
 module HTMLMediaElement = struct
    include HTMLElement
    
    external error : hTMLMediaElement:(_) hTMLMediaElement_like -> mediaError option = "error" [@@bs.get] [@@bs.return null_to_opt]
    external src : hTMLMediaElement:(_) hTMLMediaElement_like -> string = "src" [@@bs.get] 
    external setSrc : hTMLMediaElement:(_) hTMLMediaElement_like -> src:string -> unit = "src" [@@bs.set]
    external currentSrc : hTMLMediaElement:(_) hTMLMediaElement_like -> string = "currentSrc" [@@bs.get] 
    external networkState : hTMLMediaElement:(_) hTMLMediaElement_like -> int = "networkState" [@@bs.get] 
    external preload : hTMLMediaElement:(_) hTMLMediaElement_like -> string = "preload" [@@bs.get] 
    external setPreload : hTMLMediaElement:(_) hTMLMediaElement_like -> preload:string -> unit = "preload" [@@bs.set]
    external readyState : hTMLMediaElement:(_) hTMLMediaElement_like -> int = "readyState" [@@bs.get] 
    external paused : hTMLMediaElement:(_) hTMLMediaElement_like -> bool = "paused" [@@bs.get] 
    external autoplay : hTMLMediaElement:(_) hTMLMediaElement_like -> bool = "autoplay" [@@bs.get] 
    external setAutoplay : hTMLMediaElement:(_) hTMLMediaElement_like -> autoplay:Js.boolean -> unit = "autoplay" [@@bs.set]
    external canPlayType : hTMLMediaElement:(_) hTMLMediaElement_like -> type_:string -> string = "canPlayType" [@@bs.send] 
    external load : hTMLMediaElement:(_) hTMLMediaElement_like -> unit = "load" [@@bs.send] 
    external pause : hTMLMediaElement:(_) hTMLMediaElement_like -> unit = "pause" [@@bs.send] 
    external play : hTMLMediaElement:(_) hTMLMediaElement_like -> unit = "play" [@@bs.send] 
    
    let network_empty  =
      
      0
    
    let network_idle  =
      
      1
    
    let network_loading  =
      
      2
    
    let network_no_source  =
      
      3
    
    let have_nothing  =
      
      0
    
    let have_metadata  =
      
      1
    
    let have_current_data  =
      
      2
    
    let have_future_data  =
      
      3
    
    let have_enough_data  =
      
      4
    
end
 module HTMLImageElement = struct
    include HTMLElement
    
    external alt : hTMLImageElement:(_) hTMLImageElement_like -> string = "alt" [@@bs.get] 
    external setAlt : hTMLImageElement:(_) hTMLImageElement_like -> alt:string -> unit = "alt" [@@bs.set]
    external src : hTMLImageElement:(_) hTMLImageElement_like -> string = "src" [@@bs.get] 
    external setSrc : hTMLImageElement:(_) hTMLImageElement_like -> src:string -> unit = "src" [@@bs.set]
    external crossOrigin : hTMLImageElement:(_) hTMLImageElement_like -> string option = "crossOrigin" [@@bs.get] [@@bs.return null_to_opt]
    external setCrossOrigin : hTMLImageElement:(_) hTMLImageElement_like -> crossOrigin:string Js.null -> unit = "crossOrigin" [@@bs.set]
    external useMap : hTMLImageElement:(_) hTMLImageElement_like -> string = "useMap" [@@bs.get] 
    external setUseMap : hTMLImageElement:(_) hTMLImageElement_like -> useMap:string -> unit = "useMap" [@@bs.set]
    external isMap : hTMLImageElement:(_) hTMLImageElement_like -> bool = "isMap" [@@bs.get] 
    external setIsMap : hTMLImageElement:(_) hTMLImageElement_like -> isMap:Js.boolean -> unit = "isMap" [@@bs.set]
    external width : hTMLImageElement:(_) hTMLImageElement_like -> int = "width" [@@bs.get] 
    external setWidth : hTMLImageElement:(_) hTMLImageElement_like -> width:int -> unit = "width" [@@bs.set]
    external height : hTMLImageElement:(_) hTMLImageElement_like -> int = "height" [@@bs.get] 
    external setHeight : hTMLImageElement:(_) hTMLImageElement_like -> height:int -> unit = "height" [@@bs.set]
    external naturalWidth : hTMLImageElement:(_) hTMLImageElement_like -> int = "naturalWidth" [@@bs.get] 
    external naturalHeight : hTMLImageElement:(_) hTMLImageElement_like -> int = "naturalHeight" [@@bs.get] 
    external complete : hTMLImageElement:(_) hTMLImageElement_like -> bool = "complete" [@@bs.get] 
    external currentSrc : hTMLImageElement:(_) hTMLImageElement_like -> string = "currentSrc" [@@bs.get] 
    external name : hTMLImageElement:(_) hTMLImageElement_like -> string = "name" [@@bs.get] 
    external setName : hTMLImageElement:(_) hTMLImageElement_like -> name:string -> unit = "name" [@@bs.set]
    external align : hTMLImageElement:(_) hTMLImageElement_like -> string = "align" [@@bs.get] 
    external setAlign : hTMLImageElement:(_) hTMLImageElement_like -> align:string -> unit = "align" [@@bs.set]
    external hspace : hTMLImageElement:(_) hTMLImageElement_like -> int = "hspace" [@@bs.get] 
    external setHspace : hTMLImageElement:(_) hTMLImageElement_like -> hspace:int -> unit = "hspace" [@@bs.set]
    external vspace : hTMLImageElement:(_) hTMLImageElement_like -> int = "vspace" [@@bs.get] 
    external setVspace : hTMLImageElement:(_) hTMLImageElement_like -> vspace:int -> unit = "vspace" [@@bs.set]
    external longDesc : hTMLImageElement:(_) hTMLImageElement_like -> string = "longDesc" [@@bs.get] 
    external setLongDesc : hTMLImageElement:(_) hTMLImageElement_like -> longDesc:string -> unit = "longDesc" [@@bs.set]
    external border : hTMLImageElement:(_) hTMLImageElement_like -> string = "border" [@@bs.get] 
    external setBorder : hTMLImageElement:(_) hTMLImageElement_like -> border:string -> unit = "border" [@@bs.set]
    
    
end
 module HTMLTableColElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLTitleElement = struct
    include HTMLElement
    
    external text : hTMLTitleElement:(_) hTMLTitleElement_like -> string = "text" [@@bs.get] 
    external setText : hTMLTitleElement:(_) hTMLTitleElement_like -> text:string -> unit = "text" [@@bs.set]
    
    
end
 module HTMLDataElement = struct
    include HTMLElement
    
    external value : hTMLDataElement:(_) hTMLDataElement_like -> string = "value" [@@bs.get] 
    external setValue : hTMLDataElement:(_) hTMLDataElement_like -> value:string -> unit = "value" [@@bs.set]
    
    
end
 module HTMLMetaElement = struct
    include HTMLElement
    
    external name : hTMLMetaElement:(_) hTMLMetaElement_like -> string = "name" [@@bs.get] 
    external setName : hTMLMetaElement:(_) hTMLMetaElement_like -> name:string -> unit = "name" [@@bs.set]
    external content : hTMLMetaElement:(_) hTMLMetaElement_like -> string = "content" [@@bs.get] 
    external setContent : hTMLMetaElement:(_) hTMLMetaElement_like -> content:string -> unit = "content" [@@bs.set]
    
    
end
 module HTMLLIElement = struct
    include HTMLElement
    
    external value : hTMLLIElement:(_) hTMLLIElement_like -> int = "value" [@@bs.get] 
    external setValue : hTMLLIElement:(_) hTMLLIElement_like -> value:int -> unit = "value" [@@bs.set]
    
    
end
 module HTMLOptGroupElement = struct
    include HTMLElement
    
    external disabled : hTMLOptGroupElement:(_) hTMLOptGroupElement_like -> bool = "disabled" [@@bs.get] 
    external setDisabled : hTMLOptGroupElement:(_) hTMLOptGroupElement_like -> disabled:Js.boolean -> unit = "disabled" [@@bs.set]
    
    
end
 module HTMLFieldSetElement = struct
    include HTMLElement
    
    external disabled : hTMLFieldSetElement:(_) hTMLFieldSetElement_like -> bool = "disabled" [@@bs.get] 
    external setDisabled : hTMLFieldSetElement:(_) hTMLFieldSetElement_like -> disabled:Js.boolean -> unit = "disabled" [@@bs.set]
    external form : hTMLFieldSetElement:(_) hTMLFieldSetElement_like -> hTMLFormElement option = "form" [@@bs.get] [@@bs.return null_to_opt]
    external elements : hTMLFieldSetElement:(_) hTMLFieldSetElement_like -> hTMLCollection = "elements" [@@bs.get] 
    external validity : hTMLFieldSetElement:(_) hTMLFieldSetElement_like -> validityState = "validity" [@@bs.get] 
    
    
end
 module HTMLDListElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLBodyElement = struct
    include HTMLElement
    
    external onafterprint : hTMLBodyElement:(_) hTMLBodyElement_like -> (event -> 'a1058 [@bs]) option = "onafterprint" [@@bs.get] [@@bs.return null_to_opt]
    external setOnafterprint : hTMLBodyElement:(_) hTMLBodyElement_like -> onafterprint:(event -> 'a1059 [@bs]) Js.null -> unit = "onafterprint" [@@bs.set]
    external onbeforeprint : hTMLBodyElement:(_) hTMLBodyElement_like -> (event -> 'a1060 [@bs]) option = "onbeforeprint" [@@bs.get] [@@bs.return null_to_opt]
    external setOnbeforeprint : hTMLBodyElement:(_) hTMLBodyElement_like -> onbeforeprint:(event -> 'a1061 [@bs]) Js.null -> unit = "onbeforeprint" [@@bs.set]
    external onbeforeunload : hTMLBodyElement:(_) hTMLBodyElement_like -> (event -> string Js.null [@bs]) option = "onbeforeunload" [@@bs.get] [@@bs.return null_to_opt]
    external setOnbeforeunload : hTMLBodyElement:(_) hTMLBodyElement_like -> onbeforeunload:(event -> string Js.null [@bs]) Js.null -> unit = "onbeforeunload" [@@bs.set]
    external onhashchange : hTMLBodyElement:(_) hTMLBodyElement_like -> (event -> 'a1062 [@bs]) option = "onhashchange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnhashchange : hTMLBodyElement:(_) hTMLBodyElement_like -> onhashchange:(event -> 'a1063 [@bs]) Js.null -> unit = "onhashchange" [@@bs.set]
    external onlanguagechange : hTMLBodyElement:(_) hTMLBodyElement_like -> (event -> 'a1064 [@bs]) option = "onlanguagechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnlanguagechange : hTMLBodyElement:(_) hTMLBodyElement_like -> onlanguagechange:(event -> 'a1065 [@bs]) Js.null -> unit = "onlanguagechange" [@@bs.set]
    external onmessage : hTMLBodyElement:(_) hTMLBodyElement_like -> (event -> 'a1066 [@bs]) option = "onmessage" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmessage : hTMLBodyElement:(_) hTMLBodyElement_like -> onmessage:(event -> 'a1067 [@bs]) Js.null -> unit = "onmessage" [@@bs.set]
    external onoffline : hTMLBodyElement:(_) hTMLBodyElement_like -> (event -> 'a1068 [@bs]) option = "onoffline" [@@bs.get] [@@bs.return null_to_opt]
    external setOnoffline : hTMLBodyElement:(_) hTMLBodyElement_like -> onoffline:(event -> 'a1069 [@bs]) Js.null -> unit = "onoffline" [@@bs.set]
    external ononline : hTMLBodyElement:(_) hTMLBodyElement_like -> (event -> 'a1070 [@bs]) option = "ononline" [@@bs.get] [@@bs.return null_to_opt]
    external setOnonline : hTMLBodyElement:(_) hTMLBodyElement_like -> ononline:(event -> 'a1071 [@bs]) Js.null -> unit = "ononline" [@@bs.set]
    external onpagehide : hTMLBodyElement:(_) hTMLBodyElement_like -> (event -> 'a1072 [@bs]) option = "onpagehide" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpagehide : hTMLBodyElement:(_) hTMLBodyElement_like -> onpagehide:(event -> 'a1073 [@bs]) Js.null -> unit = "onpagehide" [@@bs.set]
    external onpageshow : hTMLBodyElement:(_) hTMLBodyElement_like -> (event -> 'a1074 [@bs]) option = "onpageshow" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpageshow : hTMLBodyElement:(_) hTMLBodyElement_like -> onpageshow:(event -> 'a1075 [@bs]) Js.null -> unit = "onpageshow" [@@bs.set]
    external onpopstate : hTMLBodyElement:(_) hTMLBodyElement_like -> (event -> 'a1076 [@bs]) option = "onpopstate" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpopstate : hTMLBodyElement:(_) hTMLBodyElement_like -> onpopstate:(event -> 'a1077 [@bs]) Js.null -> unit = "onpopstate" [@@bs.set]
    external onrejectionhandled : hTMLBodyElement:(_) hTMLBodyElement_like -> (event -> 'a1078 [@bs]) option = "onrejectionhandled" [@@bs.get] [@@bs.return null_to_opt]
    external setOnrejectionhandled : hTMLBodyElement:(_) hTMLBodyElement_like -> onrejectionhandled:(event -> 'a1079 [@bs]) Js.null -> unit = "onrejectionhandled" [@@bs.set]
    external onstorage : hTMLBodyElement:(_) hTMLBodyElement_like -> (event -> 'a1080 [@bs]) option = "onstorage" [@@bs.get] [@@bs.return null_to_opt]
    external setOnstorage : hTMLBodyElement:(_) hTMLBodyElement_like -> onstorage:(event -> 'a1081 [@bs]) Js.null -> unit = "onstorage" [@@bs.set]
    external onunhandledrejection : hTMLBodyElement:(_) hTMLBodyElement_like -> (event -> 'a1082 [@bs]) option = "onunhandledrejection" [@@bs.get] [@@bs.return null_to_opt]
    external setOnunhandledrejection : hTMLBodyElement:(_) hTMLBodyElement_like -> onunhandledrejection:(event -> 'a1083 [@bs]) Js.null -> unit = "onunhandledrejection" [@@bs.set]
    external onunload : hTMLBodyElement:(_) hTMLBodyElement_like -> (event -> 'a1084 [@bs]) option = "onunload" [@@bs.get] [@@bs.return null_to_opt]
    external setOnunload : hTMLBodyElement:(_) hTMLBodyElement_like -> onunload:(event -> 'a1085 [@bs]) Js.null -> unit = "onunload" [@@bs.set]
    external text : hTMLBodyElement:(_) hTMLBodyElement_like -> string = "text" [@@bs.get] 
    external setText : hTMLBodyElement:(_) hTMLBodyElement_like -> text:string -> unit = "text" [@@bs.set]
    external bgColor : hTMLBodyElement:(_) hTMLBodyElement_like -> string = "bgColor" [@@bs.get] 
    external setBgColor : hTMLBodyElement:(_) hTMLBodyElement_like -> bgColor:string -> unit = "bgColor" [@@bs.set]
    external background : hTMLBodyElement:(_) hTMLBodyElement_like -> string = "background" [@@bs.get] 
    external setBackground : hTMLBodyElement:(_) hTMLBodyElement_like -> background:string -> unit = "background" [@@bs.set]
    
    
end
 module HTMLLegendElement = struct
    include HTMLElement
    
    external form : hTMLLegendElement:(_) hTMLLegendElement_like -> hTMLFormElement option = "form" [@@bs.get] [@@bs.return null_to_opt]
    
    
end
 module HTMLBaseElement = struct
    include HTMLElement
    
    external href : hTMLBaseElement:(_) hTMLBaseElement_like -> string = "href" [@@bs.get] 
    external setHref : hTMLBaseElement:(_) hTMLBaseElement_like -> href:string -> unit = "href" [@@bs.set]
    
    
end
 module HTMLUListElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLHtmlElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLTimeElement = struct
    include HTMLElement
    
    external dateTime : hTMLTimeElement:(_) hTMLTimeElement_like -> string = "dateTime" [@@bs.get] 
    external setDateTime : hTMLTimeElement:(_) hTMLTimeElement_like -> dateTime:string -> unit = "dateTime" [@@bs.set]
    
    
end
 module HTMLTableSectionElement = struct
    include HTMLElement
    
    external rows : hTMLTableSectionElement:(_) hTMLTableSectionElement_like -> hTMLCollection = "rows" [@@bs.get] 
    external deleteRow : hTMLTableSectionElement:(_) hTMLTableSectionElement_like -> index:int -> unit = "deleteRow" [@@bs.send] 
    external insertRow : hTMLTableSectionElement:(_) hTMLTableSectionElement_like -> ?index:int Js.undefined -> hTMLElement = "insertRow" [@@bs.send] 
    
    let insertRow ~hTMLTableSectionElement ?index () =
      let conv_index = Js_undefined.from_opt in
      let index = conv_index index in
      insertRow ~hTMLTableSectionElement ~index
    
end
 module HTMLFrameElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLLinkElement = struct
    include HTMLElement
    
    external sheet : hTMLLinkElement:(_) hTMLLinkElement_like -> styleSheet option = "sheet" [@@bs.get] [@@bs.return null_to_opt]
    external href : hTMLLinkElement:(_) hTMLLinkElement_like -> string = "href" [@@bs.get] 
    external setHref : hTMLLinkElement:(_) hTMLLinkElement_like -> href:string -> unit = "href" [@@bs.set]
    external crossOrigin : hTMLLinkElement:(_) hTMLLinkElement_like -> string option = "crossOrigin" [@@bs.get] [@@bs.return null_to_opt]
    external setCrossOrigin : hTMLLinkElement:(_) hTMLLinkElement_like -> crossOrigin:string Js.null -> unit = "crossOrigin" [@@bs.set]
    external rel : hTMLLinkElement:(_) hTMLLinkElement_like -> string = "rel" [@@bs.get] 
    external setRel : hTMLLinkElement:(_) hTMLLinkElement_like -> rel:string -> unit = "rel" [@@bs.set]
    external relList : hTMLLinkElement:(_) hTMLLinkElement_like -> dOMTokenList = "relList" [@@bs.get] 
    external media : hTMLLinkElement:(_) hTMLLinkElement_like -> string = "media" [@@bs.get] 
    external setMedia : hTMLLinkElement:(_) hTMLLinkElement_like -> media:string -> unit = "media" [@@bs.set]
    external hreflang : hTMLLinkElement:(_) hTMLLinkElement_like -> string = "hreflang" [@@bs.get] 
    external setHreflang : hTMLLinkElement:(_) hTMLLinkElement_like -> hreflang:string -> unit = "hreflang" [@@bs.set]
    external type_ : hTMLLinkElement:(_) hTMLLinkElement_like -> string = "type" [@@bs.get] 
    external setType : hTMLLinkElement:(_) hTMLLinkElement_like -> type_:string -> unit = "type" [@@bs.set]
    external integrity : hTMLLinkElement:(_) hTMLLinkElement_like -> string = "integrity" [@@bs.get] 
    external setIntegrity : hTMLLinkElement:(_) hTMLLinkElement_like -> integrity:string -> unit = "integrity" [@@bs.set]
    external charset : hTMLLinkElement:(_) hTMLLinkElement_like -> string = "charset" [@@bs.get] 
    external setCharset : hTMLLinkElement:(_) hTMLLinkElement_like -> charset:string -> unit = "charset" [@@bs.set]
    external rev : hTMLLinkElement:(_) hTMLLinkElement_like -> string = "rev" [@@bs.get] 
    external setRev : hTMLLinkElement:(_) hTMLLinkElement_like -> rev:string -> unit = "rev" [@@bs.set]
    external target : hTMLLinkElement:(_) hTMLLinkElement_like -> string = "target" [@@bs.get] 
    external setTarget : hTMLLinkElement:(_) hTMLLinkElement_like -> target:string -> unit = "target" [@@bs.set]
    
    
end
 module HTMLEmbedElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLMeterElement = struct
    include HTMLElement
    
    external labels : hTMLMeterElement:(_) hTMLMeterElement_like -> nodeList = "labels" [@@bs.get] 
    
    
end
 module HTMLTableCaptionElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLLabelElement = struct
    include HTMLElement
    
    external form : hTMLLabelElement:(_) hTMLLabelElement_like -> hTMLFormElement option = "form" [@@bs.get] [@@bs.return null_to_opt]
    external htmlFor : hTMLLabelElement:(_) hTMLLabelElement_like -> string = "htmlFor" [@@bs.get] 
    external setHtmlFor : hTMLLabelElement:(_) hTMLLabelElement_like -> htmlFor:string -> unit = "htmlFor" [@@bs.set]
    external control : hTMLLabelElement:(_) hTMLLabelElement_like -> hTMLElement option = "control" [@@bs.get] [@@bs.return null_to_opt]
    
    
end
 module HTMLAnchorElement = struct
    include HTMLElement
    
    external href : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "href" [@@bs.get] 
    external setHref : hTMLAnchorElement:(_) hTMLAnchorElement_like -> href:string -> unit = "href" [@@bs.set]
    external origin : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "origin" [@@bs.get] 
    external protocol : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "protocol" [@@bs.get] 
    external setProtocol : hTMLAnchorElement:(_) hTMLAnchorElement_like -> protocol:string -> unit = "protocol" [@@bs.set]
    external username : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "username" [@@bs.get] 
    external setUsername : hTMLAnchorElement:(_) hTMLAnchorElement_like -> username:string -> unit = "username" [@@bs.set]
    external password : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "password" [@@bs.get] 
    external setPassword : hTMLAnchorElement:(_) hTMLAnchorElement_like -> password:string -> unit = "password" [@@bs.set]
    external host : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "host" [@@bs.get] 
    external setHost : hTMLAnchorElement:(_) hTMLAnchorElement_like -> host:string -> unit = "host" [@@bs.set]
    external hostname : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "hostname" [@@bs.get] 
    external setHostname : hTMLAnchorElement:(_) hTMLAnchorElement_like -> hostname:string -> unit = "hostname" [@@bs.set]
    external port : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "port" [@@bs.get] 
    external setPort : hTMLAnchorElement:(_) hTMLAnchorElement_like -> port:string -> unit = "port" [@@bs.set]
    external pathname : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "pathname" [@@bs.get] 
    external setPathname : hTMLAnchorElement:(_) hTMLAnchorElement_like -> pathname:string -> unit = "pathname" [@@bs.set]
    external search : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "search" [@@bs.get] 
    external setSearch : hTMLAnchorElement:(_) hTMLAnchorElement_like -> search:string -> unit = "search" [@@bs.set]
    external hash : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "hash" [@@bs.get] 
    external setHash : hTMLAnchorElement:(_) hTMLAnchorElement_like -> hash:string -> unit = "hash" [@@bs.set]
    external target : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "target" [@@bs.get] 
    external setTarget : hTMLAnchorElement:(_) hTMLAnchorElement_like -> target:string -> unit = "target" [@@bs.set]
    external rel : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "rel" [@@bs.get] 
    external setRel : hTMLAnchorElement:(_) hTMLAnchorElement_like -> rel:string -> unit = "rel" [@@bs.set]
    external relList : hTMLAnchorElement:(_) hTMLAnchorElement_like -> dOMTokenList = "relList" [@@bs.get] 
    external text : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "text" [@@bs.get] 
    external setText : hTMLAnchorElement:(_) hTMLAnchorElement_like -> text:string -> unit = "text" [@@bs.set]
    external coords : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "coords" [@@bs.get] 
    external setCoords : hTMLAnchorElement:(_) hTMLAnchorElement_like -> coords:string -> unit = "coords" [@@bs.set]
    external name : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "name" [@@bs.get] 
    external setName : hTMLAnchorElement:(_) hTMLAnchorElement_like -> name:string -> unit = "name" [@@bs.set]
    external rev : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "rev" [@@bs.get] 
    external setRev : hTMLAnchorElement:(_) hTMLAnchorElement_like -> rev:string -> unit = "rev" [@@bs.set]
    external shape : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "shape" [@@bs.get] 
    external setShape : hTMLAnchorElement:(_) hTMLAnchorElement_like -> shape:string -> unit = "shape" [@@bs.set]
    external toString : hTMLAnchorElement:(_) hTMLAnchorElement_like -> string = "toString" [@@bs.send] 
    
    
end
 module HTMLHeadElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLOutputElement = struct
    include HTMLElement
    
    external form : hTMLOutputElement:(_) hTMLOutputElement_like -> hTMLFormElement option = "form" [@@bs.get] [@@bs.return null_to_opt]
    external validity : hTMLOutputElement:(_) hTMLOutputElement_like -> validityState = "validity" [@@bs.get] 
    external labels : hTMLOutputElement:(_) hTMLOutputElement_like -> nodeList = "labels" [@@bs.get] 
    
    
end
 module HTMLUnknownElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLParamElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLOptionElement = struct
    include HTMLElement
    
    external disabled : hTMLOptionElement:(_) hTMLOptionElement_like -> bool = "disabled" [@@bs.get] 
    external setDisabled : hTMLOptionElement:(_) hTMLOptionElement_like -> disabled:Js.boolean -> unit = "disabled" [@@bs.set]
    external form : hTMLOptionElement:(_) hTMLOptionElement_like -> hTMLFormElement option = "form" [@@bs.get] [@@bs.return null_to_opt]
    external label : hTMLOptionElement:(_) hTMLOptionElement_like -> string = "label" [@@bs.get] 
    external setLabel : hTMLOptionElement:(_) hTMLOptionElement_like -> label:string -> unit = "label" [@@bs.set]
    external defaultSelected : hTMLOptionElement:(_) hTMLOptionElement_like -> bool = "defaultSelected" [@@bs.get] 
    external setDefaultSelected : hTMLOptionElement:(_) hTMLOptionElement_like -> defaultSelected:Js.boolean -> unit = "defaultSelected" [@@bs.set]
    external selected : hTMLOptionElement:(_) hTMLOptionElement_like -> bool = "selected" [@@bs.get] 
    external setSelected : hTMLOptionElement:(_) hTMLOptionElement_like -> selected:Js.boolean -> unit = "selected" [@@bs.set]
    external value : hTMLOptionElement:(_) hTMLOptionElement_like -> string = "value" [@@bs.get] 
    external setValue : hTMLOptionElement:(_) hTMLOptionElement_like -> value:string -> unit = "value" [@@bs.set]
    external text : hTMLOptionElement:(_) hTMLOptionElement_like -> string = "text" [@@bs.get] 
    external setText : hTMLOptionElement:(_) hTMLOptionElement_like -> text:string -> unit = "text" [@@bs.set]
    
    
end
 module HTMLOListElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLSelectElement = struct
    include HTMLElement
    
    external disabled : hTMLSelectElement:(_) hTMLSelectElement_like -> bool = "disabled" [@@bs.get] 
    external setDisabled : hTMLSelectElement:(_) hTMLSelectElement_like -> disabled:Js.boolean -> unit = "disabled" [@@bs.set]
    external form : hTMLSelectElement:(_) hTMLSelectElement_like -> hTMLFormElement option = "form" [@@bs.get] [@@bs.return null_to_opt]
    external multiple : hTMLSelectElement:(_) hTMLSelectElement_like -> bool = "multiple" [@@bs.get] 
    external setMultiple : hTMLSelectElement:(_) hTMLSelectElement_like -> multiple:Js.boolean -> unit = "multiple" [@@bs.set]
    external name : hTMLSelectElement:(_) hTMLSelectElement_like -> string = "name" [@@bs.get] 
    external setName : hTMLSelectElement:(_) hTMLSelectElement_like -> name:string -> unit = "name" [@@bs.set]
    external size : hTMLSelectElement:(_) hTMLSelectElement_like -> int = "size" [@@bs.get] 
    external setSize : hTMLSelectElement:(_) hTMLSelectElement_like -> size:int -> unit = "size" [@@bs.set]
    external type_ : hTMLSelectElement:(_) hTMLSelectElement_like -> string = "type" [@@bs.get] 
    external options : hTMLSelectElement:(_) hTMLSelectElement_like -> hTMLOptionsCollection = "options" [@@bs.get] 
    external length : hTMLSelectElement:(_) hTMLSelectElement_like -> int = "length" [@@bs.get] 
    external setLength : hTMLSelectElement:(_) hTMLSelectElement_like -> length:int -> unit = "length" [@@bs.set]
    external selectedIndex : hTMLSelectElement:(_) hTMLSelectElement_like -> int = "selectedIndex" [@@bs.get] 
    external setSelectedIndex : hTMLSelectElement:(_) hTMLSelectElement_like -> selectedIndex:int -> unit = "selectedIndex" [@@bs.set]
    external value : hTMLSelectElement:(_) hTMLSelectElement_like -> string = "value" [@@bs.get] 
    external setValue : hTMLSelectElement:(_) hTMLSelectElement_like -> value:string -> unit = "value" [@@bs.set]
    external validity : hTMLSelectElement:(_) hTMLSelectElement_like -> validityState = "validity" [@@bs.get] 
    external labels : hTMLSelectElement:(_) hTMLSelectElement_like -> nodeList = "labels" [@@bs.get] 
    external add : hTMLSelectElement:(_) hTMLSelectElement_like -> element:'a1086 -> ?before:'a1087 Js.undefined -> unit = "add" [@@bs.send] 
    external item : hTMLSelectElement:(_) hTMLSelectElement_like -> index:int -> element option = "item" [@@bs.send] [@@bs.return null_to_opt]
    external namedItem : hTMLSelectElement:(_) hTMLSelectElement_like -> name:string -> hTMLOptionElement option = "namedItem" [@@bs.send] [@@bs.return null_to_opt]
    external remove : hTMLSelectElement:(_) hTMLSelectElement_like -> index:int -> unit = "remove" [@@bs.send] 
    
    let add ~hTMLSelectElement ~element ~before =
      let conv_element = function
        | `HTMLOptionElement (x: (_) hTMLOptionElement_like) -> Obj.magic x
        | `HTMLOptGroupElement (x: (_) hTMLOptGroupElement_like) -> Obj.magic x
         in
      let element = conv_element element in
      let conv_before = function
        | `HTMLElement_Null (x: (_) hTMLElement_like Js.null) -> Obj.magic x
        | `Int_Null (x: int Js.null) -> Obj.magic x
         in
      let conv_before = access_undef conv_before in
      let before = conv_before before in
      let return = add ~hTMLSelectElement ~element ~before in
      return
    
    let add ~hTMLSelectElement ~element ?before () =
      let conv_before = Js_undefined.from_opt in
      let before = conv_before before in
      add ~hTMLSelectElement ~element ~before
    
end
 module HTMLStyleElement = struct
    include HTMLElement
    
    external sheet : hTMLStyleElement:(_) hTMLStyleElement_like -> styleSheet option = "sheet" [@@bs.get] [@@bs.return null_to_opt]
    
    
end
 module HTMLQuoteElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLBRElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLButtonElement = struct
    include HTMLElement
    
    external disabled : hTMLButtonElement:(_) hTMLButtonElement_like -> bool = "disabled" [@@bs.get] 
    external setDisabled : hTMLButtonElement:(_) hTMLButtonElement_like -> disabled:Js.boolean -> unit = "disabled" [@@bs.set]
    external form : hTMLButtonElement:(_) hTMLButtonElement_like -> hTMLFormElement option = "form" [@@bs.get] [@@bs.return null_to_opt]
    external formAction : hTMLButtonElement:(_) hTMLButtonElement_like -> string = "formAction" [@@bs.get] 
    external setFormAction : hTMLButtonElement:(_) hTMLButtonElement_like -> formAction:string -> unit = "formAction" [@@bs.set]
    external formEnctype : hTMLButtonElement:(_) hTMLButtonElement_like -> string = "formEnctype" [@@bs.get] 
    external setFormEnctype : hTMLButtonElement:(_) hTMLButtonElement_like -> formEnctype:string -> unit = "formEnctype" [@@bs.set]
    external formMethod : hTMLButtonElement:(_) hTMLButtonElement_like -> string = "formMethod" [@@bs.get] 
    external setFormMethod : hTMLButtonElement:(_) hTMLButtonElement_like -> formMethod:string -> unit = "formMethod" [@@bs.set]
    external formNoValidate : hTMLButtonElement:(_) hTMLButtonElement_like -> bool = "formNoValidate" [@@bs.get] 
    external setFormNoValidate : hTMLButtonElement:(_) hTMLButtonElement_like -> formNoValidate:Js.boolean -> unit = "formNoValidate" [@@bs.set]
    external formTarget : hTMLButtonElement:(_) hTMLButtonElement_like -> string = "formTarget" [@@bs.get] 
    external setFormTarget : hTMLButtonElement:(_) hTMLButtonElement_like -> formTarget:string -> unit = "formTarget" [@@bs.set]
    external name : hTMLButtonElement:(_) hTMLButtonElement_like -> string = "name" [@@bs.get] 
    external setName : hTMLButtonElement:(_) hTMLButtonElement_like -> name:string -> unit = "name" [@@bs.set]
    external type_ : hTMLButtonElement:(_) hTMLButtonElement_like -> string = "type" [@@bs.get] 
    external setType : hTMLButtonElement:(_) hTMLButtonElement_like -> type_:string -> unit = "type" [@@bs.set]
    external value : hTMLButtonElement:(_) hTMLButtonElement_like -> string = "value" [@@bs.get] 
    external setValue : hTMLButtonElement:(_) hTMLButtonElement_like -> value:string -> unit = "value" [@@bs.set]
    external validity : hTMLButtonElement:(_) hTMLButtonElement_like -> validityState = "validity" [@@bs.get] 
    external labels : hTMLButtonElement:(_) hTMLButtonElement_like -> nodeList = "labels" [@@bs.get] 
    
    
end
 module HTMLHRElement = struct
    include HTMLElement
    
    external align : hTMLHRElement:(_) hTMLHRElement_like -> string = "align" [@@bs.get] 
    external setAlign : hTMLHRElement:(_) hTMLHRElement_like -> align:string -> unit = "align" [@@bs.set]
    external color : hTMLHRElement:(_) hTMLHRElement_like -> string = "color" [@@bs.get] 
    external setColor : hTMLHRElement:(_) hTMLHRElement_like -> color:string -> unit = "color" [@@bs.set]
    external width : hTMLHRElement:(_) hTMLHRElement_like -> string = "width" [@@bs.get] 
    external setWidth : hTMLHRElement:(_) hTMLHRElement_like -> width:string -> unit = "width" [@@bs.set]
    
    
end
 module HTMLTextAreaElement = struct
    include HTMLElement
    
    external cols : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> int = "cols" [@@bs.get] 
    external setCols : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> cols:int -> unit = "cols" [@@bs.set]
    external disabled : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> bool = "disabled" [@@bs.get] 
    external setDisabled : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> disabled:Js.boolean -> unit = "disabled" [@@bs.set]
    external form : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> hTMLFormElement option = "form" [@@bs.get] [@@bs.return null_to_opt]
    external name : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> string = "name" [@@bs.get] 
    external setName : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> name:string -> unit = "name" [@@bs.set]
    external placeholder : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> string = "placeholder" [@@bs.get] 
    external setPlaceholder : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> placeholder:string -> unit = "placeholder" [@@bs.set]
    external readOnly : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> bool = "readOnly" [@@bs.get] 
    external setReadOnly : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> readOnly:Js.boolean -> unit = "readOnly" [@@bs.set]
    external required : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> bool = "required" [@@bs.get] 
    external setRequired : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> required:Js.boolean -> unit = "required" [@@bs.set]
    external rows : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> int = "rows" [@@bs.get] 
    external setRows : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> rows:int -> unit = "rows" [@@bs.set]
    external wrap : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> string = "wrap" [@@bs.get] 
    external setWrap : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> wrap:string -> unit = "wrap" [@@bs.set]
    external type_ : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> string = "type" [@@bs.get] 
    external defaultValue : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> string = "defaultValue" [@@bs.get] 
    external setDefaultValue : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> defaultValue:string -> unit = "defaultValue" [@@bs.set]
    external value : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> string = "value" [@@bs.get] 
    external setValue : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> value:string -> unit = "value" [@@bs.set]
    external labels : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> nodeList = "labels" [@@bs.get] 
    external selectionStart : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> int = "selectionStart" [@@bs.get] 
    external setSelectionStart : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> selectionStart:int -> unit = "selectionStart" [@@bs.set]
    external selectionEnd : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> int = "selectionEnd" [@@bs.get] 
    external setSelectionEnd : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> selectionEnd:int -> unit = "selectionEnd" [@@bs.set]
    external selectionDirection : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> string = "selectionDirection" [@@bs.get] 
    external setSelectionDirection : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> selectionDirection:string -> unit = "selectionDirection" [@@bs.set]
    external setSelectionRange : hTMLTextAreaElement:(_) hTMLTextAreaElement_like -> start:int -> end_:int -> ?direction:string Js.undefined -> unit = "setSelectionRange" [@@bs.send] 
    
    let setSelectionRange ~hTMLTextAreaElement ~start ~end_ ?direction () =
      let conv_direction = Js_undefined.from_opt in
      let direction = conv_direction direction in
      setSelectionRange ~hTMLTextAreaElement ~start ~end_ ~direction
    
end
 module HTMLSourceElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLPreElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLModElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLMapElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLTemplateElement = struct
    include HTMLElement
    
    external content : hTMLTemplateElement:(_) hTMLTemplateElement_like -> documentFragment = "content" [@@bs.get] 
    
    
end
 module HTMLDirectoryElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLInputElement = struct
    include HTMLElement
    
    external accept : hTMLInputElement:(_) hTMLInputElement_like -> string = "accept" [@@bs.get] 
    external setAccept : hTMLInputElement:(_) hTMLInputElement_like -> accept:string -> unit = "accept" [@@bs.set]
    external alt : hTMLInputElement:(_) hTMLInputElement_like -> string = "alt" [@@bs.get] 
    external setAlt : hTMLInputElement:(_) hTMLInputElement_like -> alt:string -> unit = "alt" [@@bs.set]
    external defaultChecked : hTMLInputElement:(_) hTMLInputElement_like -> bool = "defaultChecked" [@@bs.get] 
    external setDefaultChecked : hTMLInputElement:(_) hTMLInputElement_like -> defaultChecked:Js.boolean -> unit = "defaultChecked" [@@bs.set]
    external checked : hTMLInputElement:(_) hTMLInputElement_like -> bool = "checked" [@@bs.get] 
    external setChecked : hTMLInputElement:(_) hTMLInputElement_like -> checked:Js.boolean -> unit = "checked" [@@bs.set]
    external dirName : hTMLInputElement:(_) hTMLInputElement_like -> string = "dirName" [@@bs.get] 
    external setDirName : hTMLInputElement:(_) hTMLInputElement_like -> dirName:string -> unit = "dirName" [@@bs.set]
    external disabled : hTMLInputElement:(_) hTMLInputElement_like -> bool = "disabled" [@@bs.get] 
    external setDisabled : hTMLInputElement:(_) hTMLInputElement_like -> disabled:Js.boolean -> unit = "disabled" [@@bs.set]
    external form : hTMLInputElement:(_) hTMLInputElement_like -> hTMLFormElement option = "form" [@@bs.get] [@@bs.return null_to_opt]
    external files : hTMLInputElement:(_) hTMLInputElement_like -> fileList option = "files" [@@bs.get] [@@bs.return null_to_opt]
    external formAction : hTMLInputElement:(_) hTMLInputElement_like -> string = "formAction" [@@bs.get] 
    external setFormAction : hTMLInputElement:(_) hTMLInputElement_like -> formAction:string -> unit = "formAction" [@@bs.set]
    external formEnctype : hTMLInputElement:(_) hTMLInputElement_like -> string = "formEnctype" [@@bs.get] 
    external setFormEnctype : hTMLInputElement:(_) hTMLInputElement_like -> formEnctype:string -> unit = "formEnctype" [@@bs.set]
    external formMethod : hTMLInputElement:(_) hTMLInputElement_like -> string = "formMethod" [@@bs.get] 
    external setFormMethod : hTMLInputElement:(_) hTMLInputElement_like -> formMethod:string -> unit = "formMethod" [@@bs.set]
    external formNoValidate : hTMLInputElement:(_) hTMLInputElement_like -> bool = "formNoValidate" [@@bs.get] 
    external setFormNoValidate : hTMLInputElement:(_) hTMLInputElement_like -> formNoValidate:Js.boolean -> unit = "formNoValidate" [@@bs.set]
    external formTarget : hTMLInputElement:(_) hTMLInputElement_like -> string = "formTarget" [@@bs.get] 
    external setFormTarget : hTMLInputElement:(_) hTMLInputElement_like -> formTarget:string -> unit = "formTarget" [@@bs.set]
    external indeterminate : hTMLInputElement:(_) hTMLInputElement_like -> bool = "indeterminate" [@@bs.get] 
    external setIndeterminate : hTMLInputElement:(_) hTMLInputElement_like -> indeterminate:Js.boolean -> unit = "indeterminate" [@@bs.set]
    external max : hTMLInputElement:(_) hTMLInputElement_like -> string = "max" [@@bs.get] 
    external setMax : hTMLInputElement:(_) hTMLInputElement_like -> max:string -> unit = "max" [@@bs.set]
    external maxLength : hTMLInputElement:(_) hTMLInputElement_like -> int = "maxLength" [@@bs.get] 
    external setMaxLength : hTMLInputElement:(_) hTMLInputElement_like -> maxLength:int -> unit = "maxLength" [@@bs.set]
    external min : hTMLInputElement:(_) hTMLInputElement_like -> string = "min" [@@bs.get] 
    external setMin : hTMLInputElement:(_) hTMLInputElement_like -> min:string -> unit = "min" [@@bs.set]
    external minLength : hTMLInputElement:(_) hTMLInputElement_like -> int = "minLength" [@@bs.get] 
    external setMinLength : hTMLInputElement:(_) hTMLInputElement_like -> minLength:int -> unit = "minLength" [@@bs.set]
    external multiple : hTMLInputElement:(_) hTMLInputElement_like -> bool = "multiple" [@@bs.get] 
    external setMultiple : hTMLInputElement:(_) hTMLInputElement_like -> multiple:Js.boolean -> unit = "multiple" [@@bs.set]
    external name : hTMLInputElement:(_) hTMLInputElement_like -> string = "name" [@@bs.get] 
    external setName : hTMLInputElement:(_) hTMLInputElement_like -> name:string -> unit = "name" [@@bs.set]
    external pattern : hTMLInputElement:(_) hTMLInputElement_like -> string = "pattern" [@@bs.get] 
    external setPattern : hTMLInputElement:(_) hTMLInputElement_like -> pattern:string -> unit = "pattern" [@@bs.set]
    external placeholder : hTMLInputElement:(_) hTMLInputElement_like -> string = "placeholder" [@@bs.get] 
    external setPlaceholder : hTMLInputElement:(_) hTMLInputElement_like -> placeholder:string -> unit = "placeholder" [@@bs.set]
    external readOnly : hTMLInputElement:(_) hTMLInputElement_like -> bool = "readOnly" [@@bs.get] 
    external setReadOnly : hTMLInputElement:(_) hTMLInputElement_like -> readOnly:Js.boolean -> unit = "readOnly" [@@bs.set]
    external required : hTMLInputElement:(_) hTMLInputElement_like -> bool = "required" [@@bs.get] 
    external setRequired : hTMLInputElement:(_) hTMLInputElement_like -> required:Js.boolean -> unit = "required" [@@bs.set]
    external size : hTMLInputElement:(_) hTMLInputElement_like -> int = "size" [@@bs.get] 
    external setSize : hTMLInputElement:(_) hTMLInputElement_like -> size:int -> unit = "size" [@@bs.set]
    external src : hTMLInputElement:(_) hTMLInputElement_like -> string = "src" [@@bs.get] 
    external setSrc : hTMLInputElement:(_) hTMLInputElement_like -> src:string -> unit = "src" [@@bs.set]
    external step : hTMLInputElement:(_) hTMLInputElement_like -> string = "step" [@@bs.get] 
    external setStep : hTMLInputElement:(_) hTMLInputElement_like -> step:string -> unit = "step" [@@bs.set]
    external type_ : hTMLInputElement:(_) hTMLInputElement_like -> string = "type" [@@bs.get] 
    external setType : hTMLInputElement:(_) hTMLInputElement_like -> type_:string -> unit = "type" [@@bs.set]
    external defaultValue : hTMLInputElement:(_) hTMLInputElement_like -> string = "defaultValue" [@@bs.get] 
    external setDefaultValue : hTMLInputElement:(_) hTMLInputElement_like -> defaultValue:string -> unit = "defaultValue" [@@bs.set]
    external value : hTMLInputElement:(_) hTMLInputElement_like -> string = "value" [@@bs.get] 
    external setValue : hTMLInputElement:(_) hTMLInputElement_like -> value:string -> unit = "value" [@@bs.set]
    external labels : hTMLInputElement:(_) hTMLInputElement_like -> nodeList = "labels" [@@bs.get] 
    external selectionStart : hTMLInputElement:(_) hTMLInputElement_like -> int = "selectionStart" [@@bs.get] 
    external setSelectionStart : hTMLInputElement:(_) hTMLInputElement_like -> selectionStart:int -> unit = "selectionStart" [@@bs.set]
    external selectionEnd : hTMLInputElement:(_) hTMLInputElement_like -> int = "selectionEnd" [@@bs.get] 
    external setSelectionEnd : hTMLInputElement:(_) hTMLInputElement_like -> selectionEnd:int -> unit = "selectionEnd" [@@bs.set]
    external selectionDirection : hTMLInputElement:(_) hTMLInputElement_like -> string = "selectionDirection" [@@bs.get] 
    external setSelectionDirection : hTMLInputElement:(_) hTMLInputElement_like -> selectionDirection:string -> unit = "selectionDirection" [@@bs.set]
    external selectFiles : hTMLInputElement:(_) hTMLInputElement_like -> path:string array -> unit = "selectFiles" [@@bs.send] 
    external setSelectionRange : hTMLInputElement:(_) hTMLInputElement_like -> start:int -> end_:int -> ?direction:string Js.undefined -> unit = "setSelectionRange" [@@bs.send] 
    
    let setSelectionRange ~hTMLInputElement ~start ~end_ ?direction () =
      let conv_direction = Js_undefined.from_opt in
      let direction = conv_direction direction in
      setSelectionRange ~hTMLInputElement ~start ~end_ ~direction
    
end
 module HTMLParagraphElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLAreaElement = struct
    include HTMLElement
    
    external relList : hTMLAreaElement:(_) hTMLAreaElement_like -> dOMTokenList = "relList" [@@bs.get] 
    
    
end
 module HTMLSpanElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLFormElement = struct
    include HTMLElement
    
    external acceptCharset : hTMLFormElement:(_) hTMLFormElement_like -> string = "acceptCharset" [@@bs.get] 
    external setAcceptCharset : hTMLFormElement:(_) hTMLFormElement_like -> acceptCharset:string -> unit = "acceptCharset" [@@bs.set]
    external action : hTMLFormElement:(_) hTMLFormElement_like -> string = "action" [@@bs.get] 
    external setAction : hTMLFormElement:(_) hTMLFormElement_like -> action:string -> unit = "action" [@@bs.set]
    external autocomplete : hTMLFormElement:(_) hTMLFormElement_like -> string = "autocomplete" [@@bs.get] 
    external setAutocomplete : hTMLFormElement:(_) hTMLFormElement_like -> autocomplete:string -> unit = "autocomplete" [@@bs.set]
    external enctype : hTMLFormElement:(_) hTMLFormElement_like -> string = "enctype" [@@bs.get] 
    external setEnctype : hTMLFormElement:(_) hTMLFormElement_like -> enctype:string -> unit = "enctype" [@@bs.set]
    external encoding : hTMLFormElement:(_) hTMLFormElement_like -> string = "encoding" [@@bs.get] 
    external setEncoding : hTMLFormElement:(_) hTMLFormElement_like -> encoding:string -> unit = "encoding" [@@bs.set]
    external method_ : hTMLFormElement:(_) hTMLFormElement_like -> string = "method" [@@bs.get] 
    external setMethod : hTMLFormElement:(_) hTMLFormElement_like -> method_:string -> unit = "method" [@@bs.set]
    external name : hTMLFormElement:(_) hTMLFormElement_like -> string = "name" [@@bs.get] 
    external setName : hTMLFormElement:(_) hTMLFormElement_like -> name:string -> unit = "name" [@@bs.set]
    external noValidate : hTMLFormElement:(_) hTMLFormElement_like -> bool = "noValidate" [@@bs.get] 
    external setNoValidate : hTMLFormElement:(_) hTMLFormElement_like -> noValidate:Js.boolean -> unit = "noValidate" [@@bs.set]
    external target : hTMLFormElement:(_) hTMLFormElement_like -> string = "target" [@@bs.get] 
    external setTarget : hTMLFormElement:(_) hTMLFormElement_like -> target:string -> unit = "target" [@@bs.set]
    external elements : hTMLFormElement:(_) hTMLFormElement_like -> hTMLFormControlsCollection = "elements" [@@bs.get] 
    external length : hTMLFormElement:(_) hTMLFormElement_like -> int = "length" [@@bs.get] 
    external none : hTMLFormElement:(_) hTMLFormElement_like -> index:int -> element option = "" [@@bs.get_index] [@@bs.return null_to_opt]
    external reset : hTMLFormElement:(_) hTMLFormElement_like -> unit = "reset" [@@bs.send] 
    external submit : hTMLFormElement:(_) hTMLFormElement_like -> unit = "submit" [@@bs.send] 
    
    
end
 module HTMLDataListElement = struct
    include HTMLElement
    
    external options : hTMLDataListElement:(_) hTMLDataListElement_like -> hTMLCollection = "options" [@@bs.get] 
    
    
end
 module HTMLCanvasElement = struct
    include HTMLElement
    
    external width : hTMLCanvasElement:(_) hTMLCanvasElement_like -> int = "width" [@@bs.get] 
    external setWidth : hTMLCanvasElement:(_) hTMLCanvasElement_like -> width:int -> unit = "width" [@@bs.set]
    external height : hTMLCanvasElement:(_) hTMLCanvasElement_like -> int = "height" [@@bs.get] 
    external setHeight : hTMLCanvasElement:(_) hTMLCanvasElement_like -> height:int -> unit = "height" [@@bs.set]
    external getContext : hTMLCanvasElement:(_) hTMLCanvasElement_like -> ((_) hTMLCanvasElement_like, 'a1088 Js.null, (string*('a1089))) variadic_func = "getContext" [@@bs.get]
    external toDataURL : hTMLCanvasElement:(_) hTMLCanvasElement_like -> ((_) hTMLCanvasElement_like, string, (string Js.undefined*('a1090))) variadic_func = "toDataURL" [@@bs.get]
    
    let getContext ~hTMLCanvasElement ~contextId ~arguments =
      let func = getContext hTMLCanvasElement in
      let args = to_arg arguments in
      let args = unsafe_add args contextId in
      apply func hTMLCanvasElement args
    
    let getContext ~hTMLCanvasElement ~contextId ~arguments () =
      let conv_return = identity in
      let return = getContext ~hTMLCanvasElement ~contextId ~arguments in
      let conv_return = null_to_opt conv_return in
      let return = conv_return return in
      return
    
    let toDataURL ~hTMLCanvasElement ~type_ ~arguments =
      let func = toDataURL hTMLCanvasElement in
      let args = to_arg arguments in
      let args = unsafe_add args type_ in
      apply func hTMLCanvasElement args
    
    let toDataURL ~hTMLCanvasElement ?type_ ~arguments () =
      let conv_type = Js_undefined.from_opt in
      let type_ = conv_type type_ in
      toDataURL ~hTMLCanvasElement ~type_ ~arguments
    
end
 module HTMLTrackElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLTableRowElement = struct
    include HTMLElement
    
    external rowIndex : hTMLTableRowElement:(_) hTMLTableRowElement_like -> int = "rowIndex" [@@bs.get] 
    external sectionRowIndex : hTMLTableRowElement:(_) hTMLTableRowElement_like -> int = "sectionRowIndex" [@@bs.get] 
    external cells : hTMLTableRowElement:(_) hTMLTableRowElement_like -> hTMLCollection = "cells" [@@bs.get] 
    external bgColor : hTMLTableRowElement:(_) hTMLTableRowElement_like -> string = "bgColor" [@@bs.get] 
    external setBgColor : hTMLTableRowElement:(_) hTMLTableRowElement_like -> bgColor:string -> unit = "bgColor" [@@bs.set]
    external deleteCell : hTMLTableRowElement:(_) hTMLTableRowElement_like -> index:int -> unit = "deleteCell" [@@bs.send] 
    external insertCell : hTMLTableRowElement:(_) hTMLTableRowElement_like -> ?index:int Js.undefined -> hTMLElement = "insertCell" [@@bs.send] 
    
    let insertCell ~hTMLTableRowElement ?index () =
      let conv_index = Js_undefined.from_opt in
      let index = conv_index index in
      insertCell ~hTMLTableRowElement ~index
    
end
 module HTMLDivElement = struct
    include HTMLElement
    
    external align : hTMLDivElement:(_) hTMLDivElement_like -> string = "align" [@@bs.get] 
    external setAlign : hTMLDivElement:(_) hTMLDivElement_like -> align:string -> unit = "align" [@@bs.set]
    
    
end
 module HTMLAppletElement = struct
    include HTMLElement
    
    external name : hTMLAppletElement:(_) hTMLAppletElement_like -> string = "name" [@@bs.get] 
    external setName : hTMLAppletElement:(_) hTMLAppletElement_like -> name:string -> unit = "name" [@@bs.set]
    
    
end
 module HTMLDialogElement = struct
    include HTMLElement
    
    external open_ : hTMLDialogElement:(_) hTMLDialogElement_like -> bool = "open" [@@bs.get] 
    external setOpen : hTMLDialogElement:(_) hTMLDialogElement_like -> open_:Js.boolean -> unit = "open" [@@bs.set]
    external returnValue : hTMLDialogElement:(_) hTMLDialogElement_like -> string = "returnValue" [@@bs.get] 
    external setReturnValue : hTMLDialogElement:(_) hTMLDialogElement_like -> returnValue:string -> unit = "returnValue" [@@bs.set]
    external close : hTMLDialogElement:(_) hTMLDialogElement_like -> ?returnValue:string Js.undefined -> unit = "close" [@@bs.send] 
    
    let close ~hTMLDialogElement ?returnValue () =
      let conv_returnValue = Js_undefined.from_opt in
      let returnValue = conv_returnValue returnValue in
      close ~hTMLDialogElement ~returnValue
    
end
 module HTMLFrameSetElement = struct
    include HTMLElement
    
    external onafterprint : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> (event -> 'a1091 [@bs]) option = "onafterprint" [@@bs.get] [@@bs.return null_to_opt]
    external setOnafterprint : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> onafterprint:(event -> 'a1092 [@bs]) Js.null -> unit = "onafterprint" [@@bs.set]
    external onbeforeprint : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> (event -> 'a1093 [@bs]) option = "onbeforeprint" [@@bs.get] [@@bs.return null_to_opt]
    external setOnbeforeprint : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> onbeforeprint:(event -> 'a1094 [@bs]) Js.null -> unit = "onbeforeprint" [@@bs.set]
    external onbeforeunload : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> (event -> string Js.null [@bs]) option = "onbeforeunload" [@@bs.get] [@@bs.return null_to_opt]
    external setOnbeforeunload : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> onbeforeunload:(event -> string Js.null [@bs]) Js.null -> unit = "onbeforeunload" [@@bs.set]
    external onhashchange : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> (event -> 'a1095 [@bs]) option = "onhashchange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnhashchange : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> onhashchange:(event -> 'a1096 [@bs]) Js.null -> unit = "onhashchange" [@@bs.set]
    external onlanguagechange : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> (event -> 'a1097 [@bs]) option = "onlanguagechange" [@@bs.get] [@@bs.return null_to_opt]
    external setOnlanguagechange : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> onlanguagechange:(event -> 'a1098 [@bs]) Js.null -> unit = "onlanguagechange" [@@bs.set]
    external onmessage : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> (event -> 'a1099 [@bs]) option = "onmessage" [@@bs.get] [@@bs.return null_to_opt]
    external setOnmessage : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> onmessage:(event -> 'a1100 [@bs]) Js.null -> unit = "onmessage" [@@bs.set]
    external onoffline : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> (event -> 'a1101 [@bs]) option = "onoffline" [@@bs.get] [@@bs.return null_to_opt]
    external setOnoffline : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> onoffline:(event -> 'a1102 [@bs]) Js.null -> unit = "onoffline" [@@bs.set]
    external ononline : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> (event -> 'a1103 [@bs]) option = "ononline" [@@bs.get] [@@bs.return null_to_opt]
    external setOnonline : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> ononline:(event -> 'a1104 [@bs]) Js.null -> unit = "ononline" [@@bs.set]
    external onpagehide : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> (event -> 'a1105 [@bs]) option = "onpagehide" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpagehide : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> onpagehide:(event -> 'a1106 [@bs]) Js.null -> unit = "onpagehide" [@@bs.set]
    external onpageshow : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> (event -> 'a1107 [@bs]) option = "onpageshow" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpageshow : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> onpageshow:(event -> 'a1108 [@bs]) Js.null -> unit = "onpageshow" [@@bs.set]
    external onpopstate : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> (event -> 'a1109 [@bs]) option = "onpopstate" [@@bs.get] [@@bs.return null_to_opt]
    external setOnpopstate : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> onpopstate:(event -> 'a1110 [@bs]) Js.null -> unit = "onpopstate" [@@bs.set]
    external onrejectionhandled : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> (event -> 'a1111 [@bs]) option = "onrejectionhandled" [@@bs.get] [@@bs.return null_to_opt]
    external setOnrejectionhandled : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> onrejectionhandled:(event -> 'a1112 [@bs]) Js.null -> unit = "onrejectionhandled" [@@bs.set]
    external onstorage : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> (event -> 'a1113 [@bs]) option = "onstorage" [@@bs.get] [@@bs.return null_to_opt]
    external setOnstorage : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> onstorage:(event -> 'a1114 [@bs]) Js.null -> unit = "onstorage" [@@bs.set]
    external onunhandledrejection : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> (event -> 'a1115 [@bs]) option = "onunhandledrejection" [@@bs.get] [@@bs.return null_to_opt]
    external setOnunhandledrejection : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> onunhandledrejection:(event -> 'a1116 [@bs]) Js.null -> unit = "onunhandledrejection" [@@bs.set]
    external onunload : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> (event -> 'a1117 [@bs]) option = "onunload" [@@bs.get] [@@bs.return null_to_opt]
    external setOnunload : hTMLFrameSetElement:(_) hTMLFrameSetElement_like -> onunload:(event -> 'a1118 [@bs]) Js.null -> unit = "onunload" [@@bs.set]
    
    
end
 module HTMLDetailsElement = struct
    include HTMLElement
    
    external open_ : hTMLDetailsElement:(_) hTMLDetailsElement_like -> bool = "open" [@@bs.get] 
    external setOpen : hTMLDetailsElement:(_) hTMLDetailsElement_like -> open_:Js.boolean -> unit = "open" [@@bs.set]
    
    
end
 module HTMLProgressElement = struct
    include HTMLElement
    
    external labels : hTMLProgressElement:(_) hTMLProgressElement_like -> nodeList = "labels" [@@bs.get] 
    
    
end
 module HTMLFontElement = struct
    include HTMLElement
    
    external color : hTMLFontElement:(_) hTMLFontElement_like -> string = "color" [@@bs.get] 
    external setColor : hTMLFontElement:(_) hTMLFontElement_like -> color:string -> unit = "color" [@@bs.set]
    external face : hTMLFontElement:(_) hTMLFontElement_like -> string = "face" [@@bs.get] 
    external setFace : hTMLFontElement:(_) hTMLFontElement_like -> face:string -> unit = "face" [@@bs.set]
    external size : hTMLFontElement:(_) hTMLFontElement_like -> string = "size" [@@bs.get] 
    external setSize : hTMLFontElement:(_) hTMLFontElement_like -> size:string -> unit = "size" [@@bs.set]
    
    
end
 module HTMLTableCellElement = struct
    include HTMLElement
    
    external colSpan : hTMLTableCellElement:(_) hTMLTableCellElement_like -> int = "colSpan" [@@bs.get] 
    external setColSpan : hTMLTableCellElement:(_) hTMLTableCellElement_like -> colSpan:int -> unit = "colSpan" [@@bs.set]
    external rowSpan : hTMLTableCellElement:(_) hTMLTableCellElement_like -> int = "rowSpan" [@@bs.get] 
    external setRowSpan : hTMLTableCellElement:(_) hTMLTableCellElement_like -> rowSpan:int -> unit = "rowSpan" [@@bs.set]
    external cellIndex : hTMLTableCellElement:(_) hTMLTableCellElement_like -> int = "cellIndex" [@@bs.get] 
    external width : hTMLTableCellElement:(_) hTMLTableCellElement_like -> string = "width" [@@bs.get] 
    external setWidth : hTMLTableCellElement:(_) hTMLTableCellElement_like -> width:string -> unit = "width" [@@bs.set]
    external bgColor : hTMLTableCellElement:(_) hTMLTableCellElement_like -> string = "bgColor" [@@bs.get] 
    external setBgColor : hTMLTableCellElement:(_) hTMLTableCellElement_like -> bgColor:string -> unit = "bgColor" [@@bs.set]
    
    
end
 module HTMLTableElement = struct
    include HTMLElement
    
    external caption : hTMLTableElement:(_) hTMLTableElement_like -> hTMLTableCaptionElement option = "caption" [@@bs.get] [@@bs.return null_to_opt]
    external setCaption : hTMLTableElement:(_) hTMLTableElement_like -> caption:hTMLTableCaptionElement Js.null -> unit = "caption" [@@bs.set]
    external tHead : hTMLTableElement:(_) hTMLTableElement_like -> hTMLTableSectionElement option = "tHead" [@@bs.get] [@@bs.return null_to_opt]
    external setTHead : hTMLTableElement:(_) hTMLTableElement_like -> tHead:hTMLTableSectionElement Js.null -> unit = "tHead" [@@bs.set]
    external tFoot : hTMLTableElement:(_) hTMLTableElement_like -> hTMLTableSectionElement option = "tFoot" [@@bs.get] [@@bs.return null_to_opt]
    external setTFoot : hTMLTableElement:(_) hTMLTableElement_like -> tFoot:hTMLTableSectionElement Js.null -> unit = "tFoot" [@@bs.set]
    external tBodies : hTMLTableElement:(_) hTMLTableElement_like -> hTMLCollection = "tBodies" [@@bs.get] 
    external rows : hTMLTableElement:(_) hTMLTableElement_like -> hTMLCollection = "rows" [@@bs.get] 
    external width : hTMLTableElement:(_) hTMLTableElement_like -> string = "width" [@@bs.get] 
    external setWidth : hTMLTableElement:(_) hTMLTableElement_like -> width:string -> unit = "width" [@@bs.set]
    external bgColor : hTMLTableElement:(_) hTMLTableElement_like -> string = "bgColor" [@@bs.get] 
    external setBgColor : hTMLTableElement:(_) hTMLTableElement_like -> bgColor:string -> unit = "bgColor" [@@bs.set]
    external createCaption : hTMLTableElement:(_) hTMLTableElement_like -> hTMLTableCaptionElement = "createCaption" [@@bs.send] 
    external createTBody : hTMLTableElement:(_) hTMLTableElement_like -> hTMLTableSectionElement = "createTBody" [@@bs.send] 
    external createTFoot : hTMLTableElement:(_) hTMLTableElement_like -> hTMLTableSectionElement = "createTFoot" [@@bs.send] 
    external createTHead : hTMLTableElement:(_) hTMLTableElement_like -> hTMLTableSectionElement = "createTHead" [@@bs.send] 
    external deleteCaption : hTMLTableElement:(_) hTMLTableElement_like -> unit = "deleteCaption" [@@bs.send] 
    external deleteRow : hTMLTableElement:(_) hTMLTableElement_like -> index:int -> unit = "deleteRow" [@@bs.send] 
    external deleteTFoot : hTMLTableElement:(_) hTMLTableElement_like -> unit = "deleteTFoot" [@@bs.send] 
    external deleteTHead : hTMLTableElement:(_) hTMLTableElement_like -> unit = "deleteTHead" [@@bs.send] 
    external insertRow : hTMLTableElement:(_) hTMLTableElement_like -> ?index:int Js.undefined -> hTMLTableRowElement = "insertRow" [@@bs.send] 
    
    let insertRow ~hTMLTableElement ?index () =
      let conv_index = Js_undefined.from_opt in
      let index = conv_index index in
      insertRow ~hTMLTableElement ~index
    
end
 module HTMLHeadingElement = struct
    include HTMLElement
    
    
    
    
end
 module HTMLAudioElement = struct
    include HTMLMediaElement
    
    
    
    
end
 module HTMLTableHeaderCellElement = struct
    include HTMLTableCellElement
    
    
    
    
end
 module SVGSVGElement = struct
    include SVGGraphicsElement
    
    
    
    
end
 module HTMLVideoElement = struct
    include HTMLMediaElement
    
    
    
    
end
 module HTMLTableDataCellElement = struct
    include HTMLTableCellElement
    
    
    
    
end
