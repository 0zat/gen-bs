// Generated by BUCKLESCRIPT VERSION 1.8.2, PLEASE EDIT WITH CARE
'use strict';

var Curry        = require("bs-platform/lib/js/curry.js");
var Js_math      = require("bs-platform/lib/js/js_math.js");
var Firework     = require("./firework.js");
var Particle     = require("./particle.js");
var Servo_dom    = require("./servo_dom.js");
var Pervasives   = require("bs-platform/lib/js/pervasives.js");
var Draw_objects = require("./draw_objects.js");

var match = document.getElementById("canvas");

var canvas = match !== null ? Servo_dom.Element[/* downcast */25](match) : Pervasives.failwith("canvas is not found");

var match$1 = Servo_dom.HTMLCanvasElement[/* getContext */35]("2d", /* array */[], canvas);

var ctx = match$1 ? match$1[0] : Pervasives.failwith("canvas is not supported");

var canvas_width = window.innerWidth;

var canvas_height = window.innerHeight;

var timer_tick = [0];

var timer_total = [80];

function loop() {
  window.requestAnimationFrame(loop);
  ctx.globalCompositeOperation = "destination-out";
  ctx.fillStyle = "rgba(0, 0, 0, 0.5)";
  ctx.fillRect(0, 0, canvas_width, canvas_height);
  ctx.globalCompositeOperation = "lighter";
  Curry._1(Firework.update, /* () */0);
  Curry._1(Firework.draw, ctx);
  Curry._1(Particle.update, /* () */0);
  Curry._1(Particle.draw, ctx);
  if (timer_tick[0] >= timer_total[0]) {
    var width = canvas_width;
    var sx = Draw_objects.random(width / 4, width / 4 * 3);
    var base_hue = Draw_objects.random(0, 360);
    Curry._4(Firework.create, 1, base_hue, sx, canvas_height);
    timer_total[0] = Js_math.random_int(20, 100);
    timer_tick[0] = 0;
    return /* () */0;
  } else {
    timer_tick[0] = timer_tick[0] + 1 | 0;
    return /* () */0;
  }
}

function onload() {
  canvas.width = canvas_width;
  canvas.height = canvas_height;
  return loop(0);
}

window.onload = onload;

var $$Math = 0;

exports.$$Math        = $$Math;
exports.canvas        = canvas;
exports.ctx           = ctx;
exports.canvas_width  = canvas_width;
exports.canvas_height = canvas_height;
exports.timer_tick    = timer_tick;
exports.timer_total   = timer_total;
exports.loop          = loop;
exports.onload        = onload;
/* match Not a pure module */
