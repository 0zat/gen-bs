// Generated by BUCKLESCRIPT VERSION 1.8.2, PLEASE EDIT WITH CARE
'use strict';

var List       = require("bs-platform/lib/js/list.js");
var $$Array    = require("bs-platform/lib/js/array.js");
var Block      = require("bs-platform/lib/js/block.js");
var Curry      = require("bs-platform/lib/js/curry.js");
var Queue      = require("bs-platform/lib/js/queue.js");
var Printf     = require("bs-platform/lib/js/printf.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

function random(min, max) {
  return Math.random() * (max - min) + min;
}

function create_elem(coord_count, x, y, speed, friction, brightness, hue, gravity, alpha, decay, angle_rad) {
  var coordinates = Queue.create(/* () */0);
  $$Array.iter((function (x) {
          return Queue.add(x, coordinates);
        }), Caml_array.caml_make_vect(coord_count, /* tuple */[
            x,
            y
          ]));
  return /* record */[
          /* x */x,
          /* y */y,
          /* coordinates */coordinates,
          /* speed */speed,
          /* friction */friction,
          /* brightness */brightness,
          /* hue */hue,
          /* gravity */gravity,
          /* alpha */alpha,
          /* decay */decay,
          /* angle_rad */angle_rad
        ];
}

function Make(Conf) {
  var elems = [/* [] */0];
  var update_elem = function (elem) {
    Queue.pop(elem[/* coordinates */2]);
    Queue.add(/* tuple */[
          elem[/* x */0],
          elem[/* y */1]
        ], elem[/* coordinates */2]);
    elem[/* speed */3] = elem[/* speed */3] * elem[/* friction */4];
    elem[0] += (Math.cos(elem[/* angle_rad */10]) * elem[/* speed */3]);
    elem[/* y */1] = elem[/* y */1] + Math.sin(elem[/* angle_rad */10]) * elem[/* speed */3] + elem[/* gravity */7];
    elem[8] -= elem[/* decay */9];
    if (Curry._1(Conf[/* is_delete_elem */0], elem)) {
      Curry._1(Conf[/* action_when_delete */1], elem);
      return /* false */0;
    } else {
      return /* true */1;
    }
  };
  var draw_elem = function (ctx, elem) {
    ctx.beginPath();
    var match = Queue.peek(elem[/* coordinates */2]);
    ctx.moveTo(match[0], match[1]);
    ctx.lineTo(elem[/* x */0], elem[/* y */1]);
    var make_stroke_style = function (elem) {
      return Curry._3(Printf.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "hsla(",
                          /* Float */Block.__(8, [
                              /* Float_f */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* String_literal */Block.__(11, [
                                  ", 100",
                                  /* Char_literal */Block.__(12, [
                                      /* "%" */37,
                                      /* String_literal */Block.__(11, [
                                          ", ",
                                          /* Float */Block.__(8, [
                                              /* Float_f */0,
                                              /* No_padding */0,
                                              /* No_precision */0,
                                              /* Char_literal */Block.__(12, [
                                                  /* "%" */37,
                                                  /* Char_literal */Block.__(12, [
                                                      /* "," */44,
                                                      /* Float */Block.__(8, [
                                                          /* Float_f */0,
                                                          /* No_padding */0,
                                                          /* No_precision */0,
                                                          /* Char_literal */Block.__(12, [
                                                              /* ")" */41,
                                                              /* End_of_format */0
                                                            ])
                                                        ])
                                                    ])
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ])
                        ]),
                      "hsla(%f, 100%%, %f%%,%f)"
                    ]), elem[/* hue */6], elem[/* brightness */5], elem[/* alpha */8]);
    };
    ctx.strokeStyle = make_stroke_style(elem);
    ctx.stroke();
    return /* () */0;
  };
  var update = function () {
    elems[0] = List.filter(update_elem)(elems[0]);
    return /* () */0;
  };
  var draw = function (ctx) {
    return List.iter((function (param) {
                  return draw_elem(ctx, param);
                }), elems[0]);
  };
  var create = function (count, base_hue, x, y) {
    for(var _for = 1; _for <= count; ++_for){
      var elem = Curry._3(Conf[/* create_elem */2], base_hue, x, y);
      elems[0] = /* :: */[
        elem,
        elems[0]
      ];
    }
    return /* () */0;
  };
  return /* module */[
          /* elems */elems,
          /* update_elem */update_elem,
          /* draw_elem */draw_elem,
          /* update */update,
          /* draw */draw,
          /* create */create
        ];
}

var $$Math$1 = 0;

exports.$$Math      = $$Math$1;
exports.random      = random;
exports.create_elem = create_elem;
exports.Make        = Make;
/* No side effect */
